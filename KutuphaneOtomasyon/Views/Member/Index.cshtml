@model List<KutuphaneOtomasyon.Models.Member>
@{
    ViewData["Title"] = "Üye Listesi";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    /* ========= PALET ========= */
    :root {
        --lib-900: #0b1220; /* koyu mavi → #0b1220 */
        --lib-700: #0b1220; /* koyu mavi → #0b1220 */
        --lib-500: #7A85C1;
        --lib-300: #B2B0E8;

    }

    /* DataTables varsayılan arama kutusu */
    #memberTable_filter {
        display: none;
    }

    /* ========= ÜST BAŞLIK & CTA ========= */
    .container-fluid > .row.mb-4 > .col-md-12.d-flex {
        justify-content: space-between !important;
        gap: 12px;
    }

    .container-fluid > .row.mb-4 h4.card-title {
        display: flex !important;
        align-items: center;
        gap: .6rem;
        margin: 0 !important;
        font-weight: 800;
        font-size: 1.6rem;
        letter-spacing: .2px;
        color: #111;
        position: relative;
    }

        .container-fluid > .row.mb-4 h4.card-title::after {
            content: "";
            position: absolute;
            left: 0;
            bottom: -6px;
            width: 64px;
            height: 4px;
            border-radius: 9999px;
            background: linear-gradient(90deg,#16a34a,#f59e0b,#ef4444);
        }

    .container-fluid > .row.mb-4 a.btn.btn-success {
        background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
        color: #fff !important;
        border: none !important;
        border-radius: 10px !important;
        box-shadow: 0 8px 18px rgba(11,18,32,.25) !important;
        font-weight: 600;
    }

        .container-fluid > .row.mb-4 a.btn.btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(11,18,32,.35) !important;
        }

    /* ========= Genel buton animasyonu ========= */
    .btn {
        transition: transform .12s ease,box-shadow .12s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(0,0,0,.15);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(0,0,0,.12);
        }

    /* ========= Kart & Tablo kabı ========= */
    .dt-elevated {
        border: 0;
        border-radius: 16px;
        background: rgba(255,255,255,.86);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        box-shadow: 0 1px 2px rgba(0,0,0,.06),0 6px 16px rgba(27,31,35,.08),0 18px 40px rgba(27,31,35,.10);
        position: relative;
        transition: transform .18s ease,box-shadow .18s ease;
    }

        .dt-elevated:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,.06),0 12px 26px rgba(27,31,35,.10),0 28px 60px rgba(27,31,35,.12);
        }

        .dt-elevated::after {
            content: "";
            position: absolute;
            inset: auto 8% -14px 8%;
            height: 28px;
            background: radial-gradient(ellipse at center,rgba(0,0,0,.16) 0%,rgba(0,0,0,0) 70%);
            filter: blur(8px);
            pointer-events: none;
        }

    .dt-pretty {
        border-radius: 12px;
        overflow: hidden;
        background: rgba(255,255,255,.92);
    }

        .dt-pretty thead th {
            position: sticky;
            top: 0;
            z-index: 2;
            background: inherit !important;
            color: inherit !important;
            box-shadow: 0 1px 0 rgba(0,0,0,.06);
        }

        .dt-pretty thead.bg-info th {
            color: #fff !important;
        }

        .dt-pretty td, .dt-pretty th {
            border-color: #eef2f7 !important;
        }

        .dt-pretty tbody tr {
            transition: transform .12s ease,box-shadow .12s ease,background .12s ease;
        }

            .dt-pretty tbody tr:hover {
                background: #f8fbff !important;
                transform: translateY(-1px);
                box-shadow: 0 6px 14px rgba(30,41,59,.06);
            }

    .dt-float {
        transform: translateZ(0);
        perspective: 1200px;
    }

    /* ========= DataTables Üst Butonlar ========= */
    .dataTables_wrapper .dt-buttons {
        display: flex;
        gap: 8px;
        overflow: visible;
    }

        .dataTables_wrapper .dt-buttons .btn {
            border-radius: 10px !important;
            border: 1px solid #e6e9f0 !important;
            box-shadow: 0 2px 8px rgba(0,0,0,.06);
        }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            position: relative;
            overflow: hidden;
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
            color: #fff !important;
            border: none !important;
            border-radius: 10px !important;
            padding: 10px 14px !important;
            font-weight: 600 !important;
            line-height: 1 !important;
            box-shadow: 0 8px 20px rgba(11,18,32,.25) !important;
            transition: transform .12s ease,box-shadow .12s ease,filter .18s ease;
        }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy i,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button i {
                margin-right: 6px;
            }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:focus,
            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:focus,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
                background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
                color: #fff !important;
                transform: none !important;
                filter: none !important;
                box-shadow: 0 8px 20px rgba(11,18,32,.25) !important;
                outline: none !important;
            }

        .dataTables_wrapper .dt-buttons .dt-button::after {
            content: none !important;
        }

        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            padding-right: 28px !important;
        }

    /* ========= Sayfalama ========= */
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(11,18,32,.12) !important;
            border-color: rgba(11,18,32,.25) !important;
            color: #0b1220 !important;
            box-shadow: 0 2px 8px rgba(11,18,32,.15);
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button:focus {
            outline: none !important;
            box-shadow: none !important;
        }

    #memberTable_wrapper .dataTables_paginate .paginate_button.current,
    #memberTable_wrapper .dataTables_paginate .paginate_button.current:hover {
        background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
        color: #fff !important;
        border-color: transparent !important;
        box-shadow: 0 8px 18px rgba(11,18,32,.25) !important;
    }

    /* ========= Tablo başlığı ========= */
    #memberTable thead.bg-info {
        background: var(--lib-900) !important;
        border-color: var(--lib-900) !important;
    }

    /* ========= Filtre Modali & Select2 ========= */
    .customf-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        inset: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,.4);
        backdrop-filter: blur(2px);
        overflow: hidden;
    }

    .customf-modal-content {
        background: #fff;
        border-radius: 16px;
        width: 90%;
        max-width: 480px;
        margin: 5% auto;
        box-shadow: 0 25px 50px rgba(0,0,0,.1);
        font-family: 'Segoe UI',sans-serif;
        display: flex;
        flex-direction: column;
        max-height: 90vh;
        overflow: hidden;
        padding: 0;
    }

    .customf-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 32px 12px;
        border-bottom: 1px solid #eee;
        background: #fff;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .customf-modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .customf-modal-title i {
            font-size: 20px;
            color: #52616B;
            background: #f3f4f6;
            padding: 8px;
            border-radius: 50%;
            box-shadow: 0 0 4px rgba(0,0,0,.1);
        }

    .customf-modal-dropdown {
        padding: 16px 32px 30px;
        background: #f7f8fa;
        border-bottom: 1px solid #e5e7eb;
        position: sticky;
        top: 58px;
        z-index: 9;
    }

    .customf-modal-body {
        padding: 24px 32px;
        overflow-y: auto;
        flex: 1;
    }

    .customf-modal-footer {
        padding: 16px 32px 24px;
        border-top: 1px solid #eee;
        background: #fff;
    }

    .customf-close {
        float: right;
        font-size: 22px;
        font-weight: 600;
        color: #bbb;
        cursor: pointer;
        background: #f2f2f2;
        border-radius: 40%;
        padding: 1px 9px;
        transition: all .3s ease;
    }

        .customf-close:hover {
            background: #e0e0e0;
            color: #000;
        }

    .customf-input-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

        .customf-input-group label {
            font-weight: 500;
            margin-bottom: 6px;
            font-size: 15px;
            color: #444;
        }

        .customf-input-group input, .customf-input-group select {
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 10px;
            font-size: 15px;
            background: #fff;
            transition: all .25s ease-in-out;
            box-shadow: 0 1px 4px rgba(0,0,0,.05);
        }

            .customf-input-group input:focus, .customf-input-group select:focus {
                border-color: #C9D6DF;
                background: #fefefe;
                box-shadow: 0 0 0 3px rgba(201,214,223,1);
                outline: none;
            }

    .customf-inline-inputs {
        display: flex;
        justify-content: space-between;
        gap: 0%;
    }

        .customf-inline-inputs input[type="number"], .customf-inline-inputs input[type="datetime-local"] {
            flex: 1;
            width: 48%;
            display: inline-block;
            margin-right: 4%;
        }

    .empty-placeholder {
        text-align: center;
        padding: 30px 20px;
        color: #666;
        font-size: 16px;
        background: #fafafa;
        border-radius: 12px;
        box-shadow: inset 0 0 10px rgba(0,0,0,0.03);
    }

        .empty-placeholder i {
            font-size: 32px;
            color: #ccc;
        }

    .customf-button-group {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

    .customf-btn {
        color: #fff;
        font-size: 16px;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: background .1s ease;
    }

    /* Modal içindeki buton renkleri */
    #customf-filter-modal .customf-filter-btn {
        background: linear-gradient(135deg,#cfd8e3,#64748b) !important;
    }

        #customf-filter-modal .customf-filter-btn:hover {
            background: linear-gradient(135deg,#64748b,#cfd8e3) !important;
        }

    #customf-filter-modal .customf-clear-btn {
        color: #111 !important;
        background: linear-gradient(135deg,#ffffff,#cfd8e3) !important;
    }

        #customf-filter-modal .customf-clear-btn:hover {
            background: linear-gradient(135deg,#cfd8e3,#ffffff) !important;
        }

    /* Select2 (modal içinde) */
    #customf-filter-modal .select2-container--default .select2-selection--multiple {
        background: #fff !important;
        border: 1px solid #ccd2da !important;
        border-radius: 10px !important;
    }

        #customf-filter-modal .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background: #eef2f7 !important;
            color: #334155 !important;
            border: none !important;
        }

    #customf-filter-modal .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background: #e6efff !important;
        color: #1f2937 !important;
        border-radius: 6px;
    }

    #customf-filter-modal .select2-container--default .select2-results__option[aria-selected="true"] {
        background: #f3f6fb !important;
        color: #1f2937 !important;
    }

    #customf-filter-modal .select2-container--default .select2-dropdown {
        border: 1px solid #ccd2da;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0,0,0,.08);
    }

    #customf-filter-modal .select2-container--default .select2-search--dropdown .select2-search__field {
        border: 1px solid #ccd2da;
        border-radius: 8px;
    }

    /* ========= İSTATİSTİK KARTI ========= */
    .stats-card {
        border: 1px solid var(--lib-300);
        border-radius: 16px;
    }

    .stats-title {
        color: var(--lib-900);
        font-weight: 700;
    }

    /* ========= Detay sütunu & Buton ========= */
    #memberTable thead th:nth-child(6), #memberTable tbody td:nth-child(6) {
        text-align: left !important;
    }

    #memberTable td:nth-child(6) a.btn-info, #memberTable a.btn-detail-pill {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        border-radius: 9999px !important;
        background: #fff !important;
        color: #334155 !important;
        border: 1.5px solid #cbd5e1 !important;
        box-shadow: 0 4px 10px rgba(0,0,0,.05) !important;
        font-weight: 700 !important;
        letter-spacing: .2px;
        padding: 6px 12px !important;
        transition: all .15s ease !important;
    }

        #memberTable td:nth-child(6) a.btn-info:hover, #memberTable a.btn-detail-pill:hover {
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 10px 22px rgba(11,18,32,.28) !important;
            transform: translateY(-1px);
        }

    /* ========= Modern arama toolbar'ı ========= */
    .search-toolbar {
        display: flex;
        gap: 12px;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;
        margin-bottom: 22px;
    }

    .smart-select .select2-selection {
        min-height: 48px !important;
        border-radius: 12px !important;
        border: 1px solid #ced4da !important;
        display: flex;
        align-items: center;
        padding: 6px 10px;
    }

    .smart-select .select2-selection__rendered {
        line-height: 34px !important;
        font-weight: 600;
    }

    .smart-input {
        position: relative;
        min-width: 320px;
        flex: 1;
        max-width: 560px;
    }

        .smart-input input {
            width: 100%;
            height: 48px;
            border-radius: 12px;
            border: 1px solid #ced4da;
            padding: 0 44px 0 42px;
            font-size: 16px;
            outline: none;
            transition: border .12s ease,box-shadow .12s ease;
        }

        .smart-input i {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            opacity: .65;
        }

        .smart-input .clear {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            width: 34px;
            height: 34px;
            border: 0;
            border-radius: 8px;
            background: #f3f4f6;
        }

        .smart-input input:focus {
            border-color: var(--lib-900);
            box-shadow: 0 0 0 3px rgba(11,18,32,.12);
        }
    /* ===== Üye Listesi (memberTable) — koyu mavi sayfalama ===== */

    /* Standart DataTables (a.paginate_button) */
    #memberTable_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        #memberTable_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(11,18,32,.12) !important;
            border-color: rgba(11,18,32,.25) !important;
            color: #0b1220 !important;
            box-shadow: 0 2px 8px rgba(11,18,32,.15);
        }

        #memberTable_wrapper .dataTables_paginate .paginate_button.current,
        #memberTable_wrapper .dataTables_paginate .paginate_button.current:hover,
        #memberTable_wrapper .dataTables_paginate .paginate_button.current:focus,
        #memberTable_wrapper .dataTables_paginate .paginate_button.current:active {
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(11,18,32,.25) !important;
        }

            #memberTable_wrapper .dataTables_paginate .paginate_button.current *,
            #memberTable_wrapper .dataTables_paginate .paginate_button.current > * {
                color: #fff !important;
            }

    /* Bootstrap’lı DataTables (ul.pagination > li.page-item > a.page-link) */
    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link {
        border-radius: 8px !important;
        border-color: transparent !important;
        background: transparent !important;
        color: inherit !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
    }

        #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:hover {
            background: rgba(11,18,32,.12) !important;
            border-color: rgba(11,18,32,.25) !important;
            color: #0b1220 !important;
            box-shadow: 0 2px 8px rgba(11,18,32,.15);
        }

    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link,
    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:hover,
    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:focus {
        background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
        color: #fff !important;
        border-color: transparent !important;
        box-shadow: 0 8px 18px rgba(11,18,32,.25) !important;
    }

    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item.disabled > a.page-link {
        background: transparent !important;
        border-color: transparent !important;
        color: #999 !important;
        box-shadow: none !important;
    }

    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:focus {
        outline: none !important;
        box-shadow: none !important;
    }
    /* aktif olmayan tıklamada metin */
    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:active {
        color: #0b1220 !important;
    }

    #memberTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:active {
        color: #fff !important;
    }
    /* Üyeler menü ikonu sağda + yumuşak pulse */
    .sidebar-link.member-right {
        display: flex;
        align-items: center;
    }

        .sidebar-link.member-right i.mdi.mdi-account-multiple {
            order: 2; /* ikonu sağa al */
            margin-left: 8px;
            margin-right: 0;
            color: #0b1220; /* istersen #0b1220 / #7A85C1 yap */
            text-shadow: 0 0 6px rgba(11,18,32,.25);
            transition: transform .35s cubic-bezier(.2,.7,.2,1);
            animation: memberPulse 2.6s ease-in-out infinite;
        }

        .sidebar-link.member-right .hide-menu {
            order: 1; /* yazı sola */
        }
    @@keyframes memberPulse {
        0%,100%

    {
        transform: translateY(0) scale(1);
        filter: drop-shadow(0 0 0 rgba(11,18,32,0));
    }

    50% {
        transform: translateY(-1px) scale(1.06);
        filter: drop-shadow(0 0 6px rgba(11,18,32,.35));
    }

    }
</style>


<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12 d-flex justify-content-between align-items-center flex-wrap">
            <h4 class="card-title mb-0">👤 Üye Listesi</h4>
            <a class="btn btn-success btn-rounded waves-effect waves-light" asp-action="Create">
                <i class="fa fa-plus mr-1"></i> Yeni Üye Ekle
            </a>
        </div>
    </div>

    <!-- Modern arama toolbar'ı -->
    <div class="search-toolbar">
        <div class="smart-select">
            <select id="memberFilterColumn">
                <option value="all" selected>🔍 Genel Arama</option>
                <option value="1">👤 İsim</option>
                <option value="2">📧 Email</option>
                <option value="3">📘 Üye Tipi</option>
                <option value="4">📅 Üyelik Tarihi</option>
            </select>
        </div>

        <div class="smart-input">
            <i class="fas fa-search"></i>
            <input type="text" id="memberFilterValue" placeholder="Üye ara…">
            <button type="button" id="clearMemberSearch" class="clear" title="Temizle">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <!-- Üye Tablosu -->
    <div class="card dt-elevated">
        <div class="card-body">
            <div class="table-responsive dt-float">
                <table id="memberTable" class="table table-bordered table-hover table-striped dt-pretty">
                    <thead class="bg-info text-white">
                        <tr>
                            <th>ID</th>
                            <th>İsim</th>
                            <th>Email</th>
                            <th>Üye Tipi</th>
                            <th>Üyelik Tarihi</th>
                            <th>Detay</th>
                            <th class="text-center">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var member in Model)
                        {
                            <!-- KAYIT TARİHİNİ DATA ATRİBÜTE KOY -->
                            <!-- CreatedAt yoksa JoinDate / RegisterDate kullanın -->
                            <tr data-joined="@(member.JoinedAt.ToString("yyyy-MM-dd"))">
                                <td>@member.MemberId</td>
                                <td>@member.Name</td>
                                <td>@member.Email</td>
                                <td>@member.MemberType</td>
                                <td data-order="@member.JoinedAt.ToString("O")">
                                           @member.JoinedAt.ToString("dd.MM.yyyy")
                                    
                                </td>

                                <!-- ÖNCEKİ class="text-end" KALDIRILDI → SOLA HİZALI -->
                                <td class="text-left align-middle">
                                    <a asp-controller="Member"
                                       asp-action="Details"
                                       asp-route-id="@member.MemberId"
                                       class="btn btn-sm btn-info btn-detail-pill">
                                        <i class="fas fa-info-circle mr-1"></i> Detay
                                    </a>
                                </td>

                                <td class="text-center">
                                    <a asp-action="Update" asp-route-id="@member.MemberId"
                                       class="btn btn-warning btn-sm btn-rounded waves-effect waves-light mr-1">
                                        <i class="fa fa-edit"></i> Güncelle
                                    </a>
                                    <button onclick="deleteMember(@member.MemberId)"
                                            class="btn btn-danger btn-sm btn-rounded waves-effect waves-light">
                                        <i class="fa fa-trash"></i> Sil
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>

    <!-- 📊 Üye İstatistikleri (Kitap sayfasındaki kartın benzeri) -->
    <div class="card stats-card mt-3">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="stats-title mb-0">Üye İstatistikleri</h5>
                <small class="text-muted">Tablodaki görünür kayıtlara göre</small>
            </div>
            <div class="row">
                <div class="col-lg-4 mb-3"><canvas id="memStatTypes" height="160"></canvas></div>
                <div class="col-lg-8"><canvas id="memStatByMonth" height="160"></canvas></div>
            </div>
        </div>
    </div>
</div>

<!-- 🔍 Filtreleme Modalı (mevcut altyapın korunuyor) -->
<div id="customf-filter-modal" class="customf-modal">
    <div class="customf-modal-content">
        <div class="customf-modal-header">
            <div class="customf-modal-title">
                <i class="fas fa-filter"></i>
                <h5>Filtreleme Seçenekleri</h5>
            </div>
            <span class="customf-close" title="Kapat"><i class="fas fa-times"></i></span>
        </div>
        <div class="customf-modal-dropdown">
            <div class="customf-input-group">
                <label for="columnSelector">Filtrelenecek Sütunlar</label>
                <select id="columnSelector" class="select2-column-selector" style="width: 100%;" multiple></select>
            </div>
        </div>
        <div class="customf-modal-body">
            <form id="customf-dynamic-filter-form"></form>
        </div>
        <div class="customf-modal-footer">
            <div class="customf-button-group">
                <button id="customf-clear-filter" class="customf-btn customf-clear-btn">Temizle</button>
                <button id="customf-apply-filter" class="customf-btn customf-filter-btn">Filtrele</button>
            </div>
        </div>
    </div>
</div>

<form id="tokenForm">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        let previousFilterValues = {};
        let selectedColumns = [];
        let columnTypesCache = {};
        let parsedDatesCache = [];

        $(document).ready(function () {
            const table = $('#memberTable').DataTable({
                responsive: true,
                autoWidth: false,
                lengthChange: true,
                deferRender: true,
                order: [],
                language: { url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json" },
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tümü"]],
                pageLength: 10,
                paging: true,
                buttons: [
                    { extend: "copy", text: '<i class="fas fa-copy"></i>', titleAttr: "Kopyala", className: "btn-copy" },
                    {
                        text: '<i class="fas fa-filter"></i> Filtrele',
                        titleAttr: "Filtreleme seçeneklerini aç",
                        className: "customf-filter-button",
                        action: function () {
                            populateColumnSelector("memberTable");
                            generateCustomfFilterForm("memberTable");
                            $('#customf-filter-modal').show();
                            activateSelect2();
                        }
                    }
                ],
                dom: 'Bfrtip'
            });

            // Üst küçük arama kutusu
            $('#memberFilterValue').on('input', function () {
                var colIndex = $('#memberFilterColumn').val();
                var searchTerm = $(this).val().trim();
                table.search('').columns().search('');
                if (searchTerm.length > 0) {
                    if (colIndex === "all") table.search(searchTerm).draw();
                    else table.column(parseInt(colIndex)).search(searchTerm).draw();
                } else {
                    table.draw();
                }
            });
            $('#memberFilterColumn').on('change', function () { $('#memberFilterValue').trigger('input'); });
                          // Sütun seçimini select2 ile modernleştir
        $('#memberFilterColumn').select2({
          minimumResultsForSearch: Infinity,
          width: '200px',
          dropdownAutoWidth: true
        });


        // Temizle butonu
        $('#clearMemberSearch').on('click', function(){
          $('#memberFilterValue').val('');
          table.search('').columns().search('').draw();
        });
            cacheColumnDataAndTypes("memberTable");
        });

        function stripHtml(x) {
            const div = document.createElement('div');
            div.innerHTML = String(x ?? '');
            return (div.textContent || '').replace(/\s+/g, ' ').replace(/\u00A0/g, ' ').trim();
        }
        function cellToText(cell) {
            if (cell == null) return '';
            if (cell instanceof Date && !isNaN(cell)) return cell.toISOString();
            if (typeof cell === 'object') {
                if ('value' in cell) return cellToText(cell.value);
                if ('text' in cell) return cellToText(cell.text);
                if ('name' in cell) return cellToText(cell.name);
                if ('title' in cell) return cellToText(cell.title);
                if ('html' in cell) return stripHtml(cell.html);
                return stripHtml(cell);
            }
            return stripHtml(cell);
        }
        function normTR(s){
          if(s==null) return '';
          let t=s.toString().normalize('NFKD').replace(/[\u0300-\u036f]/g,'');
          t=t.replace(/İ/g,'I').replace(/ı/g,'i');
          return t.toLocaleLowerCase('tr');
        }

        function activateSelect2() {
            if ($('#columnSelector').data('select2')) $('#columnSelector').select2('destroy');
            if ($('#columnSelector option[value="select-all-option"]').length === 0) {
                $('#columnSelector').prepend('<option value="select-all-option">Tümünü Seç</option>');
            }
            $('#columnSelector').select2({
                placeholder: "Filtrelenecek sütunları seçin...",
                width: '100%',
                multiple: true,
                dropdownParent: $('#customf-filter-modal .customf-modal-content'),
                templateResult: function (data) {
                    if (data.id === 'select-all-option') return $('<span><i class="fas fa-check-double"></i> Tümünü Seç</span>');
                    return data.text;
                },
                templateSelection: function (data) {
                    if (data.id === 'select-all-option') {
                        const total = $('#columnSelector option').not('[value="select-all-option"]').length;
                        const current = $('#columnSelector').val() ? $('#columnSelector').val().length : 0;
                        return current === total ? `Tümü Seçili (${total})` : `(${current}/${total}) Sütun Seçili`;
                    }
                    return data.text;
                }
            });
            $('#columnSelector').on('select2:select', function (e) {
                if (e.params.data.id === 'select-all-option') {
                    const $s = $(this);
                    const all = $s.find('option').not('[value="select-all-option"]').map(function () { return $(this).val(); }).get();
                    $s.val(all).trigger('change'); $s.select2('close');
                }
            });
            $('#columnSelector').on('select2:unselect', function (e) {
                if (e.params.data.id === 'select-all-option') $(this).val(null).trigger('change');
            });
        }

        function populateColumnSelector(tableId) {
            const table = $(`#${tableId}`).DataTable();
            const columns = table.columns().header().toArray();
            const selector = $('#columnSelector');
            selector.empty();
            columns.forEach((col, index) => {
                const colName = $(col).text().trim();
                if (colName && colName !== "İşlemler") {
                    const selectedAttr = previousFilterValues.hasOwnProperty(index) ? 'selected' : '';
                    selector.append(`<option value="${index}" ${selectedAttr}>${colName}</option>`);
                }
            });
            selector.trigger('change.select2');
            const total = $('#columnSelector option').not('[value="select-all-option"]').length;
            const current = Object.keys(previousFilterValues).length;
            if (current > 0 && current === total) {
                selector.find('option[value="select-all-option"]').prop('selected', true);
                selector.trigger('change.select2');
            }
        }

        function generateCustomfFilterForm(tableId) {
            try {
                const table = $(`#${tableId}`).DataTable();
                const columns = table.columns().header().toArray();
                const selectedIndexes = $('#columnSelector').val()?.map(Number) || [];
                let formHtml = "";
                selectedIndexes.forEach(index => {
                    try {
                        const col = columns[index];
                        const colName = $(col).text().trim();
                        if (!colName || colName === "İşlemler") return;

                        const columnType = columnTypesCache[index] || 'text';
                        const prev = previousFilterValues[index] || {};

                        formHtml += `<div class="customf-input-group"><label>${colName}</label>`;
                        if (columnType === 'date') {
                            const startVal = (prev['date'] && prev['date'].start) ? prev['date'].start : '';
                            const endVal = (prev['date'] && prev['date'].end) ? prev['date'].end : '';
                            formHtml += `<div class="customf-inline-inputs">`;
                            formHtml += `<input type="datetime-local" class="filter-input" data-type="date-start" data-index="${index}" value="${startVal}">`;
                            formHtml += `<input type="datetime-local" class="filter-input" data-type="date-end" data-index="${index}" value="${endVal}">`;
                            formHtml += `</div>`;
                        } else if (columnType === 'number') {
                            const min = (prev['range'] && !isNaN(prev['range'][0])) ? prev['range'][0] : '';
                            const max = (prev['range'] && !isNaN(prev['range'][1])) ? prev['range'][1] : '';
                            formHtml += `<div class="customf-inline-inputs">`;
                            formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Min" value="${min}">`;
                            formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Max" value="${max}">`;
                            formHtml += `</div>`;
                        } else {
                            const allDataForColumn = table.column(index).data().toArray();
                            const sampleForSelect = allDataForColumn.slice(0, 50).map(cellToText);
                            const uniqueValues = [...new Set(sampleForSelect)];
                            const useSelect = uniqueValues.length > 0 && uniqueValues.length <= 10;

                            if (useSelect) {
                                formHtml += `<select class="filter-input" data-type="select" data-index="${index}">`;
                                formHtml += `<option value="">Tümü</option>`;
                                uniqueValues.forEach(val => {
                                    const selected = (prev['select'] === val) ? 'selected' : '';
                                    formHtml += `<option value="${val}" ${selected}>${val}</option>`;
                                });
                                formHtml += `</select>`;
                            } else {
                                const val = prev['text'] || '';
                                formHtml += `<input type="text" class="filter-input" data-type="text" data-index="${index}" placeholder="Metin giriniz" value="${val}">`;
                            }
                        }
                        formHtml += `</div>`;
                    } catch (e) {
                        console.error(`Sütun işleme hatası (index ${index}):`, e);
                    }
                });
                $('#customf-dynamic-filter-form').html(formHtml || getEmptyPlaceholder());
            } catch (e) {
                console.error("Filtre formu oluşturma hatası:", e);
                $('#customf-dynamic-filter-form').html('<div class="alert alert-danger">Filtre oluşturulurken hata oluştu</div>');
            }
        }

        function getEmptyPlaceholder() {
            return `
                <div class="empty-placeholder">
                    <i class="fas fa-sliders-h"></i><br>
                    <b>Filtrelemek istediğiniz sütunları seçin.</b>
                    <div style="font-size:13px; margin-top: 6px;">Yukarıdaki listeden bir veya daha fazla sütun seçin.</div>
                </div>`;
        }

        $('#customf-clear-filter').on('click', function (e) {
            e.preventDefault();
            $('#columnSelector').val(null).trigger('change');
            previousFilterValues = {};
            generateCustomfFilterForm("memberTable");
            updateFilterBadge();
            $.fn.dataTable.ext.search = [];
            $('#memberTable').DataTable().draw();
        });

        $(document).on('change', '#columnSelector', function () {
            setTimeout(() => { generateCustomfFilterForm("memberTable"); }, 100);
        });

        $('#customf-apply-filter').on('click', function (e) {
            e.preventDefault();
            try {
                const table = $('#memberTable').DataTable();
                selectedColumns = $('#columnSelector').val()?.map(Number) || [];

                const currentActiveFilters = {};
                $('.filter-input').each(function () {
                    const type = $(this).data('type');
                    const index = parseInt($(this).data('index'));
                    const value = $(this).val().trim();

                    if (value) {
                        if (!currentActiveFilters[index]) currentActiveFilters[index] = {};
                        if (type === 'range') {
                            const inputs = $(`input[data-type="range"][data-index="${index}"]`);
                            currentActiveFilters[index][type] = [
                                parseFloat(inputs.eq(0).val().replace(',', '.')) || -Infinity,
                                parseFloat(inputs.eq(1).val().replace(',', '.')) || Infinity
                            ];
                        } else if (type === 'date-start' || type === 'date-end') {
                            if (!currentActiveFilters[index]['date']) currentActiveFilters[index]['date'] = { start: null, end: null };
                            if (type === 'date-start') currentActiveFilters[index]['date'].start = value;
                            if (type === 'date-end') currentActiveFilters[index]['date'].end = value;
                        } else {
                            currentActiveFilters[index][type] = value;
                        }
                    }
                });

                previousFilterValues = {};
                for (const index in currentActiveFilters) {
                    if (currentActiveFilters.hasOwnProperty(index)) previousFilterValues[index] = currentActiveFilters[index];
                }

                $.fn.dataTable.ext.search = [];
                $.fn.dataTable.ext.search.push(function (settings, rowData, dataIndex) {
                    let pass = true;

                    const cleanedRowData = {};
                    selectedColumns.forEach(idx => {
                        if (columnTypesCache[idx] !== 'ignored') {
                            const cell = rowData[idx];
                            cleanedRowData[idx] = cellToText(cell);
                        }
                    });

                    for (const index in previousFilterValues) {
                        if (!previousFilterValues.hasOwnProperty(index)) continue;
                        const filtersForColumn = previousFilterValues[index];
                        const colIndex = parseInt(index);
                        const columnType = columnTypesCache[colIndex];

                        switch (columnType) {
                            case 'date':
                                const dateFilters = filtersForColumn['date'];
                                if (dateFilters) {
                                    const cellDate = parsedDatesCache[dataIndex]?.[colIndex];
                                    const filterStartDate = dateFilters.start ? new Date(dateFilters.start) : null;
                                    const filterEndDate = dateFilters.end ? new Date(dateFilters.end) : null;

                                    if (!cellDate) {
                                        if (filterStartDate || filterEndDate) pass = false;
                                        break;
                                    }
                                    if (filterStartDate && cellDate) {
                                        if (cellDate.getTime() < filterStartDate.getTime()) pass = false;
                                    }
                                    if (filterEndDate && cellDate && pass) {
                                        if (cellDate.getTime() > filterEndDate.getTime()) pass = false;
                                    }
                                }
                                break;
                            case 'number':
                                const rangeFilters = filtersForColumn['range'];
                                if (rangeFilters) {
                                    const [min, max] = rangeFilters;
                                    const num = parseFloat(cleanedRowData[colIndex]?.replace(',', '.')) || 0;
                                    if (num < min || num > max) pass = false;
                                }
                                break;
                            case 'text':
                                const textFilter = filtersForColumn['text'];
                                if (textFilter && !normTR(cleanedRowData[colIndex]).includes(normTR(textFilter))) pass = false;
                                break;
                            case 'select':
                                const selectFilter = filtersForColumn['select'];
                                if (selectFilter) {
                                    const cellVal = normTR(cleanedRowData[colIndex] || '');
                                    const filterVal = normTR(selectFilter || '');
                                    if (cellVal !== filterVal) pass = false;
                                }
                                break;
                        }
                        if (!pass) break;
                    }
                    return pass;
                });

                updateFilterBadge();
                $('#memberTable').DataTable().search('').columns().search('').draw();
                $('#customf-filter-modal').hide();
            } catch (e) {
                console.error("Filtre uygulama hatası:", e);
            }
        });

        function isValidDate(val) {
            if (val instanceof Date && !isNaN(val)) return true;
            if (val == null || val === '') return false;
            if (typeof val !== 'string') val = cellToText(val);
            if (/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)) return !isNaN(new Date(val));
            const aspMatch = String(val).match(/\/Date\((\d+)\)\//);
            if (aspMatch) return !isNaN(new Date(parseInt(aspMatch[1], 10)));
            const trPatterns = [
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/,
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/
            ];
            for (const pattern of trPatterns) if (pattern.test(val)) return true;
            return false;
        }
  

        function parseDate(val) {
            if (val instanceof Date && !isNaN(val)) return val;
            if (val == null) return null;
            if (typeof val !== 'string') val = cellToText(val);
            if (!val) return null;
            if (/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)) {
                const d = new Date(val); return isNaN(d) ? null : d;
            }
            const aspMatch = val.match(/\/Date\((\d+)\)\//);
            if (aspMatch) return new Date(parseInt(aspMatch[1], 10));
            const trFormats = [
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/, fn: m => new Date(+m[3], +m[2]-1, +m[1], +m[4], +m[5], +m[6]) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,          fn: m => new Date(+m[3], +m[2]-1, +m[1], +m[4], +m[5]) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/,                              fn: m => new Date(+m[3], +m[2]-1, +m[1]) }
            ];
            for (const { regex, fn } of trFormats) {
                const match = val.match(regex);
                if (match) { const d = fn(match); return isNaN(d) ? null : d; }
            }
            return null;
        }

        function cacheColumnDataAndTypes(tableId) {
            const table = $(`#${tableId}`).DataTable();
            columnTypesCache = {};
            parsedDatesCache = [];
            const colCount = table.columns().header().toArray().length;

            table.columns().every(function (i) {
                const name = $(this.header()).text().trim().toLowerCase();
                if (name.includes('tarih') || name.includes('date')) columnTypesCache[i] = 'date';
            });

            for (let i = 0; i < colCount; i++) {
                if (columnTypesCache[i]) continue;
                let hasDataOrderDate = false;
                $(table.column(i).nodes()).each(function () {
                    const $td = $(this);
                    let v = $td.attr('data-order') || $td.data('order');
                    if (!v) v = $td.find('[data-order]').attr('data-order');
                    if (v && isValidDate(v)) { hasDataOrderDate = true; return false; }
                });
                if (hasDataOrderDate) { columnTypesCache[i] = 'date'; continue; }

                const isVisible = table.column(i).visible();
                const sample = table.column(i).data().toArray().slice(0, 100).map(cellToText);
                const looksIso = sample.length && sample.every(v => !v || /^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(v));
                if (!isVisible && looksIso) columnTypesCache[i] = 'date';
            }

            for (let i = 0; i < colCount; i++) {
                if (columnTypesCache[i]) continue;
                let dateCount = 0, numberCount = 0, total = 0;
                const uniq = new Set();
                table.column(i).data().each(function (cell) {
                    const txt = cellToText(cell);
                    if (!txt) return;
                    total++;
                    uniq.add(txt);
                    if (isValidDate(txt)) dateCount++;
                    else if (!isNaN(parseFloat(txt.replace(',', '.')))) numberCount++;
                });
                if (dateCount > total * 0.6) columnTypesCache[i] = 'date';
                else if (numberCount > total * 0.75) columnTypesCache[i] = 'number';
                else if (uniq.size > 0 && uniq.size <= 10) columnTypesCache[i] = 'select';
                else columnTypesCache[i] = 'text';
            }

            const rows = table.rows({ order: 'applied', search: 'applied' }).indexes();
            rows.each(function (rowIdx) {
                parsedDatesCache[rowIdx] = {};
                for (let i = 0; i < colCount; i++) {
                    if (columnTypesCache[i] !== 'date') continue;
                    const cellNode = table.cell(rowIdx, i).node();
                    const $td = $(cellNode);
                    let rawOrder = $td.attr('data-order') || $td.data('order');
                    if (!rawOrder) rawOrder = $td.find('[data-order]').attr('data-order');
                    let d = null;
                    if (rawOrder) d = parseDate(rawOrder);
                    if (!d) {
                        const txt = cellToText(table.cell(rowIdx, i).data());
                        d = parseDate(txt);
                    }
                    parsedDatesCache[rowIdx][i] = d || null;
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('customf-filter-modal');
            const closeBtn = document.querySelector('.customf-close');
            window.onclick = function (event) { if (event.target === modal) modal.style.display = 'none'; };
            closeBtn.onclick = function () { modal.style.display = 'none'; };
        });

        function updateFilterBadge() {
            const count = Object.values(previousFilterValues || {})
                .filter(v => v && Object.values(v).some(x => x && String(x).trim() !== '')).length;
            const $btn = $('.customf-filter-button');
            $btn.find('.filter-badge').remove();
            $btn.css({ position: 'relative', overflow: 'visible' });
            if (count > 0) {
                $btn.append(
                `<span class="filter-badge" style="
                    position:absolute; top:2px; right:2px; transform: translate(0,0);
                    min-width:18px; height:18px; padding:0 6px; border-radius:9999px;
                    display:flex;align-items:center;justify-content:center;
                    font-size:11px;font-weight:800; background:#ef4444;color:#fff;
                    line-height:1; z-index:3; box-shadow:0 6px 14px rgba(239,68,68,.35);
                ">${count}</span>`);
            }
        }

        function deleteMember(id) {
            Swal.fire({
                title: "Silmek istediğinize emin misiniz?",
                text: "Bu işlemi geri alamazsınız!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Evet, Sil!",
                cancelButtonText: "İptal"
            }).then((result) => {
                if (result.isConfirmed) {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Member/DeleteConfirmed/' + id;

                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token;

                    form.appendChild(tokenInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }
    </script>

    <!-- Chart.js ve Üye istatistikleri -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        (function(){
          const BRAND={c900:'#0b1220', c700:'#0b1220', c500:'#7A85C1', c300:'#B2B0E8'};
          let chTypes=null, chMonths=null;

          function withDT(cb){
            if ($.fn.dataTable && $.fn.dataTable.isDataTable('#memberTable')) return cb($('#memberTable').DataTable());
            const t=setInterval(function(){
              if ($.fn.dataTable && $.fn.dataTable.isDataTable('#memberTable')){
                clearInterval(t); cb($('#memberTable').DataTable());
              }
            },50);
          }

          // Satırdan tarih bulma sırası:
          // 1) <tr data-joined="YYYY-MM-DD">  2) Başlıkta tarih geçen sütun  3) Tüm hücrelerde desen arama
          function extractRowDate($tr, dt){
            // 1) data-joined
            const dj = $tr.attr('data-joined');
            if (dj){
              const d = new Date(dj); if (!isNaN(d)) return d;
            }
            // 2) başlığa göre tahminli sütun
            const headers = $(dt.columns().header());
            let idx = -1;
            headers.each(function(i){
              const t = $(this).text().trim().toLowerCase();
              if (/(tarih|date|kayıt|kayit|oluştur|olustur|eklen)/.test(t) && idx===-1) idx=i;
            });
            if (idx>=0){
              const cell = $tr.find('td').eq(idx);
              const raw = cell.attr('data-order') || cell.find('[data-order]').attr('data-order') || cell.text();
              const d = parseSmartDate(raw); if (d) return d;
            }
            // 3) fallback: satırdaki tüm hücrelerde ara
            const tds = $tr.find('td');
            for (let i=0;i<tds.length;i++){
              const cell = tds.eq(i);
              const raw = cell.attr('data-order') || cell.find('[data-order]').attr('data-order') || cell.text();
              const d = parseSmartDate(raw); if (d) return d;
            }
            return null;
          }

          function parseSmartDate(val){
            if (!val) return null;
            if (val instanceof Date && !isNaN(val)) return val;
            const s = String(val).trim();
            // ISO / yyyy-mm-dd
            if (/^\d{4}-\d{2}-\d{2}/.test(s)){ const d=new Date(s); return isNaN(d)?null:d; }
            // ASP.NET ticks
            const m=s.match(/\/Date\((\d+)\)\//); if (m){ const d=new Date(parseInt(m[1],10)); return isNaN(d)?null:d; }
            // TR formatları
            const tr = [
              { r:/^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/, f:m=>new Date(+m[3],+m[2]-1,+m[1],+m[4],+m[5],+m[6]) },
              { r:/^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,          f:m=>new Date(+m[3],+m[2]-1,+m[1],+m[4],+m[5]) },
              { r:/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/,                              f:m=>new Date(+m[3],+m[2]-1,+m[1]) }
            ];
            for (const {r,f} of tr){ const m=s.match(r); if (m){ const d=f(m); return isNaN(d)?null:d; } }
            return null;
          }

          function last12Months(){
            const arr=[]; const t=new Date();
            for(let i=11;i>=0;i--) arr.push(new Date(t.getFullYear(), t.getMonth()-i, 1));
            return arr;
          }
          const mKey = d => d.getFullYear()+'-'+String(d.getMonth()+1).padStart(2,'0');
          const mLbl = d => d.toLocaleDateString('tr-TR',{month:'2-digit',year:'numeric'});

          function renderStats(dt){
            const nodes = dt.rows({ search:'applied' }).nodes().to$();

            // Donut: Üye Tipi
                // Donut: Üye Tipi  (RENKLERİ AYRIK YAPTIK + SIRAYI SABİTLEDİK)
        const typeMap = {};
        nodes.each(function () {
          const t = $(this).find('td').eq(3).text().trim();
          if (t) typeMap[t] = (typeMap[t] || 0) + 1;
        });

        const el1 = document.getElementById('memStatTypes');
        if (el1) {
          // Sırayı sabitle: alfabetik → renkler her draw'da kaymasın
          const labels = Object.keys(typeMap).sort();
          const vals = labels.map(l => typeMap[l]);

          // Kitap sayfası paleti: yeşil, sarı, kırmızı + net yedekler
          const DONUT_COLORS = [
            '#16a34a', // yeşil
            '#f59e0b', // sarı
            '#ef4444', // kırmızı
            '#0ea5e9', // mavi
            '#8b5cf6', // mor
            '#14b8a6', // teal
            '#f43f5e', // rose
            '#a3e635'  // lime
          ];
          const colors = labels.map((_, i) => DONUT_COLORS[i % DONUT_COLORS.length]);

          const data = {
            labels,
            datasets: [{
              data: vals,
              backgroundColor: colors,
              borderColor: '#fff',   // dilimler net ayrılsın
              borderWidth: 2,
              hoverOffset: 6
            }]
          };

          if (chTypes) { chTypes.data = data; chTypes.update(); }
          else {
            chTypes = new Chart(el1, {
              type: 'doughnut',
              data,
              options: {
                cutout: '62%',
                plugins: {
                  legend: {
                    position: 'bottom',
                    labels: { usePointStyle: true, boxWidth: 10 }
                  }
                }
              }
            });
          }
        }


            // Line: Son 12 ayda yeni üye
            const months = last12Months();
            const buckets = {}; months.forEach(m=>buckets[mKey(m)]=0);

            nodes.each(function(){
              const d = extractRowDate($(this), dt);
              if (!d) return;
              const k = mKey(new Date(d.getFullYear(), d.getMonth(), 1));
              if (k in buckets) buckets[k] += 1;
            });

            const labels = months.map(m=>mLbl(m));
            const values = months.map(m=>buckets[mKey(m)]||0);

            const el2=document.getElementById('memStatByMonth');
            if (el2){
              const data={labels, datasets:[{
                label:'Yeni Üye',
                data: values,
                fill:true,
                borderColor: BRAND.c700,
                backgroundColor: BRAND.c300,
                tension:.25, pointRadius:3
              }]};
              const opts={plugins:{legend:{display:false}}, scales:{x:{grid:{display:false}}, y:{beginAtZero:true, grid:{color:'rgba(0,0,0,.06)'}}}};
              if (chMonths){ chMonths.data=data; chMonths.update(); }
              else{ chMonths=new Chart(el2,{type:'line',data,options:opts}); }
            }
          }

          withDT(function(dt){
            renderStats(dt);
            $('#memberTable').on('draw.dt', function(){ renderStats(dt); });
          });
        })();
    </script>
    <script>
        (function memberIconRight(){
      // Sol menüde "Üyeler" linkini bulun: içinde account-multiple ikonu olan ilk link
      var $link = $('a.sidebar-link').has('i.mdi.mdi-account-multiple').first();
      if(!$link.length) return;

      // Yanlış/eksik sınıf varsa düzelt (güvenlik amaçlı)
      var $i = $link.find('i.mdi').first();
      if(!$i.length){
        $link.prepend('<i class="mdi mdi-account-multiple" aria-hidden="true"></i>');
      }else{
        $i.attr('class','mdi mdi-account-multiple');
      }

      // Sağ tarafa alma + animasyon sınıfı
      $link.addClass('member-right');
        })();
        </script>
}
