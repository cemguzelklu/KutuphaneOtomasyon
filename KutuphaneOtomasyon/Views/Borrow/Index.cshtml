@model List<KutuphaneOtomasyon.Models.Borrow>
@{
    ViewData["Title"] = "Ödünç Liste";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    /* ========= PALET (Kitap sayfasıyla aynı) ========= */
    :root {
        --lib-900: #1A2A80; /* ana */
        --lib-700: #3B38A0; /* hover */
        --lib-500: #7A85C1;
        --lib-300: #B2B0E8;
        --ok: #16a34a;
        --ok-bg: rgba(22,163,74,.08);
        --warn: #f59e0b;
        --warn-bg: rgba(245,158,11,.10);
        --bad: #ef4444;
        --bad-bg: rgba(239,68,68,.10);
        --dt-hover-bg: rgba(78,115,223,.12);
        --dt-hover-border: rgba(78,115,223,.25);
        --dt-hover-fg: #224abe;
        --dt-hover-shadow: rgba(78,115,223,.15);
    }

    /* ========= GENEL MODAL (filtre) ========= */
    .customf-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        inset: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,.4);
        backdrop-filter: blur(2px);
        overflow: hidden;
    }

    .customf-modal-content {
        background: #fff;
        border-radius: 16px;
        width: 90%;
        max-width: 480px;
        margin: 5% auto;
        box-shadow: 0 25px 50px rgba(0,0,0,.1);
        font-family: 'Segoe UI',sans-serif;
        display: flex;
        flex-direction: column;
        max-height: 90vh;
        overflow: hidden;
        padding: 0;
    }

    .customf-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 32px 12px;
        border-bottom: 1px solid #eee;
        background: #fff;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .customf-modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .customf-modal-title i {
            font-size: 20px;
            color: #52616B;
            background: #fafafa;
            padding: 8px;
            border-radius: 50%;
            box-shadow: 0 0 4px rgba(0,0,0,.1);
        }

    .customf-modal-header h5 {
        font-size: 22px;
        margin: 0;
        font-weight: 600;
        color: #333;
    }

    .customf-modal-dropdown {
        padding: 16px 32px 30px;
        background: #fafafa;
        border-bottom: 1px solid #eee;
        position: sticky;
        top: 58px;
        z-index: 9;
    }

    .customf-modal-body {
        padding: 24px 32px;
        overflow-y: auto;
        flex: 1;
    }

    .customf-modal-footer {
        padding: 16px 32px 24px;
        border-top: 1px solid #eee;
        background: #fff;
    }

    .customf-close {
        float: right;
        font-size: 22px;
        font-weight: 600;
        color: #bbb;
        cursor: pointer;
        background: #f2f2f2;
        border-radius: 40%;
        padding: 1px 9px;
        transition: all .3s;
    }

        .customf-close:hover {
            background: #e0e0e0;
            color: #000;
        }

    /* ========= FORM ELEMANLARI ========= */
    .customf-input-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

        .customf-input-group label {
            font-weight: 500;
            margin-bottom: 6px;
            font-size: 15px;
            color: #444;
        }

        .customf-input-group input, .customf-input-group select {
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 10px;
            font-size: 15px;
            background: #fff;
            transition: all .25s;
            box-shadow: 0 1px 4px rgba(0,0,0,.05);
        }

            .customf-input-group input:focus, .customf-input-group select:focus {
                border-color: #C9D6DF;
                background: #fefefe;
                box-shadow: 0 0 0 3px rgba(201,214,223,1);
                outline: none;
            }

    .customf-inline-inputs {
        display: flex;
        justify-content: space-between;
        gap: 0%;
    }

        .customf-inline-inputs input[type="number"], .customf-inline-inputs input[type="datetime-local"] {
            flex: 1;
            width: 48%;
            display: inline-block;
            margin-right: 4%;
        }

    .empty-placeholder {
        text-align: center;
        padding: 30px 20px;
        color: #666;
        font-size: 16px;
        background: #fafafa;
        border-radius: 12px;
        box-shadow: inset 0 0 10px rgba(0,0,0,.03);
    }

        .empty-placeholder i {
            font-size: 32px;
            color: #ccc;
        }

    .customf-button-group {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

    .customf-btn {
        color: #fff;
        font-size: 16px;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: background .1s;
    }

    .customf-filter-btn {
        width: 75%;
        background: linear-gradient(135deg,#cfd8e3,#64748b);
    }

        .customf-filter-btn:hover {
            background: linear-gradient(135deg,#64748b,#cfd8e3);
        }

    .customf-clear-btn {
        color: #111;
        width: 25%;
        background: linear-gradient(135deg,#ffffff,#cfd8e3);
    }

        .customf-clear-btn:hover {
            background: linear-gradient(135deg,#cfd8e3,#ffffff);
        }

    /* ========= SELECT2 (nötr) ========= */
    .select2-container--default .select2-selection--multiple {
        min-height: 42px !important;
        height: auto !important;
        overflow-y: auto;
        max-height: 120px;
        padding-bottom: 6px;
        scrollbar-width: none;
        -ms-overflow-style: none;
        background: #fff !important;
        border-radius: 10px;
        border: 1px solid #ccc;
        padding: 6px;
        line-height: normal;
    }

        .select2-container--default .select2-selection--multiple::-webkit-scrollbar {
            display: none;
        }

        .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background: #EEF2F7 !important;
            color: #334155;
            border: none !important;
            font-weight: 600;
            padding: 10px 12px;
            font-size: 1.05em;
            margin-top: 4px;
            margin-right: 6px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

    .select2-container--default .select2-results__option {
        padding: 10px 14px;
        font-size: 15px;
        color: #333;
        background: #fff;
        transition: background .2s;
        border-bottom: 1px solid #f0f0f0;
    }

    .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background: #e6efff !important;
        color: #1f2937 !important;
        border-radius: 6px;
    }

    .select2-container--default .select2-results__option[aria-selected="true"] {
        background: #f3f6fb !important;
        color: #1f2937 !important;
    }

    .select2-container--default .select2-dropdown {
        border: 1px solid #ccd2da;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0,0,0,.08);
    }

    /* ========= HEADER DÜZENİ (kitap sayfası stili) ========= */
    .container-fluid > .row.mb-4 > .col-md-12.d-flex {
        justify-content: space-between !important;
        gap: 12px;
    }

    .container-fluid > .row.mb-4 h4.card-title {
        display: flex !important;
        align-items: center;
        gap: .6rem;
        margin: 0 !important;
        font-weight: 800;
        font-size: 1.6rem;
        letter-spacing: .2px;
        color: #111;
        position: relative;
    }

        .container-fluid > .row.mb-4 h4.card-title::after {
            content: "";
            position: absolute;
            left: 0;
            bottom: -6px;
            width: 64px;
            height: 4px;
            border-radius: 9999px;
            background: linear-gradient(90deg,#16a34a,#f59e0b,#ef4444);
        }

    .container-fluid > .row.mb-4 a.btn.btn-success {
        background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
        color: #fff !important;
        border: none !important;
        border-radius: 10px !important;
        box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
        font-weight: 600;
    }

        .container-fluid > .row.mb-4 a.btn.btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(26,42,128,.35) !important;
        }

    h4.card-title {
        color: var(--lib-900);
    }

    /* ========= BUTON GENEL ========= */
    .btn {
        transition: transform .12s, box-shadow .12s;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(0,0,0,.15);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(0,0,0,.12);
        }

    /* ========= KART & TABLO ========= */
    .dt-elevated {
        border: 0;
        border-radius: 16px;
        background: rgba(255,255,255,.86);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        box-shadow: 0 1px 2px rgba(0,0,0,.06),0 6px 16px rgba(27,31,35,.08),0 18px 40px rgba(27,31,35,.10);
        position: relative;
        transition: transform .18s, box-shadow .18s;
    }

        .dt-elevated:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,.06),0 12px 26px rgba(27,31,35,.10),0 28px 60px rgba(27,31,35,.12);
        }

        .dt-elevated::after {
            content: "";
            position: absolute;
            inset: auto 8% -14px 8%;
            height: 28px;
            background: radial-gradient(ellipse at center,rgba(0,0,0,.16) 0%, rgba(0,0,0,0) 70%);
            filter: blur(8px);
            pointer-events: none;
        }

    .dt-pretty {
        border-radius: 12px;
        overflow: hidden;
        background: rgba(255,255,255,.92);
    }

        .dt-pretty thead th {
            position: sticky;
            top: 0;
            z-index: 2;
            background: inherit !important;
            color: inherit !important;
            box-shadow: 0 1px 0 rgba(0,0,0,.06);
        }

        .dt-pretty thead.bg-info th {
            color: #fff !important;
        }

        .dt-pretty td, .dt-pretty th {
            border-color: #eef2f7 !important;
        }

        .dt-pretty tbody tr {
            transition: transform .12s, box-shadow .12s, background .12s;
        }

            .dt-pretty tbody tr:hover {
                background: #f8fbff !important;
                transform: translateY(-1px);
                box-shadow: 0 6px 14px rgba(30,41,59,.06);
            }

    .dt-float {
        transform: translateZ(0);
        perspective: 1200px;
    }

    /* ========= DATATABLES ÜST BUTONLAR ========= */
    .dataTables_wrapper .dt-buttons .btn,
    .dataTables_wrapper .dataTables_filter input {
        border-radius: 10px !important;
        border: 1px solid #e6e9f0 !important;
        box-shadow: 0 2px 8px rgba(0,0,0,.06);
    }

    .dataTables_wrapper .dt-buttons {
        display: flex;
        gap: 8px;
        overflow: visible;
    }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            position: relative;
            overflow: hidden;
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
            color: #fff !important;
            border: none !important;
            border-radius: 10px !important;
            padding: 10px 14px !important;
            font-weight: 600 !important;
            line-height: 1 !important;
            box-shadow: 0 8px 20px rgba(26,42,128,.25) !important;
            transition: transform .12s, box-shadow .12s, filter .18s;
        }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy i,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button i {
                margin-right: 6px;
            }
            /* renk sabitle (kitap sayfasıyla aynı) */
            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:focus,
            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:focus,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
                background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
                color: #fff !important;
                transform: none !important;
                box-shadow: 0 8px 20px rgba(26,42,128,.25) !important;
                filter: none !important;
                outline: none !important;
            }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy::after,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button::after {
                content: none !important;
            }

    /* ========= SAYFALAMA (AI Logs ile birebir aynı) ========= */
    #borrowTable_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        /* Hover – açık mavi (AI Logs’takiyle aynı ton) */
        #borrowTable_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(78,115,223,.12) !important;
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

        /* Seçili (current) – koyu mavi degrade + yazı beyaz (AI Logs ile aynı) */
        #borrowTable_wrapper .dataTables_paginate .paginate_button.current,
        #borrowTable_wrapper .dataTables_paginate .paginate_button.current:hover {
            background: linear-gradient(135deg, #1A2A80, #3B38A0) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
        }

        /* Disabled */
        #borrowTable_wrapper .dataTables_paginate .paginate_button.disabled,
        #borrowTable_wrapper .dataTables_paginate .paginate_button.disabled:hover {
            background: transparent !important;
            border-color: transparent !important;
            color: #999 !important;
            box-shadow: none !important;
        }

        /* Focus/Active fix */
        #borrowTable_wrapper .dataTables_paginate .paginate_button:focus {
            outline: none !important;
            box-shadow: none !important;
        }

        #borrowTable_wrapper .dataTables_paginate .paginate_button.current *,
        #borrowTable_wrapper .dataTables_paginate .paginate_button.current > * {
            color: #fff !important;
        }

        #borrowTable_wrapper .dataTables_paginate .paginate_button:active {
            color: #fff !important;
        }


    /* ========= TABLO BAŞLIK RENGİ ========= */
    #borrowTable thead.bg-info {
        background: var(--lib-900) !important;
        border-color: var(--lib-900) !important;
    }

    /* ========= CHIP / BADGE (senin mevcut görünüm korunur) ========= */
    .chip-pill {
        --bg: #f8fafc;
        --fg: #334155;
        --ring: rgba(2,6,23,.06);
        --glow: rgba(2,132,199,0);
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        font-weight: 700;
        font-size: .78rem;
        line-height: 1;
        padding: .48rem .72rem;
        border-radius: 999px;
        background: var(--bg);
        color: var(--fg);
        border: 1px solid var(--ring);
        box-shadow: 0 4px 14px var(--glow);
        transition: transform .12s, box-shadow .12s, background .12s, color .12s, border-color .12s;
        white-space: nowrap;
    }

        .chip-pill .dot {
            width: .5rem;
            height: .5rem;
            border-radius: 999px;
            display: inline-block;
            background: currentColor;
            box-shadow: 0 0 0 3px color-mix(in oklab,currentColor 20%,transparent);
        }

        .chip-pill.sm {
            width: 120px;
            height: 28px;
            padding: 0 10px;
            justify-content: center;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            box-sizing: border-box;
        }

        .chip-pill.is-overdue {
            --bg: color-mix(in oklab,#ef4444 14%, white);
            --fg: #7f1d1d;
            --ring: rgba(239,68,68,.22);
            --glow: rgba(239,68,68,.18);
        }

        .chip-pill.is-today {
            --bg: color-mix(in oklab,#f59e0b 14%, white);
            --fg: #7c2d12;
            --ring: rgba(245,158,11,.22);
            --glow: rgba(245,158,11,.16);
        }

        .chip-pill.is-left {
            --bg: color-mix(in oklab,#22c55e 14%, white);
            --fg: #166534;
            --ring: rgba(34,197,94,.22);
            --glow: rgba(34,197,94,.16);
        }

        .chip-pill.is-noduedate {
            --bg: color-mix(in oklab,#a78bfa 14%, white);
            --fg: #4c1d95;
            --ring: rgba(167,139,250,.22);
            --glow: rgba(167,139,250,.16);
        }

        .chip-pill.is-returned {
            --bg: color-mix(in oklab,#60a5fa 14%, white);
            --fg: #1e3a8a;
            --ring: rgba(59,130,246,.22);
            --glow: rgba(59,130,246,.16);
        }

    .btn-return.pill-fixed {
        height: 28px;
        min-width: 120px;
        font-size: .75rem;
        padding: 0 10px;
        gap: 4px;
        border: none;
        box-shadow: 0 6px 14px rgba(27,94,32,.25);
    }

    .btn-return.btn-success-match {
        background: linear-gradient(45deg,#43a047,#1b5e20) !important;
        color: #fff !important;
    }

    /* ========= İSTATİSTİK KARTI ========= */
    .stats-card {
        border: 1px solid var(--lib-300);
        border-radius: 16px;
    }

    .stats-title {
        color: var(--lib-900);
        font-weight: 700;
    }
    /* === ACTION PILL BUTTONS (İşlemler sütunu) === */
    .action-pill {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 14px;
        border-radius: 9999px;
        font-size: .82rem;
        font-weight: 800;
        line-height: 1;
        white-space: nowrap;
        user-select: none;
        text-decoration: none !important;
        border: 0;
        min-height: 34px;
        box-shadow: 0 8px 18px rgba(26,42,128,.18);
        transition: transform .12s ease, box-shadow .12s ease, filter .12s ease;
    }

        .action-pill i {
            font-size: .9em;
        }

    /* aktif (İade Et) */
    .action-pill--ok {
        background: linear-gradient(135deg, #43a047, #1b5e20);
        color: #fff !important;
    }

        .action-pill--ok:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(34,197,94,.35);
        }

        .action-pill--ok:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(34,197,94,.25);
        }

    /* pasif / tamamlanmış (İade Edildi) */
    .action-pill--muted {
        background: linear-gradient(135deg, #757575, #424242);
        color: #fff !important;
        cursor: default;
    }

    /* === CHIP (Kalan Gün) — overflow fix + tek satır ellipsis === */
    .chip-pill {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        padding: .48rem .72rem;
        border-radius: 9999px;
        line-height: 1;
        max-width: 100%;
    }

        .chip-pill i, .chip-pill .dot {
            flex: 0 0 auto;
        }

        .chip-pill .txt {
            display: inline-block;
            max-width: 16ch; /* metin uzun olursa kibarca kes */
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        /* küçük boy sabitleme (yükseklik + min genişlik) */
        .chip-pill.sm {
            height: 28px;
            min-width: 120px;
            padding: 0 10px;
        }

    /* Kalan Gün hücresinde taşmayı asla büyütme */
    #borrowTable td:nth-child(5) {
        width: 1%;
    }
    /* İşlemler sütunundaki pill-butonları sabit boy yap */
    .action-pill {
        width: 140px; /* sabit genişlik => ikisi de aynı */
        height: 34px; /* sabit yükseklik */
        padding: 0 12px; /* iç boşluk sabit */
        justify-content: center; /* ikon + yazı ortalı */
        white-space: nowrap;
    }

        /* metin taşarsa ellipsis */
        .action-pill .txt {
            min-width: 0; /* flex shrink için şart */
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    /* ===== Borrow pagination — koyu mavi (AI Logs ile aynı) ===== */

    /* Standart DataTables (a.paginate_button) */
    #borrowTable_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        #borrowTable_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(78,115,223,.12) !important;
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

        #borrowTable_wrapper .dataTables_paginate .paginate_button.current,
        #borrowTable_wrapper .dataTables_paginate .paginate_button.current:hover,
        #borrowTable_wrapper .dataTables_paginate .paginate_button.current:active,
        #borrowTable_wrapper .dataTables_paginate .paginate_button.current:focus {
            background: linear-gradient(135deg,#1A2A80,#3B38A0) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
        }

            #borrowTable_wrapper .dataTables_paginate .paginate_button.current *,
            #borrowTable_wrapper .dataTables_paginate .paginate_button.current > * {
                color: #fff !important;
            }

    /* Bootstrap’lı DataTables (ul.pagination > li.page-item > a.page-link) */
    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link {
        border-radius: 8px !important;
        border-color: transparent !important;
        background: transparent !important;
        color: inherit !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
    }

        #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:hover {
            background: rgba(78,115,223,.12) !important;
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link,
    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:hover,
    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:focus {
        background: linear-gradient(135deg,#1A2A80,#3B38A0) !important;
        color: #fff !important;
        border-color: transparent !important;
        box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
    }

    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item.disabled > a.page-link {
        background: transparent !important;
        border-color: transparent !important;
        color: #999 !important;
        box-shadow: none !important;
    }
    /* tıklayınca griye dönmesin */
    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:active {
        color: #224abe !important;
    }

    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:active {
        color: #fff !important;
    }
    /* focus halkasını kapat */
    #borrowTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:focus {
        outline: none !important;
        box-shadow: none !important;
    }

    /* Sol menü react ikonu (aynı) */
    .sidebar-link.ai-react-right {
        display: flex;
        align-items: center;
    }

        .sidebar-link.ai-react-right i.mdi.mdi-bookmark-check {
            order: 2;
            margin-left: 8px;
            margin-right: 0;
            color: #61dafb; /* istersen #3B38A0 yap */
            text-shadow: 0 0 8px rgba(97,218,251,.8), 0 0 16px rgba(97,218,251,.4);
            transition: transform .35s cubic-bezier(.2,.7,.2,1);
            animation: tubePulse 2.6s ease-in-out infinite;
        }

        .sidebar-link.ai-react-right .hide-menu {
            order: 1;
        }

    @@keyframes tubePulse {
        0%, 100% {
            transform: translateY(0) scale(1);
            filter: drop-shadow(0 0 0 rgba(97,218,251,.0));
        }

        50% {
            transform: translateY(-1px) scale(1.06);
            filter: drop-shadow(0 0 6px rgba(97,218,251,.6));
        }
    }
</style>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12 d-flex justify-content-between align-items-center flex-wrap">
            <h4 class="card-title mb-0">📦 Ödünç Alınan Kitaplar</h4>
            <a class="btn btn-success btn-rounded waves-effect waves-light" asp-action="Create">
                <i class="fa fa-plus mr-1"></i> Yeni Ödünç Ver
            </a>
        </div>
    </div>

    <div class="card dt-elevated">
        <div class="card-body">
            <div class="table-responsive dt-float">
                <table id="borrowTable" class="table table-bordered table-hover table-striped dt-pretty">
                    <thead class="bg-info text-white">
                        <tr>
                            <th>Üye</th>
                            <th>Kitap</th>
                            <th>Alış Tarihi</th>
                            <th>İade Tarihi</th>
                            <th>Kalan Gün</th>
                            <th class="text-center">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            var today = DateTime.Now.Date;
                            <tr>
                                <td>@item.Member.Name</td>
                                <td>@item.Book.Title</td>
                                <td data-order="@item.BorrowDate.ToString("yyyy-MM-ddTHH:mm:ss")">@item.BorrowDate.ToString("dd.MM.yyyy HH:mm")</td>
                                <td data-order="@((item.ReturnDate ?? item.DueDate)?.ToString("yyyy-MM-dd") ?? "")">
                                    @(
                                                                    item.ReturnDate.HasValue
                                                                    ? item.ReturnDate.Value.ToString("dd.MM.yyyy")
                                                                    : (item.DueDate.HasValue ? item.DueDate.Value.ToString("dd.MM.yyyy") : "—")
                                                                    )
                            </td>
                            <td>
                                @if (!item.ReturnDate.HasValue)
                                    {
                                        if (item.DueDate.HasValue)
                                        {
                                            var kalanGun = (item.DueDate.Value.Date - today).Days;
                                            if (kalanGun < 0)
                                            {
                                                <span class="chip-pill sm is-overdue">
                                                    <i class="fas fa-exclamation-triangle me-1"></i><span class="txt">@Math.Abs(kalanGun) gün gecikti</span>
                                                </span>
                                            }
                                            else if (kalanGun == 0)
                                            {
                                                <span class="chip-pill sm is-today">
                                                    <span class="dot"></span><span class="txt">Son gün</span>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="chip-pill sm is-left">
                                                    <i class="fas fa-clock me-1"></i><span class="txt">@kalanGun gün kaldı</span>
                                                </span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="chip-pill sm is-noduedate">
                                                <i class="fas fa-infinity me-1"></i><span class="txt">Teslim Yok</span>
                                            </span>
                                        }
                                    }
                                    else
                                    {
                                        var sure = (item.ReturnDate.Value.Date - item.BorrowDate.Date).Days;
                                        <span class="chip-pill sm is-returned">
                                            <i class="fas fa-check-circle me-1"></i><span class="txt">İade edildi</span>
                                        </span>
                                    }
                                </td>
                                <td class="text-center">
                                    @if (!item.ReturnDate.HasValue)
                                    {
                                        <a asp-action="Return" asp-route-id="@item.BorrowId"
                                           class="action-pill action-pill--ok waves-effect waves-light">
                                            <i class="fa fa-undo"></i> <span class="txt">İade Et</span>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="action-pill action-pill--muted">
                                            <i class="fas fa-check"></i> <span class="txt">İade Edildi</span>
                                        </span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- 📊 Ödünç İstatistikleri (Kitap sayfası tarzı) -->
    <div class="card stats-card mt-3">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="stats-title mb-0">Ödünç İstatistikleri</h5>
                <small class="text-muted">Tablodaki görünür kayıtlara göre</small>
            </div>
            <div class="row">
                <div class="col-lg-4 mb-3"><canvas id="borrowStatStatus" height="160"></canvas></div>
                <div class="col-lg-8"><canvas id="borrowStatTopBooks" height="160"></canvas></div>
            </div>
        </div>
    </div>
</div>

<!-- 🔍 Filtreleme Modalı -->
<div id="customf-filter-modal" class="customf-modal">
    <div class="customf-modal-content">
        <div class="customf-modal-header">
            <div class="customf-modal-title">
                <i class="fas fa-filter"></i>
                <h5>Filtreleme Seçenekleri</h5>
            </div>
            <span class="customf-close" title="Kapat"><i class="fas fa-times"></i></span>
        </div>

        <div class="customf-modal-dropdown">
            <div class="customf-input-group">
                <label for="columnSelector">Filtrelenecek Sütunlar</label>
                <select id="columnSelector" class="select2-column-selector" style="width:100%;" multiple></select>
            </div>
        </div>

        <div class="customf-modal-body"><form id="customf-dynamic-filter-form"></form></div>

        <div class="customf-modal-footer">
            <div class="customf-button-group">
                <button id="customf-clear-filter" class="customf-btn customf-clear-btn">Temizle</button>
                <button id="customf-apply-filter" class="customf-btn customf-filter-btn">Filtrele</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        let previousFilterValues = {};
        let selectedColumns = [];
        let columnTypesCache = {};
        let parsedDatesCache = [];
        let textCache = [];
        let canonCache = [];
        let numericCache = [];

        $(document).ready(function () {
            const table = $('#borrowTable').DataTable({
                responsive: true, autoWidth: false, lengthChange: true, deferRender: true, order: [],
                language: { url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json" },
                lengthMenu: [[10,25,50,100,-1],[10,25,50,100,"Tümü"]],
                pageLength: 10, paging: true,
                buttons: [
                    { extend:"copy", text:'<i class="fas fa-copy"></i>', titleAttr:"Kopyala", className:"btn-copy" },
                    { text:'<i class="fas fa-filter"></i> Filtrele', titleAttr:"Filtreleme seçeneklerini aç", className:"customf-filter-button",
                      action:function(){ populateColumnSelector("borrowTable"); generateCustomfFilterForm("borrowTable"); $('#customf-filter-modal').show(); activateSelect2(); } }
                ],
                dom:'Bfrtip'
            });

            cacheColumnDataAndTypes("borrowTable");

            // Modal kapatmaları
            const modal = document.getElementById('customf-filter-modal');
            const closeBtn = document.querySelector('.customf-close');
            window.onclick = function (e){ if(e.target===modal) modal.style.display='none'; };
            closeBtn.onclick = function () { modal.style.display='none'; };
        });

        /* ==== yardımcılar (kitap sayfasıyla aynı mantık) ==== */
        function stripHtml(x){const html=String(x??'');const spaced=html.replace(/>(\s*)</g,'><').replace(/></g,'>\u2009<');const div=document.createElement('div');div.innerHTML=spaced;return (div.textContent||'').replace(/\u00A0/g,' ').replace(/([a-zğüşiöç])([A-ZĞÜŞİÖÇ])/g,'$1 $2').replace(/\s+/g,' ').trim();}
        function cellToText(cell){ if(cell==null) return ''; if(cell instanceof Date && !isNaN(cell)) return cell.toISOString(); if(typeof cell==='object'){ if('value'in cell) return cellToText(cell.value); if('text'in cell) return cellToText(cell.text); if('name'in cell) return cellToText(cell.name); if('title'in cell) return cellToText(cell.title); if('html'in cell) return stripHtml(cell.html); return stripHtml(cell);} return stripHtml(cell); }
        function normTR(s){ if(s==null) return ''; let t=s.toString().normalize('NFKD').replace(/[\u0300-\u036f]/g,''); t=t.replace(/[İI]/g,'I').replace(/ı/g,'i'); return t.toLowerCase(); }
        function canon(s){ let t=cellToText(s??''); t=t.normalize('NFKD').replace(/[\u0300-\u036f]/g,''); t=normTR(t); t=t.replace(/[^a-z0-9]+/g,' ').replace(/\s+/g,' ').trim(); return t; }
        function buildTextAndCanonCaches(tableId){ const api=$('#'+tableId).DataTable(); const all=api.rows().data().toArray(); const rowCount=all.length; const colCount=api.columns().header().toArray().length; textCache=new Array(rowCount); canonCache=new Array(rowCount); for(let r=0;r<rowCount;r++){ textCache[r]=new Array(colCount); canonCache[r]=new Array(colCount); for(let c=0;c<colCount;c++){ const txt=cellToText(all[r][c]); textCache[r][c]=txt; canonCache[r][c]=canon(txt); } } }
        function isValidDate(val){ if(val instanceof Date && !isNaN(val)) return true; if(val==null||val==='') return false; if(typeof val!=='string') val=cellToText(val); if(/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)) return !isNaN(new Date(val)); const asp=String(val).match(/\/Date\((\d+)\)\//); if(asp) return !isNaN(new Date(parseInt(asp[1],10))); const tr=[/^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/, /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/, /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/]; for(const p of tr){ if(p.test(val)) return true; } return false;}
        function parseDate(val){ if(val instanceof Date && !isNaN(val)) return val; if(val==null) return null; if(typeof val!=='string') val=cellToText(val); if(!val) return null; if(/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)){const d=new Date(val); return isNaN(d)?null:d;} const asp=val.match(/\/Date\((\d+)\)\//); if(asp) return new Date(parseInt(asp[1],10)); const fmts=[{regex:/^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/,fn:m=>new Date(+m[3],+m[2]-1,+m[1],+m[4],+m[5],+m[6])},{regex:/^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,fn:m=>new Date(+m[3],+m[2]-1,+m[1],+m[4],+m[5])},{regex:/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/,fn:m=>new Date(+m[3],+m[2]-1,+m[1])}]; for(const {regex,fn} of fmts){const mt=val.match(regex); if(mt){const d=fn(mt); return isNaN(d)?null:d;}} return null;}
        function getOrderFromDom(table, r, c){ const node=table.cell(r,c).node(); if(!node) return null; let v=node.getAttribute('data-order')||$(node).data('order'); if(!v){ const inner=node.querySelector('[data-order]'); if(inner) v=inner.getAttribute('data-order')||$(inner).data('order'); } return v??null; }
        function stripSpacesLike(s){ return (s||'').replace(/[\u00A0\u202F\u2007\u2009]/g,' '); }
        function parseLocaleNumber(raw){ if(raw==null) return NaN; let t=cellToText(raw); t=stripSpacesLike(t).replace(/\s+/g,''); t=t.replace(/[%₺$€£]/g,''); t=t.replace(/\(([^)]+)\)/,'-$1'); if(/^-?\d{1,3}(\.\d{3})+(,\d+)?$/.test(t)) t=t.replace(/\./g,'').replace(',', '.'); else if(/^-?\d{1,3}(,\d{3})+(\.\d+)?$/.test(t)) t=t.replace(/,/g,''); else if(t.indexOf(',')>-1 && t.indexOf('.')===-1) t=t.replace(',', '.'); const n=Number(t); return Number.isFinite(n)?n:NaN; }
        function looksNumeric(raw){ return Number.isFinite(parseLocaleNumber(raw)); }
        function getNumericOrtho(api,r,c){ const node=api.cell(r,c).node(); let v=node?.getAttribute('data-order')||$(node).data('order')||null; if(!v){ const inner=node?.querySelector('[data-order]'); if(inner) v=inner.getAttribute('data-order')||$(inner).data('order'); } if(looksNumeric(v)) return parseLocaleNumber(v); const cell=api.rows().data().toArray()[r][c]; if(cell && typeof cell==='object'){const ortho=cell.sort??cell.order??cell.value; if(looksNumeric(ortho)) return parseLocaleNumber(ortho);} return NaN; }
        function stratifiedIndices(n,max=400){ if(n<=0) return []; const k=Math.min(max,n); const step=Math.max(1,Math.floor(n/k)); const out=[]; for(let i=0;i<n && out.length<k;i+=step) out.push(i); for(let j=0;j<Math.min(50,Math.floor(k/4));j++) out.push(Math.floor(Math.random()*n)); return [...new Set(out)]; }

        function activateSelect2(){
            if($('#columnSelector').data('select2')) $('#columnSelector').select2('destroy');
            if($('#columnSelector option[value="select-all-option"]').length===0) $('#columnSelector').prepend('<option value="select-all-option">Tümünü Seç</option>');
            $('#columnSelector').select2({ placeholder:"Filtrelenecek sütunları seçin...", width:'100%', multiple:true, dropdownParent:$('#customf-filter-modal .customf-modal-content'),
                templateResult:function(d){ if(d.id==='select-all-option') return $('<span><i class="fas fa-check-double"></i> Tümünü Seç</span>'); return d.text; },
                templateSelection:function(d){ if(d.id==='select-all-option'){ const total=$('#columnSelector option').not('[value="select-all-option"]').length; const cur=$('#columnSelector').val()?$('#columnSelector').val().length:0; return (cur===total)?`Tümü Seçili (${total})`:`(${cur}/${total}) Sütun Seçili`; } return d.text; }
            });
            $('#columnSelector').on('select2:select',function(e){ if(e.params.data.id==='select-all-option'){ const $s=$(this); const all=$s.find('option').not('[value="select-all-option"]').map(function(){return $(this).val();}).get(); $s.val(all).trigger('change'); $s.select2('close');}});
            $('#columnSelector').on('select2:unselect',function(e){ if(e.params.data.id==='select-all-option') $(this).val(null).trigger('change');});
        }

        function populateColumnSelector(tableId){
            const table=$(`#${tableId}`).DataTable(); const columns=table.columns().header().toArray(); const sel=$('#columnSelector'); sel.empty();
            columns.forEach((col,idx)=>{ const name=$(col).text().trim(); if(name && name!=="İşlemler"){ const selected=previousFilterValues.hasOwnProperty(idx)?'selected':''; sel.append(`<option value="${idx}" ${selected}>${name}</option>`); } });
            sel.trigger('change.select2');
            const total=$('#columnSelector option').not('[value="select-all-option"]').length; const cur=Object.keys(previousFilterValues).length;
            if(cur>0 && cur===total){ sel.find('option[value="select-all-option"]').prop('selected',true); sel.trigger('change.select2'); }
        }

        function generateCustomfFilterForm(tableId){
            try{
                const table=$(`#${tableId}`).DataTable(); const columns=table.columns().header().toArray(); const selected=$('#columnSelector').val()?.map(Number)||[]; let html="";
                selected.forEach(index=>{
                    const col=columns[index]; const name=$(col).text().trim(); if(!name || name==="İşlemler") return;
                    const type=columnTypesCache[index]||'text'; const prev=previousFilterValues[index]||{};
                    html+=`<div class="customf-input-group"><label>${name}</label>`;
                    if(type==='date'){
                        const s=(prev['date']&&prev['date'].start)?prev['date'].start:''; const e=(prev['date']&&prev['date'].end)?prev['date'].end:'';
                        html+=`<div class="customf-inline-inputs"><input type="datetime-local" class="filter-input" data-type="date-start" data-index="${index}" value="${s}"><input type="datetime-local" class="filter-input" data-type="date-end" data-index="${index}" value="${e}"></div>`;
                    }else if(type==='number'){
                        const min=(prev['range'] && !isNaN(prev['range'][0]))?prev['range'][0]:''; const max=(prev['range'] && !isNaN(prev['range'][1]))?prev['range'][1]:'';
                        html+=`<div class="customf-inline-inputs"><input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Min" value="${min}"><input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Max" value="${max}"></div>`;
                    }else{
                        const colData=table.column(index).data().toArray(); const sample=stratifiedIndices(colData.length,400); const uniq=new Set(); for(const ii of sample) uniq.add(cellToText(colData[ii]));
                        const useSelect=(columnTypesCache[index]!=='number') && uniq.size>0 && uniq.size<=10;
                        if(useSelect){
                            html+=`<select class="filter-input" data-type="select" data-index="${index}"><option value="">Tümü</option>`;
                            [...uniq].forEach(v=>{ const sel=(prev['select']===v)?'selected':''; html+=`<option value="${v}" ${sel}>${v}</option>`;});
                            html+=`</select>`;
                        }else{
                            const val=prev['text']||''; html+=`<input type="text" class="filter-input" data-type="text" data-index="${index}" placeholder="Metin giriniz" value="${val}">`;
                        }
                    }
                    html+=`</div>`;
                });
                $('#customf-dynamic-filter-form').html(html || getEmptyPlaceholder());
            }catch(e){ console.error("Filtre formu oluşturma hatası:",e); $('#customf-dynamic-filter-form').html('<div class="alert alert-danger">Filtre oluşturulurken hata oluştu</div>');}
        }

        function getEmptyPlaceholder(){ return `<div class="empty-placeholder"><i class="fas fa-sliders-h"></i><br><b>Filtrelemek istediğiniz sütunları seçin.</b><div style="font-size:13px;margin-top:6px;">Yukarıdaki listeden bir veya daha fazla sütun seçin.</div></div>`; }

        $('#customf-clear-filter').on('click', function(){
            $('#columnSelector').val(null).trigger('change'); previousFilterValues={}; generateCustomfFilterForm("borrowTable"); $.fn.dataTable.ext.search=[]; $('#borrowTable').DataTable().draw();
        });
        $(document).on('change','#columnSelector', function(){ setTimeout(()=>generateCustomfFilterForm("borrowTable"),100); });

        $('#customf-apply-filter').on('click', function(){
            try{
                const table=$('#borrowTable').DataTable(); selectedColumns=$('#columnSelector').val()?.map(Number)||[];
                const active={};
                $('.filter-input').each(function(){
                    const type=$(this).data('type'); const index=parseInt($(this).data('index')); const value=$(this).val().trim();
                    if(value){ if(!active[index]) active[index]={};
                        if(type==='range'){
                            const inputs=$(`input[data-type="range"][data-index="${index}"]`);
                            const vMin=parseLocaleNumber(inputs.eq(0).val()); const vMax=parseLocaleNumber(inputs.eq(1).val());
                            active[index][type]=[ Number.isFinite(vMin)?vMin:-Infinity, Number.isFinite(vMax)?vMax:Infinity ];
                        }else if(type==='date-start'||type==='date-end'){
                            if(!active[index]['date']) active[index]['date']={start:null,end:null};
                            if(type==='date-start') active[index]['date'].start=value;
                            if(type==='date-end') active[index]['date'].end=value;
                        }else{ active[index][type]=value; }
                    }
                });
                previousFilterValues={}; for(const k in active){ if(active.hasOwnProperty(k)) previousFilterValues[k]=active[k]; }

                $.fn.dataTable.ext.search=[];
                $.fn.dataTable.ext.search.push(function(settings,rowData,dataIndex){
                    for(const index in previousFilterValues){
                        if(!previousFilterValues.hasOwnProperty(index)) continue;
                        const colIndex=parseInt(index,10); const fset=previousFilterValues[index];
                        const cellText=textCache[dataIndex]?.[colIndex]??''; const cellCanon=canonCache[dataIndex]?.[colIndex]??'';

                        if(fset.date){
                            const start=fset.date.start?new Date(fset.date.start):null; const end=fset.date.end?new Date(fset.date.end):null;
                            const cellDate=parsedDatesCache[dataIndex]?.[colIndex]??null;
                            if(!cellDate && (start||end)) return false;
                            if(cellDate && start && cellDate.getTime()<start.getTime()) return false;
                            if(cellDate && end && cellDate.getTime()>end.getTime()) return false;
                            continue;
                        }
                        if(fset.range){
                            const num=numericCache[dataIndex]?.[colIndex];
                            if(!Number.isFinite(num)) return false;
                            if(num<fset.range[0] || num>fset.range[1]) return false;
                            continue;
                        }
                        if('select' in fset){
                            const f=canon(fset.select); const p=new RegExp(`(^|\\s)${f.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\$&')}(\\s|$)`);
                            let hay=cellCanon; hay=hay.replace(new RegExp(`(?:${f})(?:\\s*${f})+`,'g'), f).replace(/\s+/g,' ').trim();
                            if(!p.test(hay)) return false; continue;
                        }
                        if(fset.text){ const f=canon(fset.text); if(!cellCanon.includes(f)) return false; continue; }
                    }
                    return true;
                });

                table.draw();
                $('#customf-filter-modal').hide();
            }catch(e){ console.error("Filtre uygulama hatası:",e); }
        });

        function cacheColumnDataAndTypes(tableId){
            const table=$(`#${tableId}`).DataTable(); const all=table.rows().data().toArray(); const colCount=table.columns().header().toArray().length;
            columnTypesCache={}; parsedDatesCache=[];
            table.columns().every(function(index){ const name=$(this.header()).text().trim().toLowerCase(); if(name.includes('tarih')||name.includes('date')) columnTypesCache[index]='date'; });

            for(let i=0;i<colCount;i++){
                if(columnTypesCache[i]) continue; let hasDomDate=false;
                $(table.column(i).nodes()).each(function(){ let v=this.getAttribute('data-order')||$(this).data('order'); if(!v){ const inner=this.querySelector('[data-order]'); if(inner) v=inner.getAttribute('data-order')||$(inner).data('order'); }
                    if(v && isValidDate(v)){ hasDomDate=true; return false; } });
                if(hasDomDate) columnTypesCache[i]='date';
            }

            for(let c=0;c<colCount;c++){
                if(columnTypesCache[c]) continue;
                const header=$(table.columns().header()[c]).text().trim().toLowerCase();
                const headerLooksNumber=/(miktar|tutar|fiyat|adet|ücret|bakiye|bor[çc]|kredi|stok|\bid\b|\bno\b|say[ıi]s[ıi])/i.test(header);
                const colData=table.column(c).data().toArray(); const idxs=stratifiedIndices(colData.length,600);
                let checked=0, nCount=0, dCount=0; const uniq=new Set();
                for(const i of idxs){ const cell=colData[i]; const txt=cellToText(cell); if(txt) uniq.add(txt); checked++; if(isValidDate(txt)){ dCount++; continue; }
                    let n=getNumericOrtho(table,i,c); if(!Number.isFinite(n)) n=parseLocaleNumber(txt); if(Number.isFinite(n)) nCount++; }
                if(headerLooksNumber || (checked>0 && nCount/checked>=0.75)) columnTypesCache[c]='number';
                else if(checked>0 && dCount/checked>=0.60) columnTypesCache[c]='date';
                else columnTypesCache[c]=(uniq.size>0 && uniq.size<=10)?'select':'text';
            }

            numericCache=new Array(all.length);
            for(let r=0;r<all.length;r++){
                numericCache[r]={};
                for(let c=0;c<colCount;c++){
                    if(columnTypesCache[c]!=='number') continue;
                    let num=NaN; const cell=all[r][c];
                    if(typeof cell==='number') num=cell;
                    else{ let v=getNumericOrtho(table,r,c); if(!Number.isFinite(v)) v=parseLocaleNumber(cellToText(cell)); if(Number.isFinite(v)) num=v; }
                    numericCache[r][c]=num;
                }
            }

            for(let r=0;r<all.length;r++){
                parsedDatesCache[r]={};
                for(let c=0;c<colCount;c++){
                    if(columnTypesCache[c]!=='date') continue;
                    const cell=all[r][c]; let d=null;
                    let raw=getOrderFromDom(table,r,c); if(raw && isValidDate(raw)) d=parseDate(String(raw));
                    if(!d && typeof cell==='object' && cell){ const ortho=cell.sort??cell.order??cell.value??null; if(ortho && isValidDate(ortho)) d=parseDate(String(ortho)); }
                    if(!d){ const txt=cellToText(cell); d=parseDate(txt); }
                    parsedDatesCache[r][c]=d||null;
                }
            }
            buildTextAndCanonCaches(tableId);
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        (function(){
            const BRAND={c900:'#1A2A80', c700:'#3B38A0'};
            let chStatus=null, chTopBooks=null;

            function withDT(cb){
                if($.fn.dataTable && $.fn.dataTable.isDataTable('#borrowTable')) return cb($('#borrowTable').DataTable());
                const t=setInterval(function(){
                    if($.fn.dataTable && $.fn.dataTable.isDataTable('#borrowTable')){ clearInterval(t); cb($('#borrowTable').DataTable()); }
                },50);
            }

            function renderStats(dt){
                const nodes=dt.rows({search:'applied'}).nodes().to$();
                const status={'Gecikmiş':0,'Son Gün':0,'Kalan':0,'İade Edildi':0,'S.Teslim Yok':0};
                const booksMap={};

                nodes.each(function(){
                    const $tr=$(this);
                    const book=$tr.find('td').eq(1).text().trim();
                    if(book) booksMap[book]=(booksMap[book]||0)+1;

                    const $kg=$tr.find('td').eq(4); // Kalan Gün hücresi
                    const txt=$kg.text().trim();
                    const has=(cls)=>$kg.find(`.${cls}`).length>0;

                    if(has('is-overdue')) status['Gecikmiş']++;
                    else if(has('is-today')) status['Son Gün']++;
                    else if(has('is-left')) status['Kalan']++;
                    else if(has('is-returned')) status['İade Edildi']++;
                    else if(has('is-noduedate')) status['S.Teslim Yok']++;
                });

                // donut — durum dağılımı
                const el1=document.getElementById('borrowStatStatus');
                if(el1){
                    const data1={ labels:Object.keys(status),
                        datasets:[{ data:Object.values(status), backgroundColor:['#ef4444','#f59e0b','#16a34a','#1D4ED8','#8B5CF6'], borderWidth:0 }] };
                    if(chStatus){ chStatus.data=data1; chStatus.update(); }
                    else{ chStatus=new Chart(el1,{ type:'doughnut', data:data1, options:{ plugins:{legend:{position:'bottom'}}, cutout:'62%'} }); }
                }

                // bar — en çok ödünç verilen kitaplar (ilk 8)
                const top=Object.entries(booksMap).sort((a,b)=>b[1]-a[1]).slice(0,8);
                const labels=top.map(x=>x[0]), vals=top.map(x=>x[1]);
                const el2=document.getElementById('borrowStatTopBooks');
                if(el2){
                    const data2={ labels, datasets:[{ label:'Adet', data:vals, backgroundColor:BRAND.c700, borderRadius:6, maxBarThickness:32 }] };
                    const opts2={ plugins:{legend:{display:false}}, scales:{ x:{grid:{display:false}}, y:{beginAtZero:true, grid:{color:'rgba(0,0,0,.06)'}} } };
                    if(chTopBooks){ chTopBooks.data=data2; chTopBooks.update(); }
                    else{ chTopBooks=new Chart(el2,{ type:'bar', data:data2, options:opts2 }); }
                }
            }

            withDT(function(dt){
                renderStats(dt);
                $('#borrowTable').on('draw.dt', function(){ renderStats(dt); });
            });
        })();
    </script>
    <script>
        $(function () {
          var $borrow = $('a.sidebar-link').filter(function () {
            var href = (($(this).attr('href')||'') + '').toLowerCase();
            var txt  = (($(this).text()||'') + '').toLowerCase();
            return href.indexOf('/borrow') >= 0 || txt.indexOf('ödünç listesi') >= 0;
          }).first();

          if (!$borrow.length) return;

          if (!$borrow.find('i.mdi.mdi-bookmark-check').length) {
            $borrow.prepend('<i class="mdi mdi-bookmark-check" aria-hidden="true"></i>');
          }
          $borrow.addClass('ai-react-right');
        });
    </script>

}
