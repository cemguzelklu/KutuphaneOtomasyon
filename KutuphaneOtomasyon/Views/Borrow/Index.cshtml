@model List<KutuphaneOtomasyon.Models.Borrow>
@{
    ViewData["Title"] = "Ödünç Liste";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>

    .customf-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        overflow: hidden;
    }


    .customf-modal-content {
        background: #fff;
        border-radius: 16px;
        width: 90%;
        max-width: 480px;
        margin: 5% auto;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', sans-serif;
        display: flex;
        flex-direction: column;
        max-height: 90vh;
        overflow: hidden;
        padding: 0;
    }

    .customf-modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .customf-modal-title i {
            font-size: 20px;
            color: #52616B;
            background-color: #fafafa;
            padding: 8px;
            border-radius: 50%;
            box-shadow: 0 0 4px rgba(0,0,0,0.1);
        }

    .customf-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 32px 12px 32px;
        border-bottom: 1px solid #eee;
        background-color: #fff;
        position: sticky;
        top: 0;
        z-index: 10;
    }

        .customf-modal-header h5 {
            font-size: 22px;
            margin: 0;
            font-weight: 600;
            color: #333;
        }

    /* Dropdown kutusunun bulunduğu alan */
    .customf-modal-dropdown {
        padding: 16px 32px 0 32px;
        background: #fafafa;
        border-bottom: 1px solid #eee;
        position: sticky;
        top: 58px; /* header yüksekliği kadar */
        z-index: 9;
        padding-bottom: 30px;
    }

    .customf-modal-body {
        padding: 24px 32px;
        overflow-y: auto;
        flex: 1;
    }

    .customf-modal-dropdown .customf-input-group {
        margin-bottom: 0;
    }

    .customf-modal-footer {
        padding: 16px 32px 24px 32px;
        border-top: 1px solid #eee;
        background: #fff;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .customf-close {
        float: right;
        font-size: 22px;
        font-weight: 600;
        color: #bbb;
        cursor: pointer;
        transition: color 0.2s ease-in-out;
        background-color: #f2f2f2;
        border-radius: 40%;
        padding: 1px 9px;
        transition: all 0.3s ease;
    }

        .customf-close:hover {
            background-color: #e0e0e0;
            color: #000;
        }
        /* Çarpı simgesi ikonla beraber düzgün görünsün */
        .customf-close i {
            pointer-events: none;
        }

    .customf-modal-content h5 {
        font-size: 22px;
        color: #333;
        font-weight: 600;
    }

    .customf-input-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

        .customf-input-group label {
            font-weight: 500;
            margin-bottom: 6px;
            font-size: 15px;
            color: #444;
        }

        .customf-input-group input,
        .customf-input-group select {
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 10px;
            font-size: 15px;
            background: #fff;
            transition: all 0.25s ease-in-out;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
        }

            .customf-input-group input:focus,
            .customf-input-group select:focus {
                border-color: #C9D6DF;
                background: #fefefe;
                box-shadow: 0 0 0 3px rgba(201, 214, 223, 1);
                outline: none;
            }

    .customf-button-group {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

        .customf-button-group .customf-btn {
            flex: unset;
            text-align: center;
        }

    .customf-btn {
        color: #fff;
        font-size: 16px;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.1s ease;
    }

    .customf-filter-btn {
        width: 75%;
        background: linear-gradient(135deg,#C9D6DF, #52616B);
    }

        .customf-filter-btn:hover {
            background: linear-gradient(135deg, #52616B,#C9D6DF);
        }

    .customf-clear-btn {
        color: #000;
        width: 25%;
        background: linear-gradient(135deg, #ffffff, #C9D6DF);
    }

        .customf-clear-btn:hover {
            background: linear-gradient(135deg, #C9D6DF,#ffffff );
        }

        .customf-clear-btn:focus,
        .customf-filter-btn:focus {
            outline: none !important;
            box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);
            border: none !important;
        }

    /* Select2 Seçim Görünümü */
    .select2-container--default .select2-selection--multiple .select2-selection__choice {
        background-color: #F0F5F9 !important;
        color: #333;
        border: none !important;
        font-weight: 600;
        padding: 10px 12px; /* Dikey ve yatay boşluğu artırarak etiketi büyüt */
        font-size: 1.05em; /* Yazı boyutunu biraz daha büyüt */
        margin-top: 4px; /* Üstten boşluğu biraz artır (birden fazla satırda daha iyi görünür) */
        margin-right: 6px; /* Sağdan boşluğu koru */
        /* Seçili öğe içindeki "x" butonunun dikey hizalanması için */
        display: flex;
        align-items: center;
        gap: 5px; /* Metin ile "x" arasında boşluk */
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
        color: #666;
        font-size: 1.1em;
    }

        .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {
            color: #000;
        }

    .select2-container--default .select2-selection--multiple {
        min-height: 42px !important;
        height: auto !important;
        overflow-y: auto;
        max-height: 120px;
        padding-bottom: 6px;
        scrollbar-width: none;
        -ms-overflow-style: none;
        background-color: #fff !important;
        border-radius: 10px;
        border: 1px solid #ccc;
        padding: 6px;
        line-height: normal;
    }

        .select2-container--default .select2-selection--multiple::-webkit-scrollbar {
            display: none;
        }

    /* Dropdown Açılır Liste Seçenekleri */
    .select2-container--default .select2-results__option {
        padding: 10px 14px;
        font-size: 15px;
        color: #333;
        background-color: #fff;
        transition: background 0.2s ease-in-out;
        border-bottom: 1px solid #f0f0f0;
    }

    /* Hover efekti: Mor tema */
    .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background: linear-gradient(135deg, #ffffff, #F0F5F9) !important;
        color: #fff !important;
        font-weight: 600;
        border-radius: 6px;
        outline: none !important;
    }

    /* Seçili olan öğe */
    .select2-container--default .select2-results__option[aria-selected="true"] {
        background-color: #F0F5F9 !important;
        color: #222 !important;
        font-weight: 500;
        outline: none !important;
    }

    /* Dropdown kutusu */
    .select2-container--default .select2-dropdown {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', sans-serif;
    }

    /* Dropdown arama kutusu */
    .select2-container--default .select2-search--dropdown .select2-search__field {
        padding: 8px 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 14px;
        margin-bottom: 8px;
    }

    /* Mavi odak çizgilerini kaldır */
    .select2-container--default .select2-selection--multiple:focus,
    .select2-container--default .select2-selection--single:focus,
    .select2-container--default .select2-dropdown:focus,
    .select2-container--default .select2-selection:focus-visible {
        outline: none !important;
        border-color: #F0F5F9 !important;
        box-shadow: none !important;
    }

    .empty-placeholder {
        text-align: center;
        padding: 30px 20px;
        color: #666;
        font-size: 16px;
        background: #fafafa;
        border-radius: 12px;
        box-shadow: inset 0 0 10px rgba(0,0,0,0.03);
    }

        .empty-placeholder i {
            font-size: 32px;
            color: #ccc;
        }

    .customf-inline-inputs {
        display: flex;
        justify-content: space-between;
        gap: 0%;
    }

        .customf-inline-inputs input[type="number"],
        .customf-inline-inputs input[type="datetime-local"] {
            flex: 1;
            width: 48%;
            display: inline-block;
            margin-right: 4%;
        }

    .customf-input-group input[type="datetime-local"]:last-child,
    .customf-input-group input[type="number"]:last-child {
        margin-right: 0;
    }

    .btn {
        transition: transform .12s ease, box-shadow .12s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(0,0,0,0.15);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(0,0,0,0.12);
        }

    .dt-elevated {
        border: 0;
        border-radius: 16px;
        background: rgba(255,255,255,.86);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        box-shadow: 0 1px 2px rgba(0,0,0,.06), 0 6px 16px rgba(27,31,35,.08), 0 18px 40px rgba(27,31,35,.10);
        position: relative;
        transition: transform .18s ease, box-shadow .18s ease;
    }

        .dt-elevated:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,.06), 0 12px 26px rgba(27,31,35,.10), 0 28px 60px rgba(27,31,35,.12);
        }

        /* Kartın altında yumuşak “hale” */
        .dt-elevated::after {
            content: "";
            position: absolute;
            inset: auto 8% -14px 8%;
            height: 28px;
            background: radial-gradient(ellipse at center, rgba(0,0,0,.16) 0%, rgba(0,0,0,0) 70%);
            filter: blur(8px);
            pointer-events: none;
        }

    /* Tablo görünümü */
    .dt-pretty {
        border-radius: 12px;
        overflow: hidden;
        background: rgba(255,255,255,.92);
    }

        .dt-pretty thead th {
            position: sticky;
            top: 0;
            z-index: 2;
            background: inherit !important; /* THEAD'in arkaplanını aynen al */
            background-color: inherit !important;
            color: inherit !important; /* text-white devralsın */
            box-shadow: 0 1px 0 rgba(0,0,0,.06);
            backdrop-filter: none;
            -webkit-backdrop-filter: none;
        }

        /* Güvenlik için: thead'e bg-info verilmişse yazılar beyaz kalsın */
        .dt-pretty thead.bg-info th {
            color: #fff !important;
        }

        .dt-pretty td, .dt-pretty th {
            border-color: #eef2f7 !important;
        }

        .dt-pretty tbody tr {
            transition: transform .12s ease, box-shadow .12s ease, background .12s ease;
        }

            .dt-pretty tbody tr:hover {
                background: #f8fbff !important;
                transform: translateY(-1px);
                box-shadow: 0 6px 14px rgba(30,41,59,.06);
            }

    /* Üst bar (arama, buttons) ufak yükselti */
    .dataTables_wrapper .dt-buttons .btn,
    .dataTables_wrapper .dataTables_filter input {
        border-radius: 10px !important;
        border: 1px solid #e6e9f0 !important;
        box-shadow: 0 2px 8px rgba(0,0,0,.06);
    }

    /* Perspectif hissi (opsiyonel ama hoş) */
    .dt-float {
        transform: translateZ(0);
        perspective: 1200px;
    }
    /* Datatables butonları: görünüm + animasyon */
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
        position: relative;
        overflow: hidden; /* hover parıltısı için */
        background: linear-gradient(135deg, #4e73df, #224abe);
        color: #fff !important;
        border: none !important;
        border-radius: 10px !important;
        padding: 10px 14px !important;
        font-weight: 600 !important;
        line-height: 1 !important;
        box-shadow: 0 8px 20px rgba(78,115,223,0.25);
        transition: transform .12s ease, box-shadow .12s ease, filter .18s ease;
    }

        /* İkon ile metin arası boşluk */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy i,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button i {
            margin-right: 6px;
        }

        /* Hover/active durumları */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(78,115,223,0.35);
        }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(78,115,223,0.25);
        }

        /* Hover’da hafif “parıltı” geçişi */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy::after,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(120deg, transparent 0%, rgba(255,255,255,.20) 20%, transparent 40%);
            transform: translateX(-120%);
            transition: transform .55s ease;
            border-radius: inherit;
            pointer-events: none;
        }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover::after,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover::after {
            transform: translateX(120%);
        }

    /* Mavi odak halkasını/outline'ı KALDIR */
    .dataTables_wrapper .dt-buttons .dt-button:focus,
    .dataTables_wrapper .dt-buttons .dt-button:focus-visible,
    .dataTables_wrapper .dt-buttons .dt-button:active:focus {
        outline: none !important;
        box-shadow: none !important;
    }

    /* Bazı tarayıcılar için iç odak kenarlığı */
    .dataTables_wrapper .dt-buttons .dt-button::-moz-focus-inner {
        border: 0;
    }

    /* Datatables buton grubu taşmasın diye */
    .dataTables_wrapper .dt-buttons {
        display: flex;
        gap: 8px;
        overflow: visible; /* rozet ve parıltı taşarsa kesilmesin */
    }

        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            padding-right: 28px !important; /* rozet için sağdan yer */
        }

    .enhanced-search-box button:hover,
    .enhanced-search-box button:focus {
        background-color: #007bff !important; /* normal rengi koru */
        color: #fff !important;
    }

    /* DataTables butonları (Filtre / Copy) */
    .dataTables_wrapper .dt-buttons .dt-button:hover,
    .dataTables_wrapper .dt-buttons .dt-button:focus {
        background: linear-gradient(135deg, #4e73df, #224abe) !important;
        color: #fff !important;
        filter: none !important;
    }
    /* Pagination: temel görünüm */
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        /* Varsayılan hover’daki siyah kutuyu iptal et ve yumuşak bir hover ver */
        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(78,115,223,.12) !important; /* hafif mavi */
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

        /* Aktif sayfa (current) */
        .dataTables_wrapper .dataTables_paginate .paginate_button.current,
        .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
            background: linear-gradient(135deg, #4e73df, #224abe) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(78,115,223,.25) !important;
        }

        /* Disabled (önceki/sonraki pasif) */
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled,
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover {
            background: transparent !important;
            border-color: transparent !important;
            color: #999 !important;
            box-shadow: none !important;
        }

        /* Focus halka kaldır */
        .dataTables_wrapper .dataTables_paginate .paginate_button:focus {
            outline: none !important;
            box-shadow: none !important;
        }

    .badge-custom {
        font-size: 0.85rem;
        font-weight: 600;
        padding: 6px 10px;
        border-radius: 12px;
        color: #fff !important; /* ✅ Yazıyı hep beyaz yap */
    }

    .badge-overdue {
        background: linear-gradient(45deg, #e53935, #b71c1c);
    }

    .badge-warning-custom {
        background: linear-gradient(45deg, #fbc02d, #f57f17);
    }

    .badge-success-custom {
        background: linear-gradient(45deg, #43a047, #1b5e20);
    }

    .badge-secondary-custom {
        background: linear-gradient(45deg, #757575, #424242);
    }

    .btn-return {
        font-size: 0.85rem;
        font-weight: 600;
        padding: 6px 12px; /* ✅ badge ile aynı yükseklik */
        border-radius: 12px; /* ✅ daha yuvarlak görünüm */
        display: inline-flex;
        align-items: center;
        gap: 6px; /* ikon ile yazı arası boşluk */
    }
    /* === Sabit ölçülü "pill" görünüm (badge + butonlar için) === */
    .pill-fixed {
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        height: 34px; /* sabit yükseklik */
        min-width: 160px; /* sabit genişlik */
        padding: 0 12px; /* iç boşluk */
        border-radius: 999px; /* tam kapsül */
        font-size: 0.85rem;
        font-weight: 700;
        white-space: nowrap;
    }

    /* Mevcut rozetlerin hepsi için sabit ölçü + beyaz yazı */
    .badge-custom {
        color: #fff !important;
    }

        .badge-custom.pill-fixed { /* rozetlere sabit boyut ver */
            line-height: 1 !important;
        }

    /* "… gün kaldı" ile aynı renk tonunda iade butonu */
    .btn-return {
        border: none;
        box-shadow: 0 6px 14px rgba(27, 94, 32, .25);
    }

        .btn-return.btn-success-match, .btn-return.btn-success {
            background: linear-gradient(45deg, #43a047, #1b5e20) !important; /* badge-success-custom */
            color: #fff !important;
        }

        .btn-return.pill-fixed {
            height: 34px;
            min-width: 160px;
            border-radius: 999px;
            gap: 6px;
        }

    /* Var olan rozet tonları (değiştirmiyoruz) */
    .badge-overdue {
        background: linear-gradient(45deg, #e53935, #b71c1c);
    }

    .badge-warning-custom {
        background: linear-gradient(45deg, #fbc02d, #f57f17);
    }

    .badge-success-custom {
        background: linear-gradient(45deg, #43a047, #1b5e20);
    }

    .badge-secondary-custom {
        background: linear-gradient(45deg, #757575, #424242);
    }

    /* === YENİ: Kalan Gün sütunu için özel renkler === */
    /* Kalan Gün sütununda "İade edildi" (nötr-mavi) */
    .badge-returned-kg {
        background: linear-gradient(45deg, #5C6BC0, #283593); /* indigo ton */
        color: #fff !important;
    }
    /* Kalan Gün sütununda "Son teslim yok" (mor) */
    .badge-noduedate-kg {
        background: linear-gradient(45deg, #8E24AA, #4A148C); /* mor ton */
        color: #fff !important;
    }

    .pill-fixed {
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        height: 28px; /* 34px -> 28px yaptım */
        min-width: 120px; /* 160px -> 120px yaptım */
        padding: 0 10px; /* padding biraz küçültüldü */
        border-radius: 999px;
        font-size: 0.75rem; /* Yazı biraz küçültüldü */
        font-weight: 600;
        white-space: nowrap;
    }

    /* İade et butonu da aynı ölçüde olsun */
    .btn-return.pill-fixed {
        height: 28px;
        min-width: 120px;
        font-size: 0.75rem;
        padding: 0 10px;
        gap: 4px; /* ikon ve yazı arası daha dar */
    }
</style>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12 d-flex justify-content-between align-items-center">
            <h4 class="card-title mb-0">📦 Ödünç Alınan Kitaplar</h4>
            <a class="btn btn-success btn-rounded waves-effect waves-light" asp-action="Create">
                <i class="fa fa-plus mr-1"></i> Yeni Ödünç Ver
            </a>
        </div>
    </div>

    <div class="card dt-elevated">
        <div class="card-body">
            <div class="table-responsive dt-float">
                <table id="borrowTable" class="table table-bordered table-hover table-striped dt-pretty">
                    <thead class="bg-info text-white">
                        <tr>
                            <th>Üye</th>
                            <th>Kitap</th>
                            <th>Alış Tarihi</th>
                            <th>İade Tarihi</th>
                            <th>Kalan Gün</th>
                            <th class="text-center">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            var today = DateTime.Now.Date;
                            <tr>
                                <td>@item.Member.Name</td>
                                <td>@item.Book.Title</td>
                                <td>@item.BorrowDate.ToString("dd.MM.yyyy HH:mm")</td>
                                <td>
                                    @(
                                                                    item.ReturnDate.HasValue
                                                                    ? item.ReturnDate.Value.ToString("dd.MM.yyyy")
                                                                    : (item.DueDate.HasValue ? item.DueDate.Value.ToString("dd.MM.yyyy") : "—")
                                                                    )
                            </td>

                                <td>
                                @if (!item.ReturnDate.HasValue)
                                    {  // HENÜZ İADE EDİLMEDİ
                                        if (item.DueDate.HasValue)
                                        {
                                            var kalanGun = (item.DueDate.Value.Date - today).Days;
                                            if (kalanGun < 0)
                                            {
                                                <span class="badge badge-custom badge-overdue pill-fixed">@Math.Abs(kalanGun) gün gecikti</span>
                                            }
                                            else if (kalanGun == 0)
                                            {
                                                <span class="badge badge-custom badge-warning-custom pill-fixed">Son gün!</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-custom badge-success-custom pill-fixed">@kalanGun gün kaldı</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge badge-noduedate-kg pill-fixed">Son teslim yok</span>
                                        }
                                    }
                                    else
                                    { // İADE EDİLMİŞ
                                        var sure = (item.ReturnDate.Value.Date - item.BorrowDate.Date).Days;
                                        <span class="badge badge-returned-kg pill-fixed">
                                            İade edildi (@sure gün)
                                        </span>
                                    }
                                </td>

                                <td class="text-center">
                                    @if (!item.ReturnDate.HasValue)
                                    {
                                        <a asp-action="Return" asp-route-id="@item.BorrowId"
                                           class="btn btn-return btn-success-match pill-fixed waves-effect waves-light">
                                            <i class="fa fa-undo"></i> İade Et
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="badge badge-custom badge-secondary-custom pill-fixed">İade Edildi</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- 🔍 Filtreleme Modalı -->
<div id="customf-filter-modal" class="customf-modal">
    <div class="customf-modal-content">
        <div class="customf-modal-header">
            <div class="customf-modal-title">
                <i class="fas fa-filter"></i>
                <h5>Filtreleme Seçenekleri</h5>
            </div>
            <span class="customf-close" title="Kapat">
                <i class="fas fa-times"></i>
            </span>
        </div>

        <!-- Dropdown üstte ve sabit -->
        <div class="customf-modal-dropdown">
            <div class="customf-input-group">
                <label for="columnSelector">Filtrelenecek Sütunlar</label>
                <select id="columnSelector" class="select2-column-selector" style="width: 100%;" multiple></select>
            </div>
        </div>

        <!-- Scroll edilebilir içerik -->
        <div class="customf-modal-body">
            <form id="customf-dynamic-filter-form"></form>
        </div>

        <div class="customf-modal-footer">
            <div class="customf-button-group">
                <button id="customf-clear-filter" class="customf-btn customf-clear-btn">Temizle</button>
                <button id="customf-apply-filter" class="customf-btn customf-filter-btn">Filtrele</button>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
            let previousFilterValues = {};
            let selectedColumns = [];
            let columnTypesCache = {}; // Her sütunun tipini (date, number, text) önbelleğe almak için , "Ayşe", "Fatma", "Zeynep", "Mustafa", "Emre", "Elif", "Cem", "Yılmaz", "Hakan"
            let parsedDatesCache = []; // Sadece tarih sütunlarındaki dönüştürülmüş Date objelerini tutmak için , "Demir", "Çelik", "Şahin", "Arslan", "Güzel", "Sabun"

            $(document).ready(function () {
                // Örnek veri seti oluşturucu
                              

                // DataTable başlatma
                const table = $('#borrowTable').DataTable({
                    responsive: true,
                    autoWidth: false,
                    lengthChange: true,
                    deferRender: true,
                    order: [],
                    language: {
                        url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json"
                    },
                    lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tümü"]],
                    pageLength: 10,
                    paging: true,
                    buttons: [
                        {
                            extend: "copy",
                            text: '<i class="fas fa-copy"></i>',
                            titleAttr: "Kopyala",
                            className: "btn-copy"
                        },
                        {
                            text: '<i class="fas fa-filter"></i> Filtrele',
                            titleAttr: "Filtreleme seçeneklerini aç",
                            className: "customf-filter-button",
                            action: function () {

                                    populateColumnSelector("borrowTable");
                                    generateCustomfFilterForm("borrowTable");
                                    $('#customf-filter-modal').show();
                                    activateSelect2();
                            }
                        }
                    ],
                    dom: 'Bfrtip',
                    
                });

                // Tablo yüklendiğinde sütun tiplerini ve tarihleri önbelleğe al
                cacheColumnDataAndTypes("borrowTable");
            });


            function activateSelect2() {
                if ($('#columnSelector').data('select2')) {
                    $('#columnSelector').select2('destroy');
                }
                if ($('#columnSelector option[value="select-all-option"]').length === 0) {
                    $('#columnSelector').prepend('<option value="select-all-option">Tümünü Seç</option>');
                }
                $('#columnSelector').select2({
                    placeholder: "Filtrelenecek sütunları seçin...",
                    width: '100%',
                    multiple: true,
                    dropdownParent: $('#customf-filter-modal .customf-modal-content'),
                    templateResult: function (data) {
                        if (data.id === 'select-all-option') {
                            return $('<span><i class="fas fa-check-double"></i> Tümünü Seç</span>');
                        }
                        return data.text;
                    },
                    templateSelection: function (data) {
                        if (data.id === 'select-all-option') {
                            const totalSelectableOptions = $('#columnSelector option').not('[value="select-all-option"]').length;
                            const currentSelectedCount = $('#columnSelector').val() ? $('#columnSelector').val().length : 0;
                            if (currentSelectedCount === totalSelectableOptions) {
                                return `Tümü Seçili (${totalSelectableOptions})`;
                            }
                            return `(${currentSelectedCount}/${totalSelectableOptions}) Sütun Seçili`;
                        }
                        return data.text;
                    }
                });
                $('#columnSelector').on('select2:select', function (e) {
                    const selectedId = e.params.data.id;
                    if (selectedId === 'select-all-option') {
                        const $selector = $(this);
                        const allOptions = $selector.find('option').not('[value="select-all-option"]').map(function () {
                            return $(this).val();
                        }).get();
                        $selector.val(allOptions).trigger('change');
                        $selector.select2('close');
                    }
                });
                $('#columnSelector').on('select2:unselect', function (e) {
                    const unselectedId = e.params.data.id;
                    if (unselectedId === 'select-all-option') {
                        $(this).val(null).trigger('change');
                    }
                });
            }

            function populateColumnSelector(tableId) {
                const table = $(`#${tableId}`).DataTable();
                const columns = table.columns().header().toArray();
                const selector = $('#columnSelector');
                selector.empty();
                columns.forEach((col, index) => {
                    const colName = $(col).text().trim();
                    if (colName && colName !== "İşlemler") {

                        const selectedAttr = previousFilterValues.hasOwnProperty(index) ? 'selected' : '';
                        selector.append(`<option value="${index}" ${selectedAttr}>${colName}</option>`);
                    }
                });
                selector.trigger('change.select2');
                const totalSelectableOptions = $('#columnSelector option').not('[value="select-all-option"]').length;
                const currentSelectedCount = Object.keys(previousFilterValues).length;
                if (currentSelectedCount > 0 && currentSelectedCount === totalSelectableOptions) {
                    selector.find('option[value="select-all-option"]').prop('selected', true);
                    selector.trigger('change.select2');
                }
            }

             function generateCustomfFilterForm(tableId) {
            try {
                const table = $(`#${tableId}`).DataTable();
                const columns = table.columns().header().toArray();
                // selectedColumns artık `populateColumnSelector` tarafından güncelleniyor ve previousFilterValues'dan türetiliyor
                const selectedIndexes = $('#columnSelector').val()?.map(Number) || [];
                let formHtml = "";

                selectedIndexes.forEach(index => {
                    try {
                        const col = columns[index];
                        const colName = $(col).text().trim();
                        if (!colName || colName === "İşlemler") return;

                        const columnType = columnTypesCache[index] || 'text';
                        // previousFilterValues'daki o sütuna ait filtre değerlerini al
                        const prev = previousFilterValues[index] || {};

                        formHtml += `<div class="customf-input-group"><label>${colName}</label>`;
                        if (columnType === 'date') {
                            // Tarih filtreleri için:
                            // 'prev' objesinden doğrudan string değeri alıyoruz, Date objesi değil.
                            // Çünkü input[type="datetime-local"] bir ISO string bekler.
                                    const startVal = (prev['date'] && prev['date'].start) ? prev['date'].start : '';
            const endVal = (prev['date'] && prev['date'].end) ? prev['date'].end : '';
                            formHtml += `<div class="customf-inline-inputs">`;
                            formHtml += `<input type="datetime-local" class="filter-input" data-type="date-start" data-index="${index}" value="${startVal}">`;
                            formHtml += `<input type="datetime-local" class="filter-input" data-type="date-end" data-index="${index}" value="${endVal}">`;
                            formHtml += `</div>`;
                                // ++++ EKLENECEK KOD ++++
            console.log("[DEBUG] Tarih Input Değerleri:",
                "Sütun:", colName,
                "Start:", startVal,
                "End:", endVal
            );
            // ++++ EKLENECEK KOD ++++
                        } else if (columnType === 'number') {
                            const min = (prev['range'] && !isNaN(prev['range'][0])) ? prev['range'][0] : '';
                            const max = (prev['range'] && !isNaN(prev['range'][1])) ? prev['range'][1] : '';
                            formHtml += `<div class="customf-inline-inputs">`;
                            formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Min" value="${min}">`;
                            formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Max" value="${max}">`;
                            formHtml += `</div>`;
                        } else { // Metin veya select tipleri için
                            const allDataForColumn = table.column(index).data().toArray();
                            const sampleForSelect = allDataForColumn.slice(0, Math.min(allDataForColumn.length, 500)).map(cell => {
                                const tempDiv = document.createElement('div');
                                tempDiv.innerHTML = cell;
                                return (tempDiv.textContent || tempDiv.innerText || "").trim();
                            }).filter(v => v);
                            const uniqueValues = [...new Set(sampleForSelect)];
                            const useSelect = uniqueValues.length > 0 && uniqueValues.length <= 10;

                            if (useSelect) {
                                formHtml += `<select class="filter-input" data-type="select" data-index="${index}">`;
                                formHtml += `<option value="">Tümü</option>`;
                                uniqueValues.forEach(val => {
                                    // Selectbox'ta kaydedilmiş değeri hatırlama
                                    const selected = (prev['select'] === val) ? 'selected' : '';
                                    formHtml += `<option value="${val}" ${selected}>${val}</option>`;
                                });
                                formHtml += `</select>`;
                            } else {
                                // Text input'ta kaydedilmiş değeri hatırlama
                                const val = prev['text'] || '';
                                formHtml += `<input type="text" class="filter-input" data-type="text" data-index="${index}" placeholder="Metin giriniz" value="${val}">`;
                            }
                        }
                        formHtml += `</div>`;
                    } catch (e) {
                        console.error(`Sütun işleme hatası (index ${index}):`, e);
                    }
                });
                $('#customf-dynamic-filter-form').html(formHtml || getEmptyPlaceholder());
            } catch (e) {
                console.error("Filtre formu oluşturma hatası:", e);
                $('#customf-dynamic-filter-form').html('<div class="alert alert-danger">Filtre oluşturulurken hata oluştu</div>');
            }}


             function getEmptyPlaceholder() {
                return `
                    <div class="empty-placeholder">
                        <i class="fas fa-sliders-h"></i><br>
                        <b>Filtrelemek istediğiniz sütunları seçin.</b>
                        <div style="font-size:13px; margin-top: 6px;">Yukarıdaki listeden bir veya daha fazla sütun seçin.</div>
                    </div>
                `;
            }
              $('#customf-clear-filter').on('click', function () {
                $('#columnSelector').val(null).trigger('change');
                previousFilterValues = {}; // Filtreleri temizlerken kayıtlı değerleri de sıfırla
                generateCustomfFilterForm("borrowTable"); // Formu boş olarak yeniden oluştur
                $.fn.dataTable.ext.search = [];
                 updateFilterBadge();
                $('#borrowTable').DataTable().draw();
            });
             $(document).on('change', '#columnSelector', function () {
                setTimeout(() => {
                    generateCustomfFilterForm("borrowTable");
                }, 100);
            });
             $('#customf-apply-filter').on('click', function () {
                      // ++++ EKLENECEK KOD ++++
            console.log("[DEBUG] Uygulanan Filtreler:", previousFilterValues);
            // ++++ EKLENECEK KOD ++++
                try {
                    const table = $('#borrowTable').DataTable();
                    // selectedColumns'ı tekrar güncelle, çünkü kullanıcı modal içinde sütun seçimini değiştirmiş olabilir
                    selectedColumns = $('#columnSelector').val()?.map(Number) || [];

                    // Yeni aktif filtreleri `previousFilterValues`'a kaydetmeden önce sıfırlamıyoruz!
                    // Sadece önceki değerleri üzerine yazacağız.
                    const currentActiveFilters = {}; // Geçerli uygulama için geçici bir değişken

                    $('.filter-input').each(function () {
                        const type = $(this).data('type');
                        const index = parseInt($(this).data('index'));
                        const value = $(this).val().trim();

                        if (value) {
                            if (!currentActiveFilters[index]) currentActiveFilters[index] = {};
                            if (type === 'range') {
                                const inputs = $(`input[data-type="range"][data-index="${index}"]`);
                                currentActiveFilters[index][type] = [
                                    parseFloat(inputs.eq(0).val().replace(',', '.')) || -Infinity,
                                    parseFloat(inputs.eq(1).val().replace(',', '.')) || Infinity
                                ];
                            } else if (type === 'date-start' || type === 'date-end') {
                                if (!currentActiveFilters[index]['date']) currentActiveFilters[index]['date'] = { start: null, end: null };
                                if (type === 'date-start') currentActiveFilters[index]['date'].start = value; // ISO string olarak kaydet
                                if (type === 'date-end') currentActiveFilters[index]['date'].end = value; // ISO string olarak kaydet
                            } else {
                                currentActiveFilters[index][type] = value;
                            }
                        }
                    });

                    // Aktif filtreleri `previousFilterValues`'a atayalım.
                    // Sadece gerçekten filtrelenmiş sütunları kaydedelim.
                    previousFilterValues = {}; // Önceki tüm filtreleri temizle
                    for (const index in currentActiveFilters) {
                        if (currentActiveFilters.hasOwnProperty(index)) {
                            previousFilterValues[index] = currentActiveFilters[index];
                        }
                    }


                    // 2. Önceki tüm özel filtreleri temizle
                    $.fn.dataTable.ext.search = [];

                    // 3. Yeni filtreleme fonksiyonunu ekle
                    $.fn.dataTable.ext.search.push(function (settings, rowData, dataIndex) {
                        let pass = true;

                        const cleanedRowData = {};
                        selectedColumns.forEach(idx => {
                            if (columnTypesCache[idx] !== 'ignored') {
                                const cell = rowData[idx];
                                const tempDiv = document.createElement('div');
                                tempDiv.innerHTML = cell;
                                cleanedRowData[idx] = (tempDiv.textContent || tempDiv.innerText || "").trim();
                            }
                        });

                        for (const index in previousFilterValues) { // activeFilters yerine previousFilterValues kullan
                            if (!previousFilterValues.hasOwnProperty(index)) continue;

                            const filtersForColumn = previousFilterValues[index]; // currentActiveFilters yerine previousFilterValues kullan
                            const colIndex = parseInt(index);
                            const columnType = columnTypesCache[colIndex];

                            switch (columnType) {
                                case 'date':
                                    const dateFilters = filtersForColumn['date'];
                                    if (dateFilters) {
                                        const cellDate = parsedDatesCache[dataIndex]?.[colIndex];
                                        // Filtre değerlerini Date objesine dönüştürüyoruz
                                        const filterStartDate = dateFilters.start ? new Date(dateFilters.start) : null;
                                        const filterEndDate = dateFilters.end ? new Date(dateFilters.end) : null;
                                                                    // ++++ EKLENECEK KOD ++++
                       if (dataIndex < 3) { // Sadece ilk 5 satır için log göster
            console.log("[DEBUG] Filtre Tarih Aralığı (" + dataIndex + ". satır):",
                "Start:", filterStartDate,
                "End:", filterEndDate,
                "Hücre Tarihi:", cellDate
            );
        }
                // ++++ EKLENECEK KOD ++++
                                        if (!cellDate) {
                                            if (filterStartDate || filterEndDate) {
                                                pass = false;
                                            }
                                            break;
                                        }

                                                // Daha sağlam hali:
                                        if (filterStartDate && cellDate) {
                const cellTime = cellDate.getTime();
                const startTime = filterStartDate.getTime();
                if (cellTime < startTime) pass = false;
            }

                                        if (filterEndDate && cellDate && pass) { // pass kontrolü önceki filtrenin geçilip geçilmediğini kontrol eder
                const cellTime = cellDate.getTime();
                const endTime = filterEndDate.getTime();
                if (cellTime > endTime) pass = false;
            }

        }

                                    break;
                                case 'number':
                                    const rangeFilters = filtersForColumn['range'];
                                    if (rangeFilters) {
                                        const [min, max] = rangeFilters;
                                        const num = parseFloat(cleanedRowData[colIndex]?.replace(',', '.')) || 0;
                                        if (num < min || num > max) {
                                            pass = false;
                                        }
                                    }
                                    break;
                                case 'text':
                                    const textFilter = filtersForColumn['text'];
                                    if (textFilter && !cleanedRowData[colIndex]?.toLowerCase().includes(textFilter.toLowerCase())) {
                                        pass = false;
                                    }
                                    break;
                                case 'select':
                                    const selectFilter = filtersForColumn['select'];
                                    if (selectFilter && cleanedRowData[colIndex] !== selectFilter) {
                                        pass = false;
                                    }
                                    break;
                            }

                            if (!pass) break;
                        }
                        return pass;
                    });
                    updateFilterBadge();
                    table.search('').columns().search('').draw();
                    table.draw();
                    $('#customf-filter-modal').hide();
                } catch (e) {
                    console.error("Filtre uygulama hatası:", e);
                }
            });


            document.addEventListener('DOMContentLoaded', function () {
                const modal = document.getElementById('customf-filter-modal');
                const closeBtn = document.querySelector('.customf-close');
                window.onclick = function (event) {
                    if (event.target === modal) modal.style.display = 'none';
                };
                closeBtn.onclick = function () {
                    modal.style.display = 'none';
                };
            });

              function isValidDate(dateStr) {
                if (!dateStr || typeof dateStr !== 'string') return false;

                    const digits = (dateStr.match(/\d/g) || []).length;
            const dots = (dateStr.match(/\./g) || []).length;
            const colons = (dateStr.match(/:/g) || []).length;

                if (digits >= 8 && dots === 2 && colons === 2) {
            console.log("[DEBUG] Özel Tarih Formatı Kabul Edildi:", dateStr);
            return true;
        }
                // Şirketin kullandığı formatlar
                const dateFormats = [
                    /^\d{1,2}\.\d{1,2}\.\d{4}$/,                          // dd.MM.yyyy
                    /^\d{1,2}\.\d{1,2}\.\d{4}\s+\d{1,2}:\d{2}$/,          // dd.MM.yyyy HH:mm
                    /^\d{1,2}\.\d{1,2}\.\d{4}\s+\d{1,2}:\d{2}:\d{2}$/     // dd.MM.yyyy HH:mm:ss
                ];


                // Format kontrolü
                       const isFormatValid = dateFormats.some(format => {
                const match = dateStr.match(format);
                return match && match[0] === dateStr; // Tam eşleşme kontrolü
            });
                if (!isFormatValid) return false;

                // Gerçek tarih kontrolü
                const date = parseDate(dateStr);
                if (!date || isNaN(date.getTime())) return false;

                // Gün/Ay kontrolü (32.01 gibi geçersiz tarihleri yakala)
                const parts = dateStr.split(/[\.\s:]/);
                const day = parseInt(parts[0]);
                const month = parseInt(parts[1]);
                const year = parseInt(parts[2]);

                return (
                    month >= 1 && month <= 12 &&
                    day >= 1 && day <= new Date(year, month, 0).getDate()
                );
            }
            function parseDate(dateStr) {
            console.log("[DEBUG] parseDate Girdisi:", dateStr);
            if (!dateStr) {
                console.warn("[WARN] Boş tarih değeri!");
                return null;
            }

            // Eğer zaten Date objesiyse
            if (dateStr instanceof Date && !isNaN(dateStr.getTime())) {
                return dateStr;
            }

            // Eğer object ise ve toString() metodu varsa kullan
            if (typeof dateStr === 'object' && dateStr.toString) {
                dateStr = dateStr.toString();
            }

            // HTML etiketlerini temizle
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = dateStr;
            dateStr = (tempDiv.textContent || tempDiv.innerText || "").trim();

            // Fazla boşlukları ve non-breaking space'leri temizle
            dateStr = dateStr.replace(/\s+/g, ' ').replace(/[\u00A0]/g, ' ').trim();

            // Artık string olduğundan emin olalım
            if (!dateStr || typeof dateStr !== 'string') return null;

            // trimmedStr değişkenini tanımlıyoruz (hata buradan geliyordu)
            const trimmedStr = dateStr;

            // 1) ISO-benzeri formatlar (YYYY-MM-DD veya YYYY-MM-DDTHH:MM...) -> güvenle new Date ile dene
            if (/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(trimmedStr)) {
                const isoDate = new Date(trimmedStr);
                if (!isNaN(isoDate.getTime())) return isoDate;
            }

            // 2) Slash'li ortak formatlara bir şans daha ver (ör. MM/DD/YYYY veya YYYY/MM/DD)
            if (/^\d{1,2}\/\d{1,2}\/\d{4}/.test(trimmedStr) || /^\d{4}\/\d{2}\/\d{2}/.test(trimmedStr)) {
                const tryDate = new Date(trimmedStr);
                if (!isNaN(tryDate.getTime())) return tryDate;
            }

            // 3) Şirketin kullandığı dd.MM.yyyy tabanlı formatları manuel parse et
            const formats = [
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/, handler: (m) => new Date(Number(m[3]), Number(m[2]) - 1, Number(m[1]), Number(m[4]), Number(m[5]), Number(m[6])) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/, handler: (m) => new Date(Number(m[3]), Number(m[2]) - 1, Number(m[1]), Number(m[4]), Number(m[5])) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/, handler: (m) => new Date(Number(m[3]), Number(m[2]) - 1, Number(m[1])) }
            ];

            for (const { regex, handler } of formats) {
                const match = trimmedStr.match(regex);
                if (match) {
                    try {
                        const date = handler(match);
                        if (!isNaN(date.getTime())) return date;
                    } catch (e) {
                        console.error("Tarih dönüşüm hatası:", e);
                    }
                }
            }

            console.warn("Tarih formatı tanınmadı:", dateStr);
            return null;
        }

                   function cacheColumnDataAndTypes(tableId) {
            const table = $(`#${tableId}`).DataTable();
            const allData = table.rows().data().toArray();
            const columnsCount = table.columns().header().toArray().length;

            columnTypesCache = {};
            parsedDatesCache = [];

            // 1. Sütun başlıklarına göre ön filtreleme
            table.columns().every(function(index) {
                const colHeader = this.header();
                const colName = $(colHeader).text().trim().toLowerCase();
                if (colName.includes('tarih') || colName.includes('date')) {
                    columnTypesCache[index] = 'date';
                }
            });

            // 2. Veri analizi ile tip tespiti
            const sampleSize = Math.min(300, allData.length);
            for (let colIndex = 0; colIndex < columnsCount; colIndex++) {
                if (columnTypesCache[colIndex]) continue;

                const uniqueValues = new Set();
                for (let rowIndex = 0; rowIndex < sampleSize; rowIndex++) {
                    const cell = allData[rowIndex][colIndex];
                    if (!cell) continue;

                    let cellText;
                    if (typeof cell === 'object' && cell.toString) {
                        cellText = cell.toString();
                    } else {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = cell;
                        cellText = (tempDiv.textContent || tempDiv.innerText || "").trim();
                    }

                    if (cellText) {
                        uniqueValues.add(cellText);
                        if (uniqueValues.size > 10) break;
                    }
                }

                if (uniqueValues.size > 0 && uniqueValues.size <= 10) {
                    columnTypesCache[colIndex] = 'select';
                    continue;
                }

                let dateCount = 0, numberCount = 0, totalChecked = 0;
                for (let rowIndex = 0; rowIndex < sampleSize; rowIndex++) {
                    const cell = allData[rowIndex][colIndex];
                    if (!cell) continue;

                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = cell;
                    const cellText = (tempDiv.textContent || tempDiv.innerText || "").trim();
                    if (!cellText) continue;

                    totalChecked++;
                    if (isValidDate(cellText)) dateCount++;
                    else if (!isNaN(parseFloat(cellText.replace(',', '.')))) numberCount++;
                }

                if (totalChecked > 0) {
                    columnTypesCache[colIndex] = dateCount / totalChecked > 0.6 ? 'date' :
                                                numberCount / totalChecked > 0.75 ? 'number' : 'text';
                } else {
                    columnTypesCache[colIndex] = 'text';
                }
            }

            // 3. Tarih verilerini önbelleğe al (DEBUG özellikli yeni versiyon)
            for (let rowIndex = 0; rowIndex < allData.length; rowIndex++) {
                const row = allData[rowIndex];
                parsedDatesCache[rowIndex] = {}; // Her satır için yeni object

                for (let colIndex = 0; colIndex < columnsCount; colIndex++) {
                    if (columnTypesCache[colIndex] === 'date') {
                        const cell = row[colIndex];
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = cell;
                        const cleanedCell = (tempDiv.textContent || tempDiv.innerText || "").trim();
                        const parsed = parseDate(cleanedCell);
                        parsedDatesCache[rowIndex][colIndex] = parsed;

                        // DEBUG için ilk 3 satır
                        if (rowIndex < 3) {
                            console.log(`[CACHE DEBUG] Satır ${rowIndex}, Sütun ${colIndex}:`, {
                                "Ham Veri": cell,
                                "Temizlenmiş": cleanedCell,
                                "Parse Sonucu": parsed,
                                "Sütun Tipi": columnTypesCache[colIndex]
                            });
                        }

                        if (!parsed) {
                            console.warn(`Tarih parse edilemedi - Satır ${rowIndex}, Sütun ${colIndex}:`, cleanedCell);
                        }
                    }
                }
            }

            console.log("[DEBUG] Sütun Tip Önbelleği:", columnTypesCache);
            console.log("[DEBUG] İlk 5 Satır Tarih Önbelleği:", parsedDatesCache.slice(0, 5));
        }
             function updateFilterBadge() {
          const count = Object.values(previousFilterValues || {})
            .filter(v => v && Object.values(v).some(x => x && String(x).trim() !== ''))
            .length;

          const $btn = $('.customf-filter-button');

          // Rozeti yeniden oluştur
          $btn.find('.filter-badge').remove();

          // Butonu konumlandır (CSS yazmadan inline)
          $btn.css({ position: 'relative', overflow: 'visible' });

          if (count > 0) {
            // Rozeti sağ ÜST iç köşeye yerleştir (taşmadan görünsün)
            $btn.append(
              `<span class="filter-badge" style="
                position:absolute;
                top:2px;            /* dilersen 4-6px yapabilirsin */
                right:2px;          /* dilersen 4-6px yapabilirsin */
                transform: translate(0,0);
                min-width:18px;
                height:18px;
                padding:0 6px;
                border-radius:9999px;
                display:flex;align-items:center;justify-content:center;
                font-size:11px;font-weight:800;
                background:#ef4444;color:#fff;
                line-height:1; z-index:3;
                box-shadow:0 6px 14px rgba(239,68,68,.35);
              ">${count}</span>`
            );
          }
        }
    </script>
}

