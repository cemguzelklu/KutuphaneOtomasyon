@model List<KutuphaneOtomasyon.Models.Borrow>
@{
    ViewData["Title"] = "Ödünç Liste";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>

    .customf-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        overflow: hidden;
    }


    .customf-modal-content {
        background: #fff;
        border-radius: 16px;
        width: 90%;
        max-width: 480px;
        margin: 5% auto;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', sans-serif;
        display: flex;
        flex-direction: column;
        max-height: 90vh;
        overflow: hidden;
        padding: 0;
    }

    .customf-modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .customf-modal-title i {
            font-size: 20px;
            color: #52616B;
            background-color: #fafafa;
            padding: 8px;
            border-radius: 50%;
            box-shadow: 0 0 4px rgba(0,0,0,0.1);
        }

    .customf-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 32px 12px 32px;
        border-bottom: 1px solid #eee;
        background-color: #fff;
        position: sticky;
        top: 0;
        z-index: 10;
    }

        .customf-modal-header h5 {
            font-size: 22px;
            margin: 0;
            font-weight: 600;
            color: #333;
        }

    /* Dropdown kutusunun bulunduğu alan */
    .customf-modal-dropdown {
        padding: 16px 32px 0 32px;
        background: #fafafa;
        border-bottom: 1px solid #eee;
        position: sticky;
        top: 58px; /* header yüksekliği kadar */
        z-index: 9;
        padding-bottom: 30px;
    }

    .customf-modal-body {
        padding: 24px 32px;
        overflow-y: auto;
        flex: 1;
    }

    .customf-modal-dropdown .customf-input-group {
        margin-bottom: 0;
    }

    .customf-modal-footer {
        padding: 16px 32px 24px 32px;
        border-top: 1px solid #eee;
        background: #fff;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .customf-close {
        float: right;
        font-size: 22px;
        font-weight: 600;
        color: #bbb;
        cursor: pointer;
        transition: color 0.2s ease-in-out;
        background-color: #f2f2f2;
        border-radius: 40%;
        padding: 1px 9px;
        transition: all 0.3s ease;
    }

        .customf-close:hover {
            background-color: #e0e0e0;
            color: #000;
        }
        /* Çarpı simgesi ikonla beraber düzgün görünsün */
        .customf-close i {
            pointer-events: none;
        }

    .customf-modal-content h5 {
        font-size: 22px;
        color: #333;
        font-weight: 600;
    }

    .customf-input-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

        .customf-input-group label {
            font-weight: 500;
            margin-bottom: 6px;
            font-size: 15px;
            color: #444;
        }

        .customf-input-group input,
        .customf-input-group select {
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 10px;
            font-size: 15px;
            background: #fff;
            transition: all 0.25s ease-in-out;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
        }

            .customf-input-group input:focus,
            .customf-input-group select:focus {
                border-color: #C9D6DF;
                background: #fefefe;
                box-shadow: 0 0 0 3px rgba(201, 214, 223, 1);
                outline: none;
            }

    .customf-button-group {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

        .customf-button-group .customf-btn {
            flex: unset;
            text-align: center;
        }

    .customf-btn {
        color: #fff;
        font-size: 16px;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.1s ease;
    }

    .customf-filter-btn {
        width: 75%;
        background: linear-gradient(135deg,#C9D6DF, #52616B);
    }

        .customf-filter-btn:hover {
            background: linear-gradient(135deg, #52616B,#C9D6DF);
        }

    .customf-clear-btn {
        color: #000;
        width: 25%;
        background: linear-gradient(135deg, #ffffff, #C9D6DF);
    }

        .customf-clear-btn:hover {
            background: linear-gradient(135deg, #C9D6DF,#ffffff );
        }

        .customf-clear-btn:focus,
        .customf-filter-btn:focus {
            outline: none !important;
            box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);
            border: none !important;
        }

    /* Select2 Seçim Görünümü */
    .select2-container--default .select2-selection--multiple .select2-selection__choice {
        background-color: #F0F5F9 !important;
        color: #333;
        border: none !important;
        font-weight: 600;
        padding: 10px 12px; /* Dikey ve yatay boşluğu artırarak etiketi büyüt */
        font-size: 1.05em; /* Yazı boyutunu biraz daha büyüt */
        margin-top: 4px; /* Üstten boşluğu biraz artır (birden fazla satırda daha iyi görünür) */
        margin-right: 6px; /* Sağdan boşluğu koru */
        /* Seçili öğe içindeki "x" butonunun dikey hizalanması için */
        display: flex;
        align-items: center;
        gap: 5px; /* Metin ile "x" arasında boşluk */
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
        color: #666;
        font-size: 1.1em;
    }

        .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {
            color: #000;
        }

    .select2-container--default .select2-selection--multiple {
        min-height: 42px !important;
        height: auto !important;
        overflow-y: auto;
        max-height: 120px;
        padding-bottom: 6px;
        scrollbar-width: none;
        -ms-overflow-style: none;
        background-color: #fff !important;
        border-radius: 10px;
        border: 1px solid #ccc;
        padding: 6px;
        line-height: normal;
    }

        .select2-container--default .select2-selection--multiple::-webkit-scrollbar {
            display: none;
        }

    /* Dropdown Açılır Liste Seçenekleri */
    .select2-container--default .select2-results__option {
        padding: 10px 14px;
        font-size: 15px;
        color: #333;
        background-color: #fff;
        transition: background 0.2s ease-in-out;
        border-bottom: 1px solid #f0f0f0;
    }

    /* Hover efekti: Mor tema */
    .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background: linear-gradient(135deg, #ffffff, #F0F5F9) !important;
        color: #fff !important;
        font-weight: 600;
        border-radius: 6px;
        outline: none !important;
    }

    /* Seçili olan öğe */
    .select2-container--default .select2-results__option[aria-selected="true"] {
        background-color: #F0F5F9 !important;
        color: #222 !important;
        font-weight: 500;
        outline: none !important;
    }

    /* Dropdown kutusu */
    .select2-container--default .select2-dropdown {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', sans-serif;
    }

    /* Dropdown arama kutusu */
    .select2-container--default .select2-search--dropdown .select2-search__field {
        padding: 8px 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 14px;
        margin-bottom: 8px;
    }

    /* Mavi odak çizgilerini kaldır */
    .select2-container--default .select2-selection--multiple:focus,
    .select2-container--default .select2-selection--single:focus,
    .select2-container--default .select2-dropdown:focus,
    .select2-container--default .select2-selection:focus-visible {
        outline: none !important;
        border-color: #F0F5F9 !important;
        box-shadow: none !important;
    }

    .empty-placeholder {
        text-align: center;
        padding: 30px 20px;
        color: #666;
        font-size: 16px;
        background: #fafafa;
        border-radius: 12px;
        box-shadow: inset 0 0 10px rgba(0,0,0,0.03);
    }

        .empty-placeholder i {
            font-size: 32px;
            color: #ccc;
        }

    .customf-inline-inputs {
        display: flex;
        justify-content: space-between;
        gap: 0%;
    }

        .customf-inline-inputs input[type="number"],
        .customf-inline-inputs input[type="datetime-local"] {
            flex: 1;
            width: 48%;
            display: inline-block;
            margin-right: 4%;
        }

    .customf-input-group input[type="datetime-local"]:last-child,
    .customf-input-group input[type="number"]:last-child {
        margin-right: 0;
    }

    .btn {
        transition: transform .12s ease, box-shadow .12s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(0,0,0,0.15);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(0,0,0,0.12);
        }

    .dt-elevated {
        border: 0;
        border-radius: 16px;
        background: rgba(255,255,255,.86);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        box-shadow: 0 1px 2px rgba(0,0,0,.06), 0 6px 16px rgba(27,31,35,.08), 0 18px 40px rgba(27,31,35,.10);
        position: relative;
        transition: transform .18s ease, box-shadow .18s ease;
    }

        .dt-elevated:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,.06), 0 12px 26px rgba(27,31,35,.10), 0 28px 60px rgba(27,31,35,.12);
        }

        /* Kartın altında yumuşak “hale” */
        .dt-elevated::after {
            content: "";
            position: absolute;
            inset: auto 8% -14px 8%;
            height: 28px;
            background: radial-gradient(ellipse at center, rgba(0,0,0,.16) 0%, rgba(0,0,0,0) 70%);
            filter: blur(8px);
            pointer-events: none;
        }

    /* Tablo görünümü */
    .dt-pretty {
        border-radius: 12px;
        overflow: hidden;
        background: rgba(255,255,255,.92);
    }

        .dt-pretty thead th {
            position: sticky;
            top: 0;
            z-index: 2;
            background: inherit !important; /* THEAD'in arkaplanını aynen al */
            background-color: inherit !important;
            color: inherit !important; /* text-white devralsın */
            box-shadow: 0 1px 0 rgba(0,0,0,.06);
            backdrop-filter: none;
            -webkit-backdrop-filter: none;
        }

        /* Güvenlik için: thead'e bg-info verilmişse yazılar beyaz kalsın */
        .dt-pretty thead.bg-info th {
            color: #fff !important;
        }

        .dt-pretty td, .dt-pretty th {
            border-color: #eef2f7 !important;
        }

        .dt-pretty tbody tr {
            transition: transform .12s ease, box-shadow .12s ease, background .12s ease;
        }

            .dt-pretty tbody tr:hover {
                background: #f8fbff !important;
                transform: translateY(-1px);
                box-shadow: 0 6px 14px rgba(30,41,59,.06);
            }

    /* Üst bar (arama, buttons) ufak yükselti */
    .dataTables_wrapper .dt-buttons .btn,
    .dataTables_wrapper .dataTables_filter input {
        border-radius: 10px !important;
        border: 1px solid #e6e9f0 !important;
        box-shadow: 0 2px 8px rgba(0,0,0,.06);
    }

    /* Perspectif hissi (opsiyonel ama hoş) */
    .dt-float {
        transform: translateZ(0);
        perspective: 1200px;
    }
    /* Datatables butonları: görünüm + animasyon */
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
        position: relative;
        overflow: hidden; /* hover parıltısı için */
        background: linear-gradient(135deg, #4e73df, #224abe);
        color: #fff !important;
        border: none !important;
        border-radius: 10px !important;
        padding: 10px 14px !important;
        font-weight: 600 !important;
        line-height: 1 !important;
        box-shadow: 0 8px 20px rgba(78,115,223,0.25);
        transition: transform .12s ease, box-shadow .12s ease, filter .18s ease;
    }

        /* İkon ile metin arası boşluk */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy i,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button i {
            margin-right: 6px;
        }

        /* Hover/active durumları */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(78,115,223,0.35);
        }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(78,115,223,0.25);
        }

        /* Hover’da hafif “parıltı” geçişi */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy::after,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(120deg, transparent 0%, rgba(255,255,255,.20) 20%, transparent 40%);
            transform: translateX(-120%);
            transition: transform .55s ease;
            border-radius: inherit;
            pointer-events: none;
        }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover::after,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover::after {
            transform: translateX(120%);
        }

    /* Mavi odak halkasını/outline'ı KALDIR */
    .dataTables_wrapper .dt-buttons .dt-button:focus,
    .dataTables_wrapper .dt-buttons .dt-button:focus-visible,
    .dataTables_wrapper .dt-buttons .dt-button:active:focus {
        outline: none !important;
        box-shadow: none !important;
    }

    /* Bazı tarayıcılar için iç odak kenarlığı */
    .dataTables_wrapper .dt-buttons .dt-button::-moz-focus-inner {
        border: 0;
    }

    /* Datatables buton grubu taşmasın diye */
    .dataTables_wrapper .dt-buttons {
        display: flex;
        gap: 8px;
        overflow: visible; /* rozet ve parıltı taşarsa kesilmesin */
    }

        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            padding-right: 28px !important; /* rozet için sağdan yer */
        }

    .enhanced-search-box button:hover,
    .enhanced-search-box button:focus {
        background-color: #007bff !important; /* normal rengi koru */
        color: #fff !important;
    }

    /* DataTables butonları (Filtre / Copy) */
    .dataTables_wrapper .dt-buttons .dt-button:hover,
    .dataTables_wrapper .dt-buttons .dt-button:focus {
        background: linear-gradient(135deg, #4e73df, #224abe) !important;
        color: #fff !important;
        filter: none !important;
    }
    /* Pagination: temel görünüm */
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        /* Varsayılan hover’daki siyah kutuyu iptal et ve yumuşak bir hover ver */
        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(78,115,223,.12) !important; /* hafif mavi */
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

        /* Aktif sayfa (current) */
        .dataTables_wrapper .dataTables_paginate .paginate_button.current,
        .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
            background: linear-gradient(135deg, #4e73df, #224abe) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(78,115,223,.25) !important;
        }

        /* Disabled (önceki/sonraki pasif) */
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled,
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover {
            background: transparent !important;
            border-color: transparent !important;
            color: #999 !important;
            box-shadow: none !important;
        }

        /* Focus halka kaldır */
        .dataTables_wrapper .dataTables_paginate .paginate_button:focus {
            outline: none !important;
            box-shadow: none !important;
        }

    .badge-custom {
        font-size: 0.85rem;
        font-weight: 600;
        padding: 6px 10px;
        border-radius: 12px;
        color: #fff !important; /* ✅ Yazıyı hep beyaz yap */
    }

    .badge-overdue {
        background: linear-gradient(45deg, #e53935, #b71c1c);
    }

    .badge-warning-custom {
        background: linear-gradient(45deg, #fbc02d, #f57f17);
    }

    .badge-success-custom {
        background: linear-gradient(45deg, #43a047, #1b5e20);
    }

    .badge-secondary-custom {
        background: linear-gradient(45deg, #757575, #424242);
    }

    .btn-return {
        font-size: 0.85rem;
        font-weight: 600;
        padding: 6px 12px; /* ✅ badge ile aynı yükseklik */
        border-radius: 12px; /* ✅ daha yuvarlak görünüm */
        display: inline-flex;
        align-items: center;
        gap: 6px; /* ikon ile yazı arası boşluk */
    }
    /* === Sabit ölçülü "pill" görünüm (badge + butonlar için) === */
    .pill-fixed {
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        height: 34px; /* sabit yükseklik */
        min-width: 160px; /* sabit genişlik */
        padding: 0 12px; /* iç boşluk */
        border-radius: 999px; /* tam kapsül */
        font-size: 0.85rem;
        font-weight: 700;
        white-space: nowrap;
    }

    /* Mevcut rozetlerin hepsi için sabit ölçü + beyaz yazı */
    .badge-custom {
        color: #fff !important;
    }

        .badge-custom.pill-fixed { /* rozetlere sabit boyut ver */
            line-height: 1 !important;
        }

    /* "… gün kaldı" ile aynı renk tonunda iade butonu */
    .btn-return {
        border: none;
        box-shadow: 0 6px 14px rgba(27, 94, 32, .25);
    }

        .btn-return.btn-success-match, .btn-return.btn-success {
            background: linear-gradient(45deg, #43a047, #1b5e20) !important; /* badge-success-custom */
            color: #fff !important;
        }

        .btn-return.pill-fixed {
            height: 34px;
            min-width: 160px;
            border-radius: 999px;
            gap: 6px;
        }

    /* Var olan rozet tonları (değiştirmiyoruz) */
    .badge-overdue {
        background: linear-gradient(45deg, #e53935, #b71c1c);
    }

    .badge-warning-custom {
        background: linear-gradient(45deg, #fbc02d, #f57f17);
    }

    .badge-success-custom {
        background: linear-gradient(45deg, #43a047, #1b5e20);
    }

    .badge-secondary-custom {
        background: linear-gradient(45deg, #757575, #424242);
    }

    /* === YENİ: Kalan Gün sütunu için özel renkler === */
    /* Kalan Gün sütununda "İade edildi" (nötr-mavi) */
    .badge-returned-kg {
        background: linear-gradient(45deg, #5C6BC0, #283593); /* indigo ton */
        color: #fff !important;
    }
    /* Kalan Gün sütununda "Son teslim yok" (mor) */
    .badge-noduedate-kg {
        background: linear-gradient(45deg, #8E24AA, #4A148C); /* mor ton */
        color: #fff !important;
    }

    .pill-fixed {
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        height: 28px; /* 34px -> 28px yaptım */
        min-width: 120px; /* 160px -> 120px yaptım */
        padding: 0 10px; /* padding biraz küçültüldü */
        border-radius: 999px;
        font-size: 0.75rem; /* Yazı biraz küçültüldü */
        font-weight: 600;
        white-space: nowrap;
    }

    /* İade et butonu da aynı ölçüde olsun */
    .btn-return.pill-fixed {
        height: 28px;
        min-width: 120px;
        font-size: 0.75rem;
        padding: 0 10px;
        gap: 4px; /* ikon ve yazı arası daha dar */
    }

    .chip-pill {
        --bg: #f8fafc;
        --fg: #334155;
        --ring: rgba(2,6,23,.06);
        --glow: rgba(2,132,199,0);
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        font-weight: 700;
        font-size: .78rem;
        line-height: 1;
        padding: .48rem .72rem;
        border-radius: 999px;
        background: var(--bg);
        color: var(--fg);
        border: 1px solid var(--ring);
        box-shadow: 0 4px 14px var(--glow);
        transition: transform .12s ease, box-shadow .12s ease, background .12s ease, color .12s ease, border-color .12s ease;
        white-space: nowrap;
    }

        .chip-pill .dot {
            width: .5rem;
            height: .5rem;
            border-radius: 999px;
            display: inline-block;
            background: currentColor;
            box-shadow: 0 0 0 3px color-mix(in oklab, currentColor 20%, transparent);
        }

        .chip-pill:hover {
            transform: translateY(-1px);
            box-shadow: 0 10px 22px var(--glow);
        }

        /* küçük boy */
        .chip-pill.sm {
            font-size: .74rem;
            padding: .36rem .6rem;
        }

        /* durum temaları */
        .chip-pill.is-overdue { /* gecikmiş (kırmızı) */
            --bg: color-mix(in oklab, #ef4444 14%, white);
            --fg: #7f1d1d;
            --ring: rgba(239,68,68,.22);
            --glow: rgba(239,68,68,.18);
        }

        .chip-pill.is-today { /* son gün (amber) */
            --bg: color-mix(in oklab, #f59e0b 14%, white);
            --fg: #7c2d12;
            --ring: rgba(245,158,11,.22);
            --glow: rgba(245,158,11,.16);
        }

        .chip-pill.is-left { /* gün kaldı (yeşil) */
            --bg: color-mix(in oklab, #22c55e 14%, white);
            --fg: #166534;
            --ring: rgba(34,197,94,.22);
            --glow: rgba(34,197,94,.16);
        }

        .chip-pill.is-noduedate { /* son teslim yok (mor) */
            --bg: color-mix(in oklab, #a78bfa 14%, white);
            --fg: #4c1d95;
            --ring: rgba(167,139,250,.22);
            --glow: rgba(167,139,250,.16);
        }

        .chip-pill.is-returned { /* iade edildi (indigo) */
            --bg: color-mix(in oklab, #60a5fa 14%, white);
            --fg: #1e3a8a;
            --ring: rgba(59,130,246,.22);
            --glow: rgba(59,130,246,.16);
        }
        /* === CHIP'LERİ SABİT BOYUTTA TUT === */
        .chip-pill.sm {
            width: 120px; /* hepsi aynı genişlik */
            height: 28px; /* hepsi aynı yükseklik */
            padding: 0 10px; /* metin/ikon taşıyan iç boşluk */
            justify-content: center; /* ortala */
            overflow: hidden; /* taşmaları gizle */
            text-overflow: ellipsis; /* metin taşarsa üç nokta */
            white-space: nowrap; /* satır kırma */
            box-sizing: border-box; /* padding genişliği etkilemesin */
        }

            .chip-pill.sm i,
            .chip-pill.sm .dot {
                flex: 0 0 auto; /* ikon/dot sabit kalsın */
            }
</style>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12 d-flex justify-content-between align-items-center">
            <h4 class="card-title mb-0">📦 Ödünç Alınan Kitaplar</h4>
            <a class="btn btn-success btn-rounded waves-effect waves-light" asp-action="Create">
                <i class="fa fa-plus mr-1"></i> Yeni Ödünç Ver
            </a>
        </div>
    </div>

    <div class="card dt-elevated">
        <div class="card-body">
            <div class="table-responsive dt-float">
                <table id="borrowTable" class="table table-bordered table-hover table-striped dt-pretty">
                    <thead class="bg-info text-white">
                        <tr>
                            <th>Üye</th>
                            <th>Kitap</th>
                            <th>Alış Tarihi</th>
                            <th>İade Tarihi</th>
                            <th>Kalan Gün</th>
                            <th>Sayı</th>
                            <th class="text-center">İşlemler</th>
                        </tr>
                    </thead>
                   @* <tbody>
                        @foreach (var item in Model)
                        {
                            var today = DateTime.Now.Date;
                            <tr>
                                <td>@item.Member.Name</td>
                                <td>@item.Book.Title</td>
                                <td>@item.BorrowDate.ToString("dd.MM.yyyy HH:mm")</td>
                                <td>
                                    @(
                                                                    item.ReturnDate.HasValue
                                                                    ? item.ReturnDate.Value.ToString("dd.MM.yyyy")
                                                                    : (item.DueDate.HasValue ? item.DueDate.Value.ToString("dd.MM.yyyy") : "—")
                                                                    )
                            </td>

                                <td>
                             
                                    @if (!item.ReturnDate.HasValue)
                                    {
                                        // Henüz iade edilmedi
                                        if (item.DueDate.HasValue)
                                        {
                                            var kalanGun = (item.DueDate.Value.Date - today).Days;
                                            if (kalanGun < 0)
                                            {
                                                <span class="chip-pill sm is-overdue">
                                                    <i class="fas fa-exclamation-triangle me-1"></i>@Math.Abs(kalanGun) gün gecikti
                                                </span>
                                            }
                                            else if (kalanGun == 0)
                                            {
                                                <span class="chip-pill sm is-today">
                                                    <span class="dot"></span>Son gün
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="chip-pill sm is-left">
                                                    <i class="fas fa-clock me-1"></i>@kalanGun gün kaldı
                                                </span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="chip-pill sm is-noduedate">
                                                <i class="fas fa-infinity me-1"></i>Son teslim yok
                                            </span>
                                        }
                                    }
                                    else
                                    {
                                        var sure = (item.ReturnDate.Value.Date - item.BorrowDate.Date).Days;
                                        <span class="chip-pill sm is-returned">
                                            <i class="fas fa-check-circle me-1"></i>İade edildi (@sure gün)
                                        </span>
                                    }
                                </td>
                                <td class="text-center">
                                    @if (!item.ReturnDate.HasValue)
                                    {
                                        <a asp-action="Return" asp-route-id="@item.BorrowId"
                                           class="btn btn-return btn-success-match pill-fixed waves-effect waves-light">
                                            <i class="fa fa-undo"></i> İade Et
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="badge badge-custom badge-secondary-custom pill-fixed">İade Edildi</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>*@
                </table>
            </div>
        </div>
    </div>
</div>

<!-- 🔍 Filtreleme Modalı -->
<div id="customf-filter-modal" class="customf-modal">
    <div class="customf-modal-content">
        <div class="customf-modal-header">
            <div class="customf-modal-title">
                <i class="fas fa-filter"></i>
                <h5>Filtreleme Seçenekleri</h5>
            </div>
            <span class="customf-close" title="Kapat">
                <i class="fas fa-times"></i>
            </span>
        </div>

        <!-- Dropdown üstte ve sabit -->
        <div class="customf-modal-dropdown">
            <div class="customf-input-group">
                <label for="columnSelector">Filtrelenecek Sütunlar</label>
                <select id="columnSelector" class="select2-column-selector" style="width: 100%;" multiple></select>
            </div>
        </div>

        <!-- Scroll edilebilir içerik -->
        <div class="customf-modal-body">
            <form id="customf-dynamic-filter-form"></form>
        </div>

        <div class="customf-modal-footer">
            <div class="customf-button-group">
                <button id="customf-clear-filter" class="customf-btn customf-clear-btn">Temizle</button>
                <button id="customf-apply-filter" class="customf-btn customf-filter-btn">Filtrele</button>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
            let previousFilterValues = {};
            let selectedColumns = [];
            let columnTypesCache = {}; // Her sütunun tipini (date, number, text) önbelleğe almak için 
            let parsedDatesCache = []; // Sadece tarih sütunlarındaki dönüştürülmüş Date objelerini tutmak için 
            let textCache = [];   // Hücrelerin HTML'siz düz metni
            let canonCache = [];  // TR-normalize edilmiş kanonik metin
            let numericCache = [];
            $(document).ready(function () {
                // Örnek veri seti oluşturucu

                        function generateMockData(rowCount = 5000) {
          const firstNames = ["Ahmet","Mehmet","Ayşe","Fatma","Zeynep","Mustafa","Emre","Elif","Cem","Yılmaz","Hakan","İlkan","Volkan"];
          const lastNames  = ["Yılmaz","Kaya","Demir","Çelik","Şahin","Arslan","Güzel","Sabun"];
          const bookTitles = ["Suç ve Ceza","Sefiller","1984","Hayvan Çiftliği","Küçük Prens","Dönüşüm","Satranç","Beyaz Diş","İnce Memed","Anna Karenina","Anna Karenina2"];

          const data = [];
          const currentYear = new Date().getFullYear();

          for (let i = 0; i < rowCount; i++) {
            const day = Math.floor(Math.random() * 28) + 1;
            const month = Math.floor(Math.random() * 12) + 1;
            const year = currentYear - Math.floor(Math.random() * 5);
            const hours = Math.floor(Math.random() * 24);
            const minutes = Math.floor(Math.random() * 60);
            const seconds = Math.floor(Math.random() * 60);

            const borrowDateStr =
              `${day.toString().padStart(2,'0')}.${month.toString().padStart(2,'0')}.${year} ` +
              `${hours.toString().padStart(2,'0')}:${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2,'0')}`;

            const returnDateStr = Math.random() > 0.3
              ? `${Math.floor(Math.random() * 28) + 1}.${month}.${year}`
              : "30.12.2024";

            // ↙️ yeni: Sayı (negatif/ondalıklı da gelebilir)
            const sayiVal = parseFloat(((Math.random() * 1200) - 200).toFixed(2));

            // “Kalan Gün” şimdilik placeholder (istersen sonra chip’lerle süsleriz)
            const kalanGunCell = "—";

            const actionCell = Math.random() > 0.3
              ? '<span class="badge bg-secondary text-white">İade Edildi</span>'
              : '<button class="btn btn-success btn-sm">İade Et</button>';

            // 7 kolon: Üye, Kitap, Alış, İade, Kalan Gün, Sayı, İşlemler
            data.push([
              `${firstNames[Math.floor(Math.random()*firstNames.length)]} ${lastNames[Math.floor(Math.random()*lastNames.length)]}`,
              bookTitles[Math.floor(Math.random()*bookTitles.length)],
              borrowDateStr,
              returnDateStr,
              kalanGunCell,
              sayiVal,
              actionCell
            ]);
          }
          return data;
        }
                // DataTable başlatma
                const table = $('#borrowTable').DataTable({
                    responsive: true,
                    autoWidth: false,
                    lengthChange: true,
                    deferRender: true,
                    order: [],
                    language: {
                        url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json"
                    },
                    lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tümü"]],
                    pageLength: 10,
                    paging: true,
                    buttons: [
                        {
                            extend: "copy",
                            text: '<i class="fas fa-copy"></i>',
                            titleAttr: "Kopyala",
                            className: "btn-copy"
                        },
                        {
                            text: '<i class="fas fa-filter"></i> Filtrele',
                            titleAttr: "Filtreleme seçeneklerini aç",
                            className: "customf-filter-button",
                            action: function () {

                                    populateColumnSelector("borrowTable");
                                    generateCustomfFilterForm("borrowTable");
                                    $('#customf-filter-modal').show();
                                    activateSelect2();
                            }
                        }
                    ],
                    dom: 'Bfrtip',
                    data: generateMockData(5000),
                    columns: [
                        { data: 0, title: "Üye" },
                        { data: 1, title: "Kitap" },
                        { data: 2, title: "Alış Tarihi" },
                        { data: 3, title: "İade Tarihi" },
                             { data: 4, title: "Kalan Gün" },
        { data: 5, title: "Sayı" },             // ← sayı kolonu
        {
          data: 6,
          title: "İşlemler",
          orderable: false,
          render: function (data) { return data; }
        }
                    ]

                });

                // Tablo yüklendiğinde sütun tiplerini ve tarihleri önbelleğe al
                cacheColumnDataAndTypes("borrowTable");
            });


                         function stripHtml(x){
          const html = String(x ?? '');
          const spaced = html.replace(/>(\s*)</g, '><').replace(/></g, '>\u2009<');
          const div = document.createElement('div');
          div.innerHTML = spaced;
          return (div.textContent || '')
            .replace(/\u00A0/g, ' ')
            .replace(/([a-zğüşiöç])([A-ZĞÜŞİÖÇ])/g, '$1 $2') // ← ek: a…z + Türkçe harf → BÜYÜK geçişine boşluk
            .replace(/\s+/g, ' ')
            .trim();
        }
                function cellToText(cell) {
            if (cell == null) return '';


            if (cell instanceof Date && !isNaN(cell)) return cell.toISOString();


            if (typeof cell === 'object') {
                if ('value' in cell) return cellToText(cell.value);
                if ('text'  in cell) return cellToText(cell.text);
                if ('name'  in cell) return cellToText(cell.name);
                if ('title' in cell) return cellToText(cell.title);
                if ('html'  in cell) return stripHtml(cell.html);
                return stripHtml(cell);
            }


            return stripHtml(cell);
        }
          function normTR(s){
          if (s == null) return '';
          let t = s.toString().normalize('NFKD').replace(/[\u0300-\u036f]/g,'');
          // Türkçe I ailesini tek tipleştir: İ, I, ı -> i
          t = t.replace(/[İI]/g,'I').replace(/ı/g,'i');
          t = t.toLowerCase(); // locale bağımsız
          return t;
        }
                function extractDataOrder(html){
          const m = String(html || '').match(/data-order=["']([^"']+)["']/i);
          return m ? m[1] : null;
        }
                function buildTextAndCanonCaches(tableId){
          const api = $('#'+tableId).DataTable();
          const all = api.rows().data().toArray();
          const rowCount = all.length;
          const colCount = api.columns().header().toArray().length;

          textCache  = new Array(rowCount);
          canonCache = new Array(rowCount);

          for(let r=0; r<rowCount; r++){
            textCache[r]  = new Array(colCount);
            canonCache[r] = new Array(colCount);
            for(let c=0; c<colCount; c++){
              // 1 defa: mevcut cellToText (yavaş ama tek sefer)
              const txt = cellToText(all[r][c]);
              textCache[r][c]  = txt;
              canonCache[r][c] = canon(txt);
            }
          }
        }
                function activateSelect2() {
            if ($('#columnSelector').data('select2')) {
                $('#columnSelector').select2('destroy');
            }
            if ($('#columnSelector option[value="select-all-option"]').length === 0) {
                $('#columnSelector').prepend('<option value="select-all-option">Tümünü Seç</option>');
            }
            $('#columnSelector').select2({
                placeholder: "Filtrelenecek sütunları seçin...",
                width: '100%',
                multiple: true,
                dropdownParent: $('#customf-filter-modal .customf-modal-content'),
                templateResult: function (data) {
                    if (data.id === 'select-all-option') {
                        return $('<span><i class="fas fa-check-double"></i> Tümünü Seç</span>');
                    }
                    return data.text;
                },
                templateSelection: function (data) {
                    if (data.id === 'select-all-option') {
                        const totalSelectableOptions = $('#columnSelector option').not('[value="select-all-option"]').length;
                        const currentSelectedCount = $('#columnSelector').val() ? $('#columnSelector').val().length : 0;
                        if (currentSelectedCount === totalSelectableOptions) {
                            return `Tümü Seçili (${totalSelectableOptions})`;
                        }
                        return `(${currentSelectedCount}/${totalSelectableOptions}) Sütun Seçili`;
                    }
                    return data.text;
                }
            });
            $('#columnSelector').on('select2:select', function (e) {
                const selectedId = e.params.data.id;
                if (selectedId === 'select-all-option') {
                    const $selector = $(this);
                    const allOptions = $selector.find('option').not('[value="select-all-option"]').map(function () {
                        return $(this).val();
                    }).get();
                    $selector.val(allOptions).trigger('change');
                    $selector.select2('close');
                }
            });
            $('#columnSelector').on('select2:unselect', function (e) {
                const unselectedId = e.params.data.id;
                if (unselectedId === 'select-all-option') {
                    $(this).val(null).trigger('change');
                }
            });
        }

        function populateColumnSelector(tableId) {
            const table = $(`#${tableId}`).DataTable();
            const columns = table.columns().header().toArray();
            const selector = $('#columnSelector');
            selector.empty();
            columns.forEach((col, index) => {
                const colName = $(col).text().trim();
                if (colName && colName !== "İşlemler") {

                    const selectedAttr = previousFilterValues.hasOwnProperty(index) ? 'selected' : '';
                    selector.append(`<option value="${index}" ${selectedAttr}>${colName}</option>`);
                }
            });
            selector.trigger('change.select2');
            const totalSelectableOptions = $('#columnSelector option').not('[value="select-all-option"]').length;
            const currentSelectedCount = Object.keys(previousFilterValues).length;
            if (currentSelectedCount > 0 && currentSelectedCount === totalSelectableOptions) {
                selector.find('option[value="select-all-option"]').prop('selected', true);
                selector.trigger('change.select2');
            }
        }

         function generateCustomfFilterForm(tableId) {
             try {
                 const table = $(`#${tableId}`).DataTable();
                 const columns = table.columns().header().toArray();
                 const selectedIndexes = $('#columnSelector').val()?.map(Number) || [];
                 let formHtml = "";
                 selectedIndexes.forEach(index => {
                     try {
                         const col = columns[index];
                         const colName = $(col).text().trim();
                         if (!colName || colName === "İşlemler") return;

                         const columnType = columnTypesCache[index] || 'text';

                         const prev = previousFilterValues[index] || {};

                         formHtml += `<div class="customf-input-group"><label>${colName}</label>`;
                         if (columnType === 'date') {
                             const startVal = (prev['date'] && prev['date'].start) ? prev['date'].start : '';
                             const endVal = (prev['date'] && prev['date'].end) ? prev['date'].end : '';
                             formHtml += `<div class="customf-inline-inputs">`;
                             formHtml += `<input type="datetime-local" class="filter-input" data-type="date-start" data-index="${index}" value="${startVal}">`;
                             formHtml += `<input type="datetime-local" class="filter-input" data-type="date-end" data-index="${index}" value="${endVal}">`;
                             formHtml += `</div>`;
                         console.log("[DEBUG] Tarih Input Değerleri:",
                              "Sütun:", colName,
                              "Start:", startVal,
                              "End:", endVal
                          );
                         } else if (columnType === 'number') {
                             const min = (prev['range'] && !isNaN(prev['range'][0])) ? prev['range'][0] : '';
                             const max = (prev['range'] && !isNaN(prev['range'][1])) ? prev['range'][1] : '';
                             formHtml += `<div class="customf-inline-inputs">`;
                             formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Min" value="${min}">`;
                             formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Max" value="${max}">`;
                             formHtml += `</div>`;
                         } else {
                                                                 const colData = table.column(index).data().toArray();
        const sampleIdx = stratifiedIndices(colData.length, 400);
        const uniqueValues = new Set();
        for (const ii of sampleIdx) uniqueValues.add(cellToText(colData[ii]));

        // number kolonlarda asla select üretme
        const useSelect = (columnTypesCache[index] !== 'number') && uniqueValues.size > 0 && uniqueValues.size <= 10;

        if (useSelect) {
          formHtml += `<select class="filter-input" data-type="select" data-index="${index}">
                         <option value="">Tümü</option>`;
          [...uniqueValues].forEach(val => {
            const selected = (prev['select'] === val) ? 'selected' : '';
            formHtml += `<option value="${val}" ${selected}>${val}</option>`;
          });
          formHtml += `</select>`;
        } else {
          const val = prev['text'] || '';
          formHtml += `<input type="text" class="filter-input" data-type="text" data-index="${index}" placeholder="Metin giriniz" value="${val}">`;
        }
                         }
                         formHtml += `</div>`;
                     } catch (e) {
                         console.error(`Sütun işleme hatası (index ${index}):`, e);
                     }
                 });
                 $('#customf-dynamic-filter-form').html(formHtml || getEmptyPlaceholder());
             } catch (e) {
                 console.error("Filtre formu oluşturma hatası:", e);
                 $('#customf-dynamic-filter-form').html('<div class="alert alert-danger">Filtre oluşturulurken hata oluştu</div>');
             }
         }

        function getEmptyPlaceholder() {
            return `
                        <div class="empty-placeholder">
                            <i class="fas fa-sliders-h"></i><br>
                            <b>Filtrelemek istediğiniz sütunları seçin.</b>
                            <div style="font-size:13px; margin-top: 6px;">Yukarıdaki listeden bir veya daha fazla sütun seçin.</div>
                        </div>
                    `;
        }

        $('#customf-clear-filter').on('click', function () {
            $('#columnSelector').val(null).trigger('change');
            previousFilterValues = {};
            generateCustomfFilterForm("borrowTable");
            $.fn.dataTable.ext.search = [];
            $('#borrowTable').DataTable().draw();
        });

        $(document).on('change', '#columnSelector', function () {
            setTimeout(() => {
                generateCustomfFilterForm("borrowTable");
            }, 100);
        });

        $('#customf-apply-filter').on('click', function () {
                console.log("[DEBUG] Uygulanan Filtreler:", previousFilterValues);
            try {
                const table = $('#borrowTable').DataTable();
                selectedColumns = $('#columnSelector').val()?.map(Number) || [];


                const currentActiveFilters = {};

                $('.filter-input').each(function () {
                    const type = $(this).data('type');
                    const index = parseInt($(this).data('index'));
                    const value = $(this).val().trim();

                    if (value) {
                        if (!currentActiveFilters[index]) currentActiveFilters[index] = {};
                        if (type === 'range') {
                            const inputs = $(`input[data-type="range"][data-index="${index}"]`);
                           const vMin = parseLocaleNumber(inputs.eq(0).val());
        const vMax = parseLocaleNumber(inputs.eq(1).val());
        currentActiveFilters[index][type] = [
          Number.isFinite(vMin) ? vMin : -Infinity,
          Number.isFinite(vMax) ? vMax :  Infinity
        ];
                        } else if (type === 'date-start' || type === 'date-end') {
                            if (!currentActiveFilters[index]['date']) currentActiveFilters[index]['date'] = { start: null, end: null };
                            if (type === 'date-start') currentActiveFilters[index]['date'].start = value;
                            if (type === 'date-end') currentActiveFilters[index]['date'].end = value;
                        } else {
                            currentActiveFilters[index][type] = value;
                        }
                    }
                });

                previousFilterValues = {};
                for (const index in currentActiveFilters) {
                    if (currentActiveFilters.hasOwnProperty(index)) {
                        previousFilterValues[index] = currentActiveFilters[index];
                    }
                }


                $.fn.dataTable.ext.search = [];

                          $.fn.dataTable.ext.search = [];
        $.fn.dataTable.ext.search.push(function (settings, rowData, dataIndex) {
          for (const index in previousFilterValues) {
            if (!previousFilterValues.hasOwnProperty(index)) continue;

            const colIndex = parseInt(index, 10);
            const fset     = previousFilterValues[index];   // o sütun için aktif filtreler
            const cellText  = textCache[dataIndex]?.[colIndex]  ?? '';
            const cellCanon = canonCache[dataIndex]?.[colIndex] ?? '';

            // 1) Tarih
            if (fset.date) {
              const start = fset.date.start ? new Date(fset.date.start) : null;
              const end   = fset.date.end   ? new Date(fset.date.end)   : null;
              const cellDate = parsedDatesCache[dataIndex]?.[colIndex] ?? null;
              if (!cellDate && (start || end)) return false;
              if (cellDate && start && cellDate.getTime() < start.getTime()) return false;
              if (cellDate && end   && cellDate.getTime() > end.getTime())   return false;
              continue;
            }

            // 2) Sayı aralığı
                 // 2) Sayı aralığı
        if (fset.range) {
          const num = numericCache[dataIndex]?.[colIndex];
          if (!Number.isFinite(num)) return false;      // sayı değilse ele
          if (num < fset.range[0] || num > fset.range[1]) return false;
          continue;
        }

            // 3) SELECT filtresi (formda select kullanıldıysa)
               if ('select' in fset) {
          const sel = fset.select;
          if (sel) {
            const f = canon(sel);                 // "İlkan Erdoğan" -> "ilkan erdogan"
            const p = escapeRegExp(f);
            let hay = cellCanon;                  // hücrenin kanonik hali

            // Arka arkaya tekrarlı aynı isimleri, arada boşluk olsa da olmasa da teke indir
            hay = hay.replace(new RegExp(`(?:${p})(?:\\s*${p})+`, 'g'), f);
            hay = hay.replace(/\s+/g, ' ').trim();

            const token = new RegExp(`(^|\\s)${p}(\\s|$)`);
            const match = token.test(hay);

            // DEBUG
            // console.log({ eslesme: match, normalizeFiltre: f, orijinalHucre: textCache[dataIndex][colIndex], temizlenmisHucre: hay });

            if (!match) return false;
          }
          continue;
        }


            // 4) Serbest metin
            if (fset.text) {
              const f = canon(fset.text);
              if (!cellCanon.includes(f)) return false;
              continue;
            }
          }
          return true;
        });


                table.draw();
                $('#customf-filter-modal').hide();
            } catch (e) {
                console.error("Filtre uygulama hatası:", e);
            }

                           console.log("[DEBUG] Filter applied. Remaining rows:",
            $('#borrowTable').DataTable().rows({ filter: 'applied' }).count()
        );

        });
                function isValidDate(val) {

            if (val instanceof Date && !isNaN(val)) return true;


            if (val == null || val === '') return false;


            if (typeof val !== 'string') val = cellToText(val);


            if (/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)) {
                return !isNaN(new Date(val));
            }


            const aspMatch = String(val).match(/\/Date\((\d+)\)\//);
            if (aspMatch) {
                return !isNaN(new Date(parseInt(aspMatch[1], 10)));
            }


            const trPatterns = [
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/,
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/
            ];
            for (const pattern of trPatterns) {
                if (pattern.test(val)) return true;
            }

            return false;
        }

                       function parseDate(val) {
            if (val instanceof Date && !isNaN(val)) return val;
            if (val == null) return null;
            if (typeof val !== 'string') val = cellToText(val);
            if (!val) return null;


            if (/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)) {
                const d = new Date(val);
                return isNaN(d) ? null : d;
            }


            const aspMatch = val.match(/\/Date\((\d+)\)\//);
            if (aspMatch) return new Date(parseInt(aspMatch[1], 10));


            const trFormats = [
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/, fn: m => new Date(+m[3], +m[2]-1, +m[1], +m[4], +m[5], +m[6]) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,          fn: m => new Date(+m[3], +m[2]-1, +m[1], +m[4], +m[5]) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/,                              fn: m => new Date(+m[3], +m[2]-1, +m[1]) }
            ];
            for (const { regex, fn } of trFormats) {
                const match = val.match(regex);
                if (match) {
                    const d = fn(match);
                    return isNaN(d) ? null : d;
                }
            }

            return null;
        }


                               function cacheColumnDataAndTypes(tableId) {
          const table = $(`#${tableId}`).DataTable();
          const allData = table.rows().data().toArray();
          const columnsCount = table.columns().header().toArray().length;

          columnTypesCache = {};
          parsedDatesCache = [];

          // 1) HEADER ADINA GÖRE ÖN İŞARETLEME (tarih)
          table.columns().every(function (index) {
            const colHeader = this.header();
            const colName = $(colHeader).text().trim().toLowerCase();
            if (colName.includes('tarih') || colName.includes('date')) {
              columnTypesCache[index] = 'date';
            }
          });

          // 2) DOM'da td/data-order taraması → tarih kolonları
          for (let i = 0; i < columnsCount; i++) {
            if (columnTypesCache[i]) continue; // header zaten 'date' işaretlediyse atla

            let hasDomOrderDate = false;

            $(table.column(i).nodes()).each(function () {
              let v = this.getAttribute('data-order') || $(this).data('order');
              if (!v) {
                const inner = this.querySelector('[data-order]');
                if (inner) v = inner.getAttribute('data-order') || $(inner).data('order');
              }
              if (v && isValidDate(v)) {
                hasDomOrderDate = true;
                return false; // erken çık
              }
            });

            if (hasDomOrderDate) {
              columnTypesCache[i] = 'date';
            }
          }

          // 3) KALAN KOLONLAR İÇİN TİP TAHMİNİ (stratified örnekleme)
          for (let colIndex = 0; colIndex < columnsCount; colIndex++) {
            if (columnTypesCache[colIndex]) continue; // tarihleri atla

            const colHeader = table.columns().header()[colIndex];
            const headerName = $(colHeader).text().trim().toLowerCase();

            // Başlıktan güçlü sayı ipucu
            const headerLooksNumber = /(miktar|tutar|fiyat|adet|ücret|bakiye|bor[çc]|kredi|stok|\bid\b|\bno\b|say[ıi]s[ıi])/i.test(headerName);

            const colData = table.column(colIndex).data().toArray();
            const idxs = stratifiedIndices(colData.length, 600);

            let checked = 0, numberCount = 0, dateCount = 0;
            const uniqForSelect = new Set();

            for (const i of idxs) {
              const cell = colData[i];
              const txt  = cellToText(cell);
              if (txt) uniqForSelect.add(txt);
              checked++;

              if (isValidDate(txt)) { dateCount++; continue; }

              // Önce ortogonal (data-order/sort/value), yoksa görünen metinden yerel sayı ayrıştırma
              let n = getNumericOrtho(table, i, colIndex);
              if (!Number.isFinite(n)) n = parseLocaleNumber(txt);
              if (Number.isFinite(n)) numberCount++;
            }

            if (headerLooksNumber || (checked > 0 && numberCount / checked >= 0.75)) {
              columnTypesCache[colIndex] = 'number';
            } else if (checked > 0 && dateCount / checked >= 0.60) {
              columnTypesCache[colIndex] = 'date';
            } else {
              // Yalnızca gerçek metin kolonlarında düşük benzersiz sayıda ise select
              columnTypesCache[colIndex] = (uniqForSelect.size > 0 && uniqForSelect.size <= 10) ? 'select' : 'text';
            }
          }

                  // 3.5) SAYISAL CACHE OLUŞTUR
        numericCache = new Array(allData.length);
        for (let r = 0; r < allData.length; r++) {
          numericCache[r] = {};
          for (let c = 0; c < columnsCount; c++) {
            if (columnTypesCache[c] !== 'number') continue;

            let num = NaN;
            const cell = allData[r][c];

            // hızlı yol: zaten number ise direkt al
            if (typeof cell === 'number') {
              num = cell;
            } else {
              // ortogonal → sonra yerel parse (bir KEZ)
              let v = getNumericOrtho(table, r, c);
              if (!Number.isFinite(v)) v = parseLocaleNumber(cellToText(cell));
              if (Number.isFinite(v)) num = v;
            }
            numericCache[r][c] = num;
          }
        }
          // 4) parsedDatesCache: (1) DOM data-order → (2) orthogonal obj → (3) görünen metin
          for (let rowIndex = 0; rowIndex < allData.length; rowIndex++) {
            parsedDatesCache[rowIndex] = {};
            const row = allData[rowIndex];

            for (let colIndex = 0; colIndex < columnsCount; colIndex++) {
              if (columnTypesCache[colIndex] !== 'date') continue;

              const cell = row[colIndex];
              let d = null;

              // (1) DOM
              let rawOrder = getOrderFromDom(table, rowIndex, colIndex);
              if (rawOrder && isValidDate(rawOrder)) d = parseDate(String(rawOrder));

              // (2) orthogonal object
              if (!d && typeof cell === 'object' && cell) {
                const ortho = cell.sort ?? cell.order ?? cell.value ?? null;
                if (ortho && isValidDate(ortho)) d = parseDate(String(ortho));
              }

              // (3) görünen metin
              if (!d) {
                const txt = cellToText(cell);
                d = parseDate(txt);
              }
              parsedDatesCache[rowIndex][colIndex] = d || null;
            }
          }

          // Metin/canon cache’leri güncelle
          buildTextAndCanonCaches(tableId);

          console.log("[DEBUG] Column Types:", columnTypesCache);
          console.log("[DEBUG] parsedDatesCache Sample:", parsedDatesCache.slice(0, 5));
        { const api=$('#borrowTable').DataTable(), r=1, c=5; console.log('[DBG cell]',{row:r,col:c,name:$(api.columns().header()[c]).text().trim(),raw:api.rows().data().toArray()[r][c],text:textCache[r]?.[c],canon:canonCache[r]?.[c],num:numericCache[r]?.[c],date:parsedDatesCache[r]?.[c],order:getOrderFromDom(api,r,c)}); }
                }


         function escapeRegExp(s){
                     return (s||'').toString().replace(/[.*+?^${}()|[\]\\]/g,'\\$&');
                 }
         function getOrderFromDom(table, r, c) {
          const node = table.cell(r, c).node();
          if (!node) return null;

          let v = node.getAttribute('data-order') || $(node).data('order');
          if (!v) {
            const inner = node.querySelector('[data-order]');
            if (inner) v = inner.getAttribute('data-order') || $(inner).data('order');
          }
          return v ?? null;
        }
               const REBUILD_ON_DRAW = false;
        if (REBUILD_ON_DRAW) {
          $('#borrowTable').on('draw.dt', function () {
            buildTextAndCanonCaches('borrowTable');
          });
        }
          function canon(s){
          let t = cellToText(s ?? '');
          t = t.normalize('NFKD').replace(/[\u0300-\u036f]/g,'');
          t = normTR(t); // artık "İlkan" -> "ilkan", "Volkan" -> "volkan"
          t = t.replace(/[^a-z0-9]+/g,' ').replace(/\s+/g,' ').trim();
          return t;
        }
               function stripSpacesLike(s){ return (s||'').replace(/[\u00A0\u202F\u2007\u2009]/g,' '); } // NBSP ve benzerleri

        function parseLocaleNumber(raw){
          if (raw == null) return NaN;
          let t = cellToText(raw);
          t = stripSpacesLike(t).replace(/\s+/g,'');       // boşlukları at
          t = t.replace(/[%₺$€£]/g,'');                    // para/% sembolü
          t = t.replace(/\(([^)]+)\)/, '-$1');             // (1.500) -> -1.500

          // 1.234.567,89  -> 1234567.89
          if (/^-?\d{1,3}(\.\d{3})+(,\d+)?$/.test(t)) { t = t.replace(/\./g,'').replace(',', '.'); }
          // 1,234,567.89 -> 1234567.89
          else if (/^-?\d{1,3}(,\d{3})+(\.\d+)?$/.test(t)) { t = t.replace(/,/g,''); }
          // sadece virgül ondalık ise
          else if (t.indexOf(',') > -1 && t.indexOf('.') === -1) { t = t.replace(',', '.'); }

          const n = Number(t);
          return Number.isFinite(n) ? n : NaN;
        }

        function looksNumeric(raw){ return Number.isFinite(parseLocaleNumber(raw)); }

        // Hücredeki ortogonal (data-order / sort / value) değeri öncele
        function getNumericOrtho(api, r, c){
          const node = api.cell(r, c).node();
          let v = node?.getAttribute('data-order') || $(node).data('order') || null;
          if (!v) {
            const inner = node?.querySelector('[data-order]');
            if (inner) v = inner.getAttribute('data-order') || $(inner).data('order');
          }
          if (looksNumeric(v)) return parseLocaleNumber(v);

          const cell = api.rows().data().toArray()[r][c];
          if (cell && typeof cell === 'object') {
            const ortho = cell.sort ?? cell.order ?? cell.value;
            if (looksNumeric(ortho)) return parseLocaleNumber(ortho);
          }
          return NaN;
        }

        // Tüm tabloya yayılmış örneklem (ilk sayfa yanlılığını kırar)
        function stratifiedIndices(n, max=400){
          if (n <= 0) return [];
          const k = Math.min(max, n);
          const step = Math.max(1, Math.floor(n / k));
          const out = [];
          for (let i=0; i<n && out.length<k; i+=step) out.push(i);
          // sıralı bloklara karşı bir miktar rastgele örnek
          for (let j=0; j<Math.min(50, Math.floor(k/4)); j++) out.push(Math.floor(Math.random()*n));
          return [...new Set(out)];
        }
        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('customf-filter-modal');
            const closeBtn = document.querySelector('.customf-close');
            window.onclick = function (event) {
                if (event.target === modal) modal.style.display = 'none';
            };
            closeBtn.onclick = function () {
                modal.style.display = 'none';
            };
        });

    </script>
}

