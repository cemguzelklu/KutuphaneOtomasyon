@model List<KutuphaneOtomasyon.Models.Book>
@{
    ViewData["Title"] = "Kitap Listesi";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    /* ========= PALET ========= */
    :root {
        --ok: #16a34a;
        --ok-bg: rgba(22,163,74,.08);
        --warn: #f59e0b;
        --warn-bg: rgba(245,158,11,.10);
        --bad: #ef4444;
        --bad-bg: rgba(239,68,68,.10);
    }

    /* ========= FILTRELEME MODALI (GENEL) ========= */
    .customf-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        inset: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,.4);
        backdrop-filter: blur(2px);
        overflow: hidden;
    }

    .customf-modal-content {
        background: #fff;
        border-radius: 16px;
        width: 90%;
        max-width: 480px;
        margin: 5% auto;
        box-shadow: 0 25px 50px rgba(0,0,0,.1);
        font-family: 'Segoe UI',sans-serif;
        display: flex;
        flex-direction: column;
        max-height: 90vh;
        overflow: hidden;
        padding: 0;
    }

    .customf-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 32px 12px;
        border-bottom: 1px solid #eee;
        background: #fff;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .customf-modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .customf-modal-title i {
            font-size: 20px;
            color: #52616B;
            background: #fafafa;
            padding: 8px;
            border-radius: 50%;
            box-shadow: 0 0 4px rgba(0,0,0,.1);
        }

    .customf-modal-header h5 {
        font-size: 22px;
        margin: 0;
        font-weight: 600;
        color: #333;
    }

    .customf-modal-dropdown {
        padding: 16px 32px 30px;
        background: #fafafa;
        border-bottom: 1px solid #eee;
        position: sticky;
        top: 58px;
        z-index: 9;
    }

        .customf-modal-dropdown .customf-input-group {
            margin-bottom: 0;
        }

    .customf-modal-body {
        padding: 24px 32px;
        overflow-y: auto;
        flex: 1;
    }

    .customf-modal-footer {
        padding: 16px 32px 24px;
        border-top: 1px solid #eee;
        background: #fff;
    }

    .customf-close {
        float: right;
        font-size: 22px;
        font-weight: 600;
        color: #bbb;
        cursor: pointer;
        background: #f2f2f2;
        border-radius: 40%;
        padding: 1px 9px;
        transition: all .3s ease;
    }

        .customf-close:hover {
            background: #e0e0e0;
            color: #000;
        }

        .customf-close i {
            pointer-events: none;
        }

    /* ========= FORM ELEMANLARI ========= */
    .customf-input-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

        .customf-input-group label {
            font-weight: 500;
            margin-bottom: 6px;
            font-size: 15px;
            color: #444;
        }

        .customf-input-group input,
        .customf-input-group select {
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 10px;
            font-size: 15px;
            background: #fff;
            transition: all .25s ease-in-out;
            box-shadow: 0 1px 4px rgba(0,0,0,.05);
        }

            .customf-input-group input:focus,
            .customf-input-group select:focus {
                border-color: #C9D6DF;
                background: #fefefe;
                box-shadow: 0 0 0 3px rgba(201,214,223,1);
                outline: none;
            }

    .customf-inline-inputs {
        display: flex;
        justify-content: space-between;
        gap: 0%;
    }

        .customf-inline-inputs input[type="number"],
        .customf-inline-inputs input[type="datetime-local"] {
            flex: 1;
            width: 48%;
            display: inline-block;
            margin-right: 4%;
        }

    .customf-input-group input[type="datetime-local"]:last-child,
    .customf-input-group input[type="number"]:last-child {
        margin-right: 0;
    }

    .empty-placeholder {
        text-align: center;
        padding: 30px 20px;
        color: #666;
        font-size: 16px;
        background: #fafafa;
        border-radius: 12px;
        box-shadow: inset 0 0 10px rgba(0,0,0,.03);
    }

        .empty-placeholder i {
            font-size: 32px;
            color: #ccc;
        }

    /* ========= MODAL İÇİ BUTONLAR ========= */
    .customf-button-group {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

        .customf-button-group .customf-btn {
            flex: unset;
            text-align: center;
        }

    .customf-btn {
        color: #fff;
        font-size: 16px;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: background .1s ease;
    }

    .customf-filter-btn {
        width: 75%;
        background: linear-gradient(135deg,#C9D6DF,#52616B);
    }

        .customf-filter-btn:hover {
            background: linear-gradient(135deg,#52616B,#C9D6DF);
        }

    .customf-clear-btn {
        color: #000;
        width: 25%;
        background: linear-gradient(135deg,#ffffff,#C9D6DF);
    }

        .customf-clear-btn:hover {
            background: linear-gradient(135deg,#C9D6DF,#ffffff);
        }

        .customf-clear-btn:focus, .customf-filter-btn:focus {
            outline: none !important;
            box-shadow: 0 10px 30px rgba(0,0,0,.1);
            border: none !important;
        }

    /* ========= SELECT2 (GENEL NÖTR) ========= */
    .select2-container--default .select2-selection--multiple .select2-selection__choice {
        background: #F0F5F9 !important;
        color: #333;
        border: none !important;
        font-weight: 600;
        padding: 10px 12px;
        font-size: 1.05em;
        margin-top: 4px;
        margin-right: 6px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
        color: #666;
        font-size: 1.1em;
    }

        .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {
            color: #000;
        }

    .select2-container--default .select2-selection--multiple {
        min-height: 42px !important;
        height: auto !important;
        overflow-y: auto;
        max-height: 120px;
        padding-bottom: 6px;
        scrollbar-width: none;
        -ms-overflow-style: none;
        background: #fff !important;
        border-radius: 10px;
        border: 1px solid #ccc;
        padding: 6px;
        line-height: normal;
    }

        .select2-container--default .select2-selection--multiple::-webkit-scrollbar {
            display: none;
        }

    .select2-container--default .select2-results__option {
        padding: 10px 14px;
        font-size: 15px;
        color: #333;
        background: #fff;
        transition: background .2s ease-in-out;
        border-bottom: 1px solid #f0f0f0;
    }

    .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background: linear-gradient(135deg,#ffffff,#F0F5F9) !important;
        color: #fff !important;
        font-weight: 600;
        border-radius: 6px;
        outline: none !important;
    }

    .select2-container--default .select2-results__option[aria-selected="true"] {
        background: #F0F5F9 !important;
        color: #222 !important;
        font-weight: 500;
        outline: none !important;
    }

    .select2-container--default .select2-dropdown {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0,0,0,.1);
        font-family: 'Segoe UI',sans-serif;
    }

    .select2-container--default .select2-search--dropdown .select2-search__field {
        padding: 8px 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 14px;
        margin-bottom: 8px;
    }

    .select2-container--default .select2-selection--multiple:focus,
    .select2-container--default .select2-selection--single:focus,
    .select2-container--default .select2-dropdown:focus,
    .select2-container--default .select2-selection:focus-visible {
        outline: none !important;
        border-color: #F0F5F9 !important;
        box-shadow: none !important;
    }

    /* ========= FILTRELEME MODALI — NÖTR OVERRIDES (MOR YOK) ========= */
    #customf-filter-modal .customf-modal-content {
        background: #fff;
    }

    #customf-filter-modal .customf-modal-header {
        background: #fff;
        border-bottom: 1px solid #e5e7eb;
    }

    #customf-filter-modal .customf-modal-dropdown {
        background: #f7f8fa;
        border-bottom: 1px solid #e5e7eb;
    }

    #customf-filter-modal .customf-modal-body {
        background: #fff;
    }

    #customf-filter-modal .customf-modal-footer {
        background: #fff;
        border-top: 1px solid #e5e7eb;
    }

    #customf-filter-modal .customf-modal-title i {
        color: #52616B;
        background: #f3f4f6;
    }

    #customf-filter-modal .select2-container--default .select2-selection--multiple {
        background: #fff !important;
        border: 1px solid #ccd2da !important;
        border-radius: 10px !important;
    }

        #customf-filter-modal .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background: #eef2f7 !important;
            color: #334155 !important;
            border: none !important;
        }

    #customf-filter-modal .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background: #e6efff !important;
        color: #1f2937 !important;
        border-radius: 6px;
    }

    #customf-filter-modal .select2-container--default .select2-results__option[aria-selected="true"] {
        background: #f3f6fb !important;
        color: #1f2937 !important;
    }

    #customf-filter-modal .select2-container--default .select2-dropdown {
        border: 1px solid #ccd2da;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0,0,0,.08);
    }

    #customf-filter-modal .select2-container--default .select2-search--dropdown .select2-search__field {
        border: 1px solid #ccd2da;
        border-radius: 8px;
    }

    #customf-filter-modal .customf-filter-btn {
        background: linear-gradient(135deg,#cfd8e3,#64748b) !important;
    }

        #customf-filter-modal .customf-filter-btn:hover {
            background: linear-gradient(135deg,#64748b,#cfd8e3) !important;
        }

    #customf-filter-modal .customf-clear-btn {
        color: #111 !important;
        background: linear-gradient(135deg,#ffffff,#cfd8e3) !important;
    }

        #customf-filter-modal .customf-clear-btn:hover {
            background: linear-gradient(135deg,#cfd8e3,#ffffff) !important;
        }

    /* ========= GOOGLE BOOKS MODAL ========= */
    #googleBooksModal .modal-dialog {
        max-width: 95%;
        width: 1200px;
        margin: 1.75rem auto;
    }

    #googleBooksModal .modal-content {
        min-height: 80vh;
    }

    #googleBooksModal .modal-body {
        max-height: 70vh;
        overflow-y: auto;
        padding: 20px;
    }

    #googleBooksModal .modal-header {
        background: linear-gradient(135deg,#4e73df,#224abe) !important;
        color: #fff !important;
        border-bottom: none !important;
    }

        #googleBooksModal .modal-header .modal-title {
            color: #fff !important;
        }

    #googleBooksModal .close {
        outline: none !important;
        box-shadow: none !important;
        color: #fff;
        opacity: .9;
        transition: opacity .2s ease, transform .15s ease;
    }

        #googleBooksModal .close:hover {
            opacity: 1;
            transform: rotate(90deg);
        }

    #googleBooksModal .modal-footer {
        border-top: 2px solid rgba(0,0,0,.1);
        background: #f9f9f9;
        font-size: .9rem;
    }

    .book-card {
        margin-bottom: 25px;
        transition: all .3s ease;
        height: 100%;
        cursor: pointer;
    }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,.15);
        }

        .book-card .btn, .book-card form, .book-card a {
            cursor: default;
        }

    .book-cover-container {
        height: 300px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        overflow: hidden;
        border-radius: 5px 5px 0 0;
    }

    .book-cover {
        max-height: 100%;
        width: auto;
        object-fit: contain;
    }

    .book-details {
        padding: 20px;
        background: #fff;
        border-radius: 0 0 5px 5px;
        height: calc(100% - 300px);
        display: flex;
        flex-direction: column;
    }

    .book-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 10px;
        color: #333;
    }

    .book-author {
        color: #666;
        margin-bottom: 8px;
    }

    .book-meta {
        font-size: .9rem;
        color: #555;
        margin-bottom: 5px;
    }

    @@media (max-width:1200px) {
        #googleBooksModal .modal-dialog {
            width: 95%;
        }

        .book-cover-container {
            height: 250px;
        }
    }

    @@media (max-width:768px) {
        .book-cover-container {
            height: 200px;
        }

        .book-title {
            font-size: 1.1rem;
        }
    }

    #bookDetailView .detail-cover {
        max-height: 520px;
        max-width: 100%;
        width: auto;
        height: auto;
        object-fit: contain;
        display: block;
        margin: 0 auto;
    }

    /* ========= GENEL BUTON & CTA ========= */
    .btn {
        transition: transform .12s ease, box-shadow .12s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(0,0,0,.15);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(0,0,0,.12);
        }

    .btn-cta {
        background: linear-gradient(135deg,#4e73df,#224abe);
        border: none;
        color: #fff;
        border-radius: 10px;
        font-weight: 600;
        box-shadow: 0 8px 20px rgba(78,115,223,.25);
        transition: transform .12s ease, box-shadow .12s ease;
    }

        .btn-cta:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(78,115,223,.35);
        }

        .btn-cta:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(78,115,223,.25);
        }

        .btn-cta:focus, .btn-cta:active, .btn-cta:focus:active {
            background: linear-gradient(135deg,#4e73df,#224abe) !important;
            color: #fff !important;
            outline: none !important;
            box-shadow: 0 0 0 0 transparent !important;
        }

    /* ========= KART & TABLO KAPLAMA ========= */
    .dt-elevated {
        border: 0;
        border-radius: 16px;
        background: rgba(255,255,255,.86);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        box-shadow: 0 1px 2px rgba(0,0,0,.06), 0 6px 16px rgba(27,31,35,.08), 0 18px 40px rgba(27,31,35,.10);
        position: relative;
        transition: transform .18s ease, box-shadow .18s ease;
    }

        .dt-elevated:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,.06), 0 12px 26px rgba(27,31,35,.10), 0 28px 60px rgba(27,31,35,.12);
        }

        .dt-elevated::after {
            content: "";
            position: absolute;
            inset: auto 8% -14px 8%;
            height: 28px;
            background: radial-gradient(ellipse at center, rgba(0,0,0,.16) 0%, rgba(0,0,0,0) 70%);
            filter: blur(8px);
            pointer-events: none;
        }

    .dt-pretty {
        border-radius: 12px;
        overflow: hidden;
        background: rgba(255,255,255,.92);
    }

        .dt-pretty thead th {
            position: sticky;
            top: 0;
            z-index: 2;
            background: inherit !important;
            color: inherit !important;
            box-shadow: 0 1px 0 rgba(0,0,0,.06);
            backdrop-filter: none;
            -webkit-backdrop-filter: none;
        }

        .dt-pretty thead.bg-info th {
            color: #fff !important;
        }

        .dt-pretty td, .dt-pretty th {
            border-color: #eef2f7 !important;
        }

        .dt-pretty tbody tr {
            transition: transform .12s ease, box-shadow .12s ease, background .12s ease;
        }

            .dt-pretty tbody tr:hover {
                background: #f8fbff !important;
                transform: translateY(-1px);
                box-shadow: 0 6px 14px rgba(30,41,59,.06);
            }

    .dt-float {
        transform: translateZ(0);
        perspective: 1200px;
    }

    /* ========= DATATABLES ÜST BUTONLAR ========= */
    .dataTables_wrapper .dt-buttons .btn,
    .dataTables_wrapper .dataTables_filter input {
        border-radius: 10px !important;
        border: 1px solid #e6e9f0 !important;
        box-shadow: 0 2px 8px rgba(0,0,0,.06);
    }

    .dataTables_wrapper .dt-buttons {
        display: flex;
        gap: 8px;
        overflow: visible;
    }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            position: relative;
            overflow: hidden;
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700));
            color: #fff !important;
            border: none !important;
            border-radius: 10px !important;
            padding: 10px 14px !important;
            font-weight: 600 !important;
            line-height: 1 !important;
            box-shadow: 0 8px 20px rgba(26,42,128,.25) !important;
            transition: transform .12s ease, box-shadow .12s ease, filter .18s ease;
        }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy i,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button i {
                margin-right: 6px;
            }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover {
                transform: translateY(-1px);
                box-shadow: 0 12px 26px rgba(26,42,128,.35) !important;
            }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
                transform: translateY(0);
                box-shadow: 0 6px 14px rgba(26,42,128,.25) !important;
            }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy::after,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button::after {
                content: "";
                position: absolute;
                inset: 0;
                background: linear-gradient(120deg,transparent 0%,rgba(255,255,255,.20) 20%,transparent 40%);
                transform: translateX(-120%);
                transition: transform .55s ease;
                border-radius: inherit;
                pointer-events: none;
            }

            .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover::after,
            .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover::after {
                transform: translateX(120%);
            }

        .dataTables_wrapper .dt-buttons .dt-button:focus,
        .dataTables_wrapper .dt-buttons .dt-button:focus-visible,
        .dataTables_wrapper .dt-buttons .dt-button:active:focus {
            outline: none !important;
            box-shadow: none !important;
        }

        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            padding-right: 28px !important;
        }

    /* ========= SAYFALAMA ========= */
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(78,115,223,.12) !important;
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button.current,
        .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled,
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover {
            background: transparent !important;
            border-color: transparent !important;
            color: #999 !important;
            box-shadow: none !important;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button:focus {
            outline: none !important;
            box-shadow: none !important;
        }

    /* ========= TABLO BAŞLIK RENGİ ========= */
    #bookTable thead.bg-info {
        background: var(--lib-900) !important;
        border-color: var(--lib-900) !important;
    }

    #bookTable_wrapper .dataTables_paginate .paginate_button.current,
    #bookTable_wrapper .dataTables_paginate .paginate_button.current:hover {
        background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
        color: #fff !important;
        border-color: transparent !important;
    }

    /* ========= HEADER DÜZENİ ========= */
    .container-fluid > .row.mb-4 > .col-md-12.d-flex {
        justify-content: space-between !important;
        gap: 12px;
    }

    .container-fluid > .row.mb-4 h4.card-title {
        display: flex !important;
        align-items: center;
        gap: .6rem;
        margin: 0 !important;
        font-weight: 800;
        font-size: 1.6rem;
        letter-spacing: .2px;
        color: #111;
        position: relative;
    }

        .container-fluid > .row.mb-4 h4.card-title::after {
            content: "";
            position: absolute;
            left: 0;
            bottom: -6px;
            width: 64px;
            height: 4px;
            border-radius: 9999px;
            background: linear-gradient(90deg,#16a34a,#f59e0b,#ef4444);
        }
    /* Header butonları (Google Books & Yeni Kitap) */
    .container-fluid > .row.mb-4 #searchGoogleBooksBtn,
    .container-fluid > .row.mb-4 a.btn.btn-success {
        background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
        color: #fff !important;
        border: none !important;
        border-radius: 10px !important;
        box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
        font-weight: 600;
    }

        .container-fluid > .row.mb-4 #searchGoogleBooksBtn:hover,
        .container-fluid > .row.mb-4 a.btn.btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(26,42,128,.35) !important;
        }

    h4.card-title {
        color: var(--lib-900);
    }

    /* ========= İSTATİSTİK KARTI ========= */
    .stats-card {
        border: 1px solid var(--lib-300);
        border-radius: 16px;
    }

    .stats-title {
        color: var(--lib-900);
        font-weight: 700;
    }

    /* ========= DURUM ROZETLERİ (YUMUŞAK/ŞEFFAF) ========= */
    #bookTable td:first-child .badge {
        border-radius: 9999px !important;
        padding: 6px 12px !important;
        font-weight: 700 !important;
        border: 1.2px solid transparent !important;
        line-height: 1;
        box-shadow: 0 4px 10px rgba(0,0,0,.05) !important;
    }

        #bookTable td:first-child .badge.bg-success {
            color: var(--ok) !important;
            background: linear-gradient(180deg, rgba(22,163,74,.12), rgba(22,163,74,.05)) !important;
            border-color: rgba(22,163,74,.35) !important;
            box-shadow: 0 6px 14px rgba(22,163,74,.10) !important;
        }

        #bookTable td:first-child .badge.bg-warning {
            color: var(--warn) !important;
            background: linear-gradient(180deg, rgba(245,158,11,.12), rgba(245,158,11,.05)) !important;
            border-color: rgba(245,158,11,.35) !important;
            box-shadow: 0 6px 14px rgba(245,158,11,.10) !important;
        }

        #bookTable td:first-child .badge.bg-danger {
            color: var(--bad) !important;
            background: linear-gradient(180deg, rgba(239,68,68,.12), rgba(239,68,68,.05)) !important;
            border-color: rgba(239,68,68,.35) !important;
            box-shadow: 0 6px 14px rgba(239,68,68,.10) !important;
        }

    /* ========= DETAY BUTONU (nötr → hover’da mavi) ========= */
    #bookTable td:nth-child(8) a.btn-info {
        border-radius: 9999px !important;
        background: #fff !important;
        color: #334155 !important;
        border: 1.5px solid #cbd5e1 !important;
        box-shadow: 0 4px 10px rgba(0,0,0,.05) !important;
        font-weight: 700 !important;
        padding: 6px 12px !important;
        transition: all .15s ease !important;
    }

        #bookTable td:nth-child(8) a.btn-info:hover {
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 10px 22px rgba(26,42,128,.28) !important;
            transform: translateY(-1px);
        }
    /* === Copy & Filtrele butonları: hover/focus'ta renk DEĞİŞME MESİN === */
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
        background: linear-gradient(135deg, var(--lib-900), var(--lib-700)) !important;
        color: #fff !important;
        border: none !important;
    }

        /* Hover/focus/active durumlarını sabitle */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:focus,
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:focus,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
            background: linear-gradient(135deg, var(--lib-900), var(--lib-700)) !important;
            color: #fff !important;
            transform: none !important;
            box-shadow: 0 8px 20px rgba(26,42,128,.25) !important; /* istersen kaldırabilirsin */
            filter: none !important;
            outline: none !important;
        }

        /* Parlama (beyaz şerit) efektini kapat */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy::after,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button::after {
            content: none !important;
        }

    /* DataTables'ın genel hover'ını da etkisizleştir (güvenlik ağı) */
    .dataTables_wrapper .dt-buttons .dt-button:hover {
        background: inherit !important;
        color: inherit !important;
    }

    /* Disabled durumda da renk sabit kalsın (opsiyonel) */
    .dataTables_wrapper .dt-buttons .dt-button.disabled,
    .dataTables_wrapper .dt-buttons .dt-button:disabled {
        opacity: .6 !important;
        background: linear-gradient(135deg, var(--lib-900), var(--lib-700)) !important;
        color: #fff !important;
    }
    /* ===== Kitap Listesi (bookTable) — koyu mavi sayfalama ===== */

    /* Standart DataTables (a.paginate_button) */
    #bookTable_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        #bookTable_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(78,115,223,.12) !important;
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

        #bookTable_wrapper .dataTables_paginate .paginate_button.current,
        #bookTable_wrapper .dataTables_paginate .paginate_button.current:hover,
        #bookTable_wrapper .dataTables_paginate .paginate_button.current:focus,
        #bookTable_wrapper .dataTables_paginate .paginate_button.current:active {
            background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
        }

            #bookTable_wrapper .dataTables_paginate .paginate_button.current *,
            #bookTable_wrapper .dataTables_paginate .paginate_button.current > * {
                color: #fff !important;
            }

    /* Bootstrap’lı DataTables (ul.pagination > li.page-item > a.page-link) */
    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link {
        border-radius: 8px !important;
        border-color: transparent !important;
        background: transparent !important;
        color: inherit !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
    }

        #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:hover {
            background: rgba(78,115,223,.12) !important;
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link,
    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:hover,
    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:focus {
        background: linear-gradient(135deg,var(--lib-900),var(--lib-700)) !important;
        color: #fff !important;
        border-color: transparent !important;
        box-shadow: 0 8px 18px rgba(26,42,128,.25) !important;
    }

    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item.disabled > a.page-link {
        background: transparent !important;
        border-color: transparent !important;
        color: #999 !important;
        box-shadow: none !important;
    }

    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:focus {
        outline: none !important;
        box-shadow: none !important;
    }
    /* tıklayınca metin rengi */
    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:active {
        color: #224abe !important;
    }

    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link:active {
        color: #fff !important;
    }
    /* linki esnek yap ve boşluk ver */
    .sidebar-nav .sidebar-link {
        display: flex;
        align-items: center;
        gap: .6rem;
    }

    .sidebar-link.icon-right {
        display: flex;
        align-items: center;
    }

        .sidebar-link.icon-right .hide-menu {
            order: 1;
        }
        /* metin solda */
        .sidebar-link.icon-right i {
            order: 2;
            margin-left: 8px;
            margin-right: 0;
        }
    /* ikon sağda */
       
    /* ===== KOYU MAVİ → #0b1220 (uniform) ===== */
    :root {
        --lib-900: #0b1220;
        --lib-700: #0b1220;
        --lib-500: #0b1220;
        --lib-300: #0b1220;
    }

    /* Gradyan kullanılan tüm koyu-mavi alanları tek renge sabitle */
    .btn-cta,
    #googleBooksModal .modal-header,
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button,
    #bookTable thead.bg-info,
    #bookTable_wrapper .dataTables_paginate .paginate_button.current,
    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link,
    .container-fluid > .row.mb-4 #searchGoogleBooksBtn,
    .container-fluid > .row.mb-4 a.btn.btn-success,
    #bookTable td:nth-child(8) a.btn-info:hover {
        background: #0b1220 !important;
        background-image: none !important;
        border-color: #0b1220 !important;
        color: #fff !important;
        box-shadow: 0 8px 20px rgba(11,18,32,.25) !important; /* eski mavi gölgelerin yerine */
    }

        /* Tablo başlığı kesin dursun */
        #bookTable thead.bg-info th {
            background: #0b1220 !important;
            border-color: #0b1220 !important;
            color: #fff !important;
        }

    /* Koyu mavi hover efektlerini de dönüştür */
    #bookTable_wrapper .dataTables_paginate .paginate_button:hover,
    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item > a.page-link:hover {
        background: rgba(11,18,32,.12) !important; /* was rgba(78,115,223,.12) */
        border-color: rgba(11,18,32,.25) !important; /* was rgba(78,115,223,.25) */
        color: #0b1220 !important; /* was #224abe */
        box-shadow: 0 2px 8px rgba(11,18,32,.15) !important;
    }

    /* DT butonlarının hover/focus’ta da aynı kalması */
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy:focus,
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:focus,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
        background: #0b1220 !important;
        box-shadow: 0 8px 20px rgba(11,18,32,.25) !important;
    }

    /* Başlıklar, istatistik başlıkları */
    h4.card-title,
    .stats-title {
        color: #0b1220 !important;
    }

    /* Bootstrap “outline-primary” de koyu-mavi idi → #0b1220 */
    .btn-outline-primary {
        color: #0b1220 !important;
        border-color: #0b1220 !important;
    }

        .btn-outline-primary:hover,
        .btn-outline-primary:focus {
            background: #0b1220 !important;
            border-color: #0b1220 !important;
            color: #fff !important;
        }

    /* (İsteğe bağlı) mavi temelli box-shadow’ları 0b1220 tabanına yaklaştır */
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
        box-shadow: 0 8px 20px rgba(11,18,32,.25) !important;
    }

    #bookTable_wrapper .dataTables_paginate .paginate_button.current,
    #bookTable_wrapper .dataTables_paginate ul.pagination li.page-item.active > a.page-link {
        box-shadow: 0 8px 18px rgba(11,18,32,.25) !important;
    }

    .swal2-container {
        z-index: 2147483647 !important;
    }

</style>





<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12 d-flex justify-content-between align-items-center flex-wrap">
            <h4 class="card-title mb-0">📚 Kitap Listesi</h4>

            <div class="d-flex align-items-center">
                <button id="searchGoogleBooksBtn" class="btn btn-cta mr-2">
                    <i class="fas fa-search mr-1"></i> Google Books’ta Ara
                </button>

                <a class="btn btn-success btn-rounded waves-effect waves-light" asp-action="Create">
                    <i class="fa fa-plus mr-1"></i> Yeni Kitap Ekle
                </a>
                <partial name="_IsbnScannerPartial" />
            </div>
        </div>
    </div>

    <button class="btn btn-outline-primary ml-2" onclick="openPhoneScan()">
        📱 Telefondan Tara
    </button>
    <div id="phoneScanModal" class="modal fade" tabindex="-1">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content p-3 text-center">
                <h5 class="mb-2">Telefondan Tara</h5>
                <div id="scanQr" class="d-flex justify-content-center"></div>
                <small class="text-muted d-block mt-2">Telefon kameranızla bu kodu okutun.</small>
            </div>
        </div>
    </div>

    <!-- Google Books Arama Modalı -->
    <div id="googleBooksModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header ">
                    <h5 class="modal-title">
                        <i class="fas fa-book-open mr-2"></i> Google Books'ta Arama
                    </h5>
                    <button type="button" class="close text-white" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="bookDetailView" class="d-none"></div>
                    <!-- Arama Formu -->
                    <form id="googleBooksSearchForm" class="mb-4">
                        <div class="input-group input-group-lg">
                            <input type="text" name="query" class="form-control"
                                   placeholder="Kitap adı, yazar veya ISBN..."
                                   autocomplete="off">
                            <div class="input-group-append">
                                <button type="submit" class="btn btn-cta">
                                    <i class="fas fa-search"></i> Ara
                                </button>
                            </div>
                        </div>
                    </form>
                    <div class="form-inline mb-3">
                        <label class="mr-2">Arama Kapsamı:</label>
                        <select id="lookup-scope" class="form-control">
                            <option value="both" selected>Yerel + Google</option>
                            <option value="local">Sadece Yerel</option>
                            <option value="google">Sadece Google</option>
                        </select>
                    </div>
                    <!-- Popüler Kitaplar -->
                    <div id="popularBooks" class="row">
                        <!-- İçerik dinamik olarak yüklenecek -->
                    </div>

                    <!-- Arama Sonuçları -->
                    <div id="searchResults" class="row">
                        <!-- İçerik dinamik olarak yüklenecek -->
                    </div>

                    <!-- Hata Mesajı -->
                    <div id="errorMessage" class="alert alert-danger d-none"></div>
                </div>
                <div class="modal-footer justify-content-end">
                    <small class="text-muted">Veriler Google Books API üzerinden alınmaktadır.</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Kitap Tablosu -->
    <div class="card dt-elevated">
        <div class="card-body">
            <div class="table-responsive dt-float">
                <table id="bookTable" class="table table-bordered table-hover table-striped dt-pretty">
                    <thead class="bg-info text-white">
                        <tr>
                            <th>Durum</th>
                            <th>ID</th>
                            <th>Başlık</th>
                            <th>Yazar</th>
                            <th>Kategori</th>
                            <th>Toplam</th>
                            <th>Mevcut</th>
                            <th>Detay</th>
                            <th class="text-center">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in Model)
                        {
                            <tr>
                                <td>
                                @if (book.AvailableCopies > 1)
                                    {
                                        <span class="badge bg-success text-white">Müsait</span>
                                    }
                                    else if (book.AvailableCopies == 1)
                                    {
                                        <span class="badge bg-warning text-white">Tükenmek Üzere</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger text-white">Tükenmiş</span>
                                    }
                                </td>
                                <td>@book.BookId</td>
                                <td>@book.Title</td>
                                <td>@book.Author</td>
                                <td>@book.Category</td>
                                <td>@book.TotalCopies</td>
                                <td>@book.AvailableCopies</td>
                                <td class="text-right">
                                    <a asp-action="Details" asp-route-id="@book.BookId"
                                       class="btn btn-sm btn-info">
                                        <i class="fas fa-info-circle"></i> Detay
                                    </a>
                                </td>
                                <td class="text-center">
                                    <a asp-action="Update" asp-route-id="@book.BookId" class="btn btn-warning btn-sm btn-rounded waves-effect waves-light mr-1">
                                        <i class="fa fa-edit"></i> Güncelle
                                    </a>
                                    <button onclick="deleteBook(@book.BookId)" class="btn btn-danger btn-sm btn-rounded waves-effect waves-light">
                                        <i class="fa fa-trash"></i> Sil
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
       
    </div>
</div>
<!-- 🔍 Filtreleme Modalı -->
<div id="customf-filter-modal" class="customf-modal">
    <div class="customf-modal-content">
        <div class="customf-modal-header">
            <div class="customf-modal-title">
                <i class="fas fa-filter"></i>
                <h5>Filtreleme Seçenekleri</h5>
            </div>
            <span class="customf-close" title="Kapat">
                <i class="fas fa-times"></i>
            </span>
        </div>

        <!-- Dropdown üstte ve sabit -->
        <div class="customf-modal-dropdown">
            <div class="customf-input-group">
                <label for="columnSelector">Filtrelenecek Sütunlar</label>
                <select id="columnSelector" class="select2-column-selector" style="width: 100%;" multiple></select>
            </div>
        </div>

        <!-- Scroll edilebilir içerik -->
        <div class="customf-modal-body">
            <form id="customf-dynamic-filter-form"></form>
        </div>

        <div class="customf-modal-footer">
            <div class="customf-button-group">
                <button id="customf-clear-filter" class="customf-btn customf-clear-btn">Temizle</button>
                <button id="customf-apply-filter" class="customf-btn customf-filter-btn">Filtrele</button>
            </div>
        </div>
    </div>
</div>




<!-- BAĞIMSIZ: Tablo altı küçük istatistik -->
<div class="card stats-card mt-3">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="stats-title mb-0">Kitap İstatistikleri</h5>
            <small class="text-muted">Tablodaki görünür kayıtlara göre</small>
        </div>
        <div class="row">
            <div class="col-lg-4 mb-3"><canvas id="libStatAvailability" height="160"></canvas></div>
            <div class="col-lg-8"><canvas id="libStatCategories" height="160"></canvas></div>
        </div>
    </div>
</div>

<form id="tokenForm">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

   

    <script>
        let previousFilterValues = {};
        let selectedColumns = [];
         let columnTypesCache = {}; // Her sütunun tipini (date, number, text) önbelleğe almak için
            let parsedDatesCache = []; // Sadece tarih sütunlarındaki dönüştürülmüş Date objelerini tutmak için
            let textCache = [];   // Hücrelerin HTML'siz düz metni
            let canonCache = [];  // TR-normalize edilmiş kanonik metin
            let numericCache = [];
          let openFromScanner = false; // ISBN modalından açıldığını işaretlemek için
          let pendingIsbn = null;

        $(document).ready(function () {
            const table = $('#bookTable').DataTable({
                responsive: true,
                autoWidth: false,
                lengthChange: true,
                order: [],
                language: {
                    url: "/lib/datatables-plugins/i18n/tr.json"
                },
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tümü"]],
                pageLength: 10,
                paging: true,
                buttons: [
                    {
                        extend: "copy",
                        text: '<i class="fas fa-copy"></i>',
                        titleAttr: "Kopyala",
                        className: "btn-copy"
                    },
                    {
                        text: '<i class="fas fa-filter"></i> Filtrele',
                        titleAttr: "Filtreleme seçeneklerini aç",
                        className: "customf-filter-button",
                        action: function () {
                            populateColumnSelector("bookTable");
                            generateCustomfFilterForm("bookTable");
                            $('#customf-filter-modal').show();
                            activateSelect2();
                        }
                    }
                ],
                dom: "Bfrtip"
            });
            cacheColumnDataAndTypes("bookTable");


                   $('#googleBooksModal').on('show.bs.modal', function() {
          if (!openFromScanner) loadPopularBooks();
        });
             $('#googleBooksSearchForm').submit(function(e) {
                e.preventDefault();
                const query = $(this).find('input[name="query"]').val();
                searchBooks(query);
            });

            // Modal aç butonu
            $('#searchGoogleBooksBtn').click(function() {
                $('#googleBooksModal').modal('show');
            });
        });

                        function stripHtml(x){
          const html = String(x ?? '');
          const spaced = html.replace(/>(\s*)</g, '><').replace(/></g, '>\u2009<');
          const div = document.createElement('div');
          div.innerHTML = spaced;
          return (div.textContent || '')
            .replace(/\u00A0/g, ' ')
            .replace(/([a-zğüşiöç])([A-ZĞÜŞİÖÇ])/g, '$1 $2') // ← ek: a…z + Türkçe harf → BÜYÜK geçişine boşluk
            .replace(/\s+/g, ' ')
            .trim();
        }
                function cellToText(cell) {
            if (cell == null) return '';


            if (cell instanceof Date && !isNaN(cell)) return cell.toISOString();


            if (typeof cell === 'object') {
                if ('value' in cell) return cellToText(cell.value);
                if ('text'  in cell) return cellToText(cell.text);
                if ('name'  in cell) return cellToText(cell.name);
                if ('title' in cell) return cellToText(cell.title);
                if ('html'  in cell) return stripHtml(cell.html);
                return stripHtml(cell);
            }


            return stripHtml(cell);
        }
          function normTR(s){
          if (s == null) return '';
          let t = s.toString().normalize('NFKD').replace(/[\u0300-\u036f]/g,'');
          // Türkçe I ailesini tek tipleştir: İ, I, ı -> i
          t = t.replace(/[İI]/g,'I').replace(/ı/g,'i');
          t = t.toLowerCase(); // locale bağımsız
          return t;
        }
                function extractDataOrder(html){
          const m = String(html || '').match(/data-order=["']([^"']+)["']/i);
          return m ? m[1] : null;
        }
                function buildTextAndCanonCaches(tableId){
          const api = $('#'+tableId).DataTable();
          const all = api.rows().data().toArray();
          const rowCount = all.length;
          const colCount = api.columns().header().toArray().length;

          textCache  = new Array(rowCount);
          canonCache = new Array(rowCount);

          for(let r=0; r<rowCount; r++){
            textCache[r]  = new Array(colCount);
            canonCache[r] = new Array(colCount);
            for(let c=0; c<colCount; c++){
              // 1 defa: mevcut cellToText (yavaş ama tek sefer)
              const txt = cellToText(all[r][c]);
              textCache[r][c]  = txt;
              canonCache[r][c] = canon(txt);
            }
          }
        }
                function activateSelect2() {
            if ($('#columnSelector').data('select2')) {
                $('#columnSelector').select2('destroy');
            }
            if ($('#columnSelector option[value="select-all-option"]').length === 0) {
                $('#columnSelector').prepend('<option value="select-all-option">Tümünü Seç</option>');
            }
            $('#columnSelector').select2({
                placeholder: "Filtrelenecek sütunları seçin...",
                width: '100%',
                multiple: true,
                dropdownParent: $('#customf-filter-modal .customf-modal-content'),
                templateResult: function (data) {
                    if (data.id === 'select-all-option') {
                        return $('<span><i class="fas fa-check-double"></i> Tümünü Seç</span>');
                    }
                    return data.text;
                },
                templateSelection: function (data) {
                    if (data.id === 'select-all-option') {
                        const totalSelectableOptions = $('#columnSelector option').not('[value="select-all-option"]').length;
                        const currentSelectedCount = $('#columnSelector').val() ? $('#columnSelector').val().length : 0;
                        if (currentSelectedCount === totalSelectableOptions) {
                            return `Tümü Seçili (${totalSelectableOptions})`;
                        }
                        return `(${currentSelectedCount}/${totalSelectableOptions}) Sütun Seçili`;
                    }
                    return data.text;
                }
            });
            $('#columnSelector').on('select2:select', function (e) {
                const selectedId = e.params.data.id;
                if (selectedId === 'select-all-option') {
                    const $selector = $(this);
                    const allOptions = $selector.find('option').not('[value="select-all-option"]').map(function () {
                        return $(this).val();
                    }).get();
                    $selector.val(allOptions).trigger('change');
                    $selector.select2('close');
                }
            });
            $('#columnSelector').on('select2:unselect', function (e) {
                const unselectedId = e.params.data.id;
                if (unselectedId === 'select-all-option') {
                    $(this).val(null).trigger('change');
                }
            });
        }

        function populateColumnSelector(tableId) {
            const table = $(`#${tableId}`).DataTable();
            const columns = table.columns().header().toArray();
            const selector = $('#columnSelector');
            selector.empty();
            columns.forEach((col, index) => {
                const colName = $(col).text().trim();
                if (colName && colName !== "İşlemler") {

                    const selectedAttr = previousFilterValues.hasOwnProperty(index) ? 'selected' : '';
                    selector.append(`<option value="${index}" ${selectedAttr}>${colName}</option>`);
                }
            });
            selector.trigger('change.select2');
            const totalSelectableOptions = $('#columnSelector option').not('[value="select-all-option"]').length;
            const currentSelectedCount = Object.keys(previousFilterValues).length;
            if (currentSelectedCount > 0 && currentSelectedCount === totalSelectableOptions) {
                selector.find('option[value="select-all-option"]').prop('selected', true);
                selector.trigger('change.select2');
            }
        }

         function generateCustomfFilterForm(tableId) {
             try {
                 const table = $(`#${tableId}`).DataTable();
                 const columns = table.columns().header().toArray();
                 const selectedIndexes = $('#columnSelector').val()?.map(Number) || [];
                 let formHtml = "";
                 selectedIndexes.forEach(index => {
                     try {
                         const col = columns[index];
                         const colName = $(col).text().trim();
                         if (!colName || colName === "İşlemler") return;

                         const columnType = columnTypesCache[index] || 'text';

                         const prev = previousFilterValues[index] || {};

                         formHtml += `<div class="customf-input-group"><label>${colName}</label>`;
                         if (columnType === 'date') {
                             const startVal = (prev['date'] && prev['date'].start) ? prev['date'].start : '';
                             const endVal = (prev['date'] && prev['date'].end) ? prev['date'].end : '';
                             formHtml += `<div class="customf-inline-inputs">`;
                             formHtml += `<input type="datetime-local" class="filter-input" data-type="date-start" data-index="${index}" value="${startVal}">`;
                             formHtml += `<input type="datetime-local" class="filter-input" data-type="date-end" data-index="${index}" value="${endVal}">`;
                             formHtml += `</div>`;
                         console.log("[DEBUG] Tarih Input Değerleri:",
                              "Sütun:", colName,
                              "Start:", startVal,
                              "End:", endVal
                          );
                         } else if (columnType === 'number') {
                             const min = (prev['range'] && !isNaN(prev['range'][0])) ? prev['range'][0] : '';
                             const max = (prev['range'] && !isNaN(prev['range'][1])) ? prev['range'][1] : '';
                             formHtml += `<div class="customf-inline-inputs">`;
                             formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Min" value="${min}">`;
                             formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Max" value="${max}">`;
                             formHtml += `</div>`;
                         } else {
                                                                 const colData = table.column(index).data().toArray();
        const sampleIdx = stratifiedIndices(colData.length, 400);
        const uniqueValues = new Set();
        for (const ii of sampleIdx) uniqueValues.add(cellToText(colData[ii]));

        // number kolonlarda asla select üretme
        const useSelect = (columnTypesCache[index] !== 'number') && uniqueValues.size > 0 && uniqueValues.size <= 10;

        if (useSelect) {
          formHtml += `<select class="filter-input" data-type="select" data-index="${index}">
                         <option value="">Tümü</option>`;
          [...uniqueValues].forEach(val => {
            const selected = (prev['select'] === val) ? 'selected' : '';
            formHtml += `<option value="${val}" ${selected}>${val}</option>`;
          });
          formHtml += `</select>`;
        } else {
          const val = prev['text'] || '';
          formHtml += `<input type="text" class="filter-input" data-type="text" data-index="${index}" placeholder="Metin giriniz" value="${val}">`;
        }
                         }
                         formHtml += `</div>`;
                     } catch (e) {
                         console.error(`Sütun işleme hatası (index ${index}):`, e);
                     }
                 });
                 $('#customf-dynamic-filter-form').html(formHtml || getEmptyPlaceholder());
             } catch (e) {
                 console.error("Filtre formu oluşturma hatası:", e);
                 $('#customf-dynamic-filter-form').html('<div class="alert alert-danger">Filtre oluşturulurken hata oluştu</div>');
             }
         }

        function getEmptyPlaceholder() {
            return `
                        <div class="empty-placeholder">
                            <i class="fas fa-sliders-h"></i><br>
                            <b>Filtrelemek istediğiniz sütunları seçin.</b>
                            <div style="font-size:13px; margin-top: 6px;">Yukarıdaki listeden bir veya daha fazla sütun seçin.</div>
                        </div>
                    `;
        }

        $('#customf-clear-filter').on('click', function () {
            $('#columnSelector').val(null).trigger('change');
            previousFilterValues = {};
            generateCustomfFilterForm("bookTable");
            $.fn.dataTable.ext.search = [];
            $('#bookTable').DataTable().draw();
        });

        $(document).on('change', '#columnSelector', function () {
            setTimeout(() => {
                generateCustomfFilterForm("bookTable");
            }, 100);
        });

        $('#customf-apply-filter').on('click', function () {
                console.log("[DEBUG] Uygulanan Filtreler:", previousFilterValues);
            try {
                const table = $('#bookTable').DataTable();
                selectedColumns = $('#columnSelector').val()?.map(Number) || [];


                const currentActiveFilters = {};

                $('.filter-input').each(function () {
                    const type = $(this).data('type');
                    const index = parseInt($(this).data('index'));
                    const value = $(this).val().trim();

                    if (value) {
                        if (!currentActiveFilters[index]) currentActiveFilters[index] = {};
                        if (type === 'range') {
                            const inputs = $(`input[data-type="range"][data-index="${index}"]`);
                           const vMin = parseLocaleNumber(inputs.eq(0).val());
        const vMax = parseLocaleNumber(inputs.eq(1).val());
        currentActiveFilters[index][type] = [
          Number.isFinite(vMin) ? vMin : -Infinity,
          Number.isFinite(vMax) ? vMax :  Infinity
        ];
                        } else if (type === 'date-start' || type === 'date-end') {
                            if (!currentActiveFilters[index]['date']) currentActiveFilters[index]['date'] = { start: null, end: null };
                            if (type === 'date-start') currentActiveFilters[index]['date'].start = value;
                            if (type === 'date-end') currentActiveFilters[index]['date'].end = value;
                        } else {
                            currentActiveFilters[index][type] = value;
                        }
                    }
                });

                previousFilterValues = {};
                for (const index in currentActiveFilters) {
                    if (currentActiveFilters.hasOwnProperty(index)) {
                        previousFilterValues[index] = currentActiveFilters[index];
                    }
                }


                $.fn.dataTable.ext.search = [];

                          $.fn.dataTable.ext.search = [];
        $.fn.dataTable.ext.search.push(function (settings, rowData, dataIndex) {
          for (const index in previousFilterValues) {
            if (!previousFilterValues.hasOwnProperty(index)) continue;

            const colIndex = parseInt(index, 10);
            const fset     = previousFilterValues[index];   // o sütun için aktif filtreler
            const cellText  = textCache[dataIndex]?.[colIndex]  ?? '';
            const cellCanon = canonCache[dataIndex]?.[colIndex] ?? '';

            // 1) Tarih
            if (fset.date) {
              const start = fset.date.start ? new Date(fset.date.start) : null;
              const end   = fset.date.end   ? new Date(fset.date.end)   : null;
              const cellDate = parsedDatesCache[dataIndex]?.[colIndex] ?? null;
              if (!cellDate && (start || end)) return false;
              if (cellDate && start && cellDate.getTime() < start.getTime()) return false;
              if (cellDate && end   && cellDate.getTime() > end.getTime())   return false;
              continue;
            }

            // 2) Sayı aralığı
              if (fset.range) {
          const num = numericCache[dataIndex]?.[colIndex];
          if (!Number.isFinite(num)) return false;      // sayı değilse ele
          if (num < fset.range[0] || num > fset.range[1]) return false;
          continue;
        }

            // 3) SELECT filtresi (formda select kullanıldıysa)
               if ('select' in fset) {
          const sel = fset.select;
          if (sel) {
            const f = canon(sel);                 // "İlkan Erdoğan" -> "ilkan erdogan"
            const p = escapeRegExp(f);
            let hay = cellCanon;                  // hücrenin kanonik hali

            // Arka arkaya tekrarlı aynı isimleri, arada boşluk olsa da olmasa da teke indir
            hay = hay.replace(new RegExp(`(?:${p})(?:\\s*${p})+`, 'g'), f);
            hay = hay.replace(/\s+/g, ' ').trim();

            const token = new RegExp(`(^|\\s)${p}(\\s|$)`);
            const match = token.test(hay);

            // DEBUG
            // console.log({ eslesme: match, normalizeFiltre: f, orijinalHucre: textCache[dataIndex][colIndex], temizlenmisHucre: hay });

            if (!match) return false;
          }
          continue;
        }


            // 4) Serbest metin
            if (fset.text) {
              const f = canon(fset.text);
              if (!cellCanon.includes(f)) return false;
              continue;
            }
          }
          return true;
        });


                table.draw();
                $('#customf-filter-modal').hide();
            } catch (e) {
                console.error("Filtre uygulama hatası:", e);
            }

                           console.log("[DEBUG] Filter applied. Remaining rows:",
            $('#bookTable').DataTable().rows({ filter: 'applied' }).count()
        );

        });
                function isValidDate(val) {

            if (val instanceof Date && !isNaN(val)) return true;


            if (val == null || val === '') return false;


            if (typeof val !== 'string') val = cellToText(val);


            if (/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)) {
                return !isNaN(new Date(val));
            }


            const aspMatch = String(val).match(/\/Date\((\d+)\)\//);
            if (aspMatch) {
                return !isNaN(new Date(parseInt(aspMatch[1], 10)));
            }


            const trPatterns = [
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/,
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/
            ];
            for (const pattern of trPatterns) {
                if (pattern.test(val)) return true;
            }

            return false;
        }

                       function parseDate(val) {
            if (val instanceof Date && !isNaN(val)) return val;
            if (val == null) return null;
            if (typeof val !== 'string') val = cellToText(val);
            if (!val) return null;


            if (/^\d{4}-\d{2}-\d{2}([T\s].*)?$/.test(val)) {
                const d = new Date(val);
                return isNaN(d) ? null : d;
            }


            const aspMatch = val.match(/\/Date\((\d+)\)\//);
            if (aspMatch) return new Date(parseInt(aspMatch[1], 10));


            const trFormats = [
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})$/, fn: m => new Date(+m[3], +m[2]-1, +m[1], +m[4], +m[5], +m[6]) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/,          fn: m => new Date(+m[3], +m[2]-1, +m[1], +m[4], +m[5]) },
                { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/,                              fn: m => new Date(+m[3], +m[2]-1, +m[1]) }
            ];
            for (const { regex, fn } of trFormats) {
                const match = val.match(regex);
                if (match) {
                    const d = fn(match);
                    return isNaN(d) ? null : d;
                }
            }

            return null;
        }


                                    function cacheColumnDataAndTypes(tableId) {
          const table = $(`#${tableId}`).DataTable();
          const allData = table.rows().data().toArray();
          const columnsCount = table.columns().header().toArray().length;

          columnTypesCache = {};
          parsedDatesCache = [];

          // 1) HEADER ADINA GÖRE ÖN İŞARETLEME (tarih)
          table.columns().every(function (index) {
            const colHeader = this.header();
            const colName = $(colHeader).text().trim().toLowerCase();
            if (colName.includes('tarih') || colName.includes('date')) {
              columnTypesCache[index] = 'date';
            }
          });

          // 2) DOM'da td/data-order taraması → tarih kolonları
          for (let i = 0; i < columnsCount; i++) {
            if (columnTypesCache[i]) continue; // header zaten 'date' işaretlediyse atla

            let hasDomOrderDate = false;

            $(table.column(i).nodes()).each(function () {
              let v = this.getAttribute('data-order') || $(this).data('order');
              if (!v) {
                const inner = this.querySelector('[data-order]');
                if (inner) v = inner.getAttribute('data-order') || $(inner).data('order');
              }
              if (v && isValidDate(v)) {
                hasDomOrderDate = true;
                return false; // erken çık
              }
            });

            if (hasDomOrderDate) {
              columnTypesCache[i] = 'date';
            }
          }

          // 3) KALAN KOLONLAR İÇİN TİP TAHMİNİ (stratified örnekleme)
          for (let colIndex = 0; colIndex < columnsCount; colIndex++) {
            if (columnTypesCache[colIndex]) continue; // tarihleri atla

            const colHeader = table.columns().header()[colIndex];
            const headerName = $(colHeader).text().trim().toLowerCase();

            // Başlıktan güçlü sayı ipucu
            const headerLooksNumber = /(miktar|tutar|fiyat|adet|ücret|bakiye|bor[çc]|kredi|stok|\bid\b|\bno\b|say[ıi]s[ıi])/i.test(headerName);

            const colData = table.column(colIndex).data().toArray();
            const idxs = stratifiedIndices(colData.length, 600);

            let checked = 0, numberCount = 0, dateCount = 0;
            const uniqForSelect = new Set();

            for (const i of idxs) {
              const cell = colData[i];
              const txt  = cellToText(cell);
              if (txt) uniqForSelect.add(txt);
              checked++;

              if (isValidDate(txt)) { dateCount++; continue; }

              // Önce ortogonal (data-order/sort/value), yoksa görünen metinden yerel sayı ayrıştırma
              let n = getNumericOrtho(table, i, colIndex);
              if (!Number.isFinite(n)) n = parseLocaleNumber(txt);
              if (Number.isFinite(n)) numberCount++;
            }

            if (headerLooksNumber || (checked > 0 && numberCount / checked >= 0.75)) {
              columnTypesCache[colIndex] = 'number';
            } else if (checked > 0 && dateCount / checked >= 0.60) {
              columnTypesCache[colIndex] = 'date';
            } else {
              // Yalnızca gerçek metin kolonlarında düşük benzersiz sayıda ise select
              columnTypesCache[colIndex] = (uniqForSelect.size > 0 && uniqForSelect.size <= 10) ? 'select' : 'text';
            }
          }
                  numericCache = new Array(allData.length);
        for (let r = 0; r < allData.length; r++) {
          numericCache[r] = {};
          for (let c = 0; c < columnsCount; c++) {
            if (columnTypesCache[c] !== 'number') continue;

            let num = NaN;
            const cell = allData[r][c];

            // hızlı yol: zaten number ise direkt al
            if (typeof cell === 'number') {
              num = cell;
            } else {
              // ortogonal → sonra yerel parse (bir KEZ)
              let v = getNumericOrtho(table, r, c);
              if (!Number.isFinite(v)) v = parseLocaleNumber(cellToText(cell));
              if (Number.isFinite(v)) num = v;
            }
            numericCache[r][c] = num;
          }
        }
          // 4) parsedDatesCache: (1) DOM data-order → (2) orthogonal obj → (3) görünen metin
          for (let rowIndex = 0; rowIndex < allData.length; rowIndex++) {
            parsedDatesCache[rowIndex] = {};
            const row = allData[rowIndex];

            for (let colIndex = 0; colIndex < columnsCount; colIndex++) {
              if (columnTypesCache[colIndex] !== 'date') continue;

              const cell = row[colIndex];
              let d = null;

              // (1) DOM
              let rawOrder = getOrderFromDom(table, rowIndex, colIndex);
              if (rawOrder && isValidDate(rawOrder)) d = parseDate(String(rawOrder));

              // (2) orthogonal object
              if (!d && typeof cell === 'object' && cell) {
                const ortho = cell.sort ?? cell.order ?? cell.value ?? null;
                if (ortho && isValidDate(ortho)) d = parseDate(String(ortho));
              }

              // (3) görünen metin
              if (!d) {
                const txt = cellToText(cell);
                d = parseDate(txt);
              }
              parsedDatesCache[rowIndex][colIndex] = d || null;
            }
          }

          // Metin/canon cache’leri güncelle
          buildTextAndCanonCaches(tableId);

          console.log("[DEBUG] Column Types:", columnTypesCache);
          console.log("[DEBUG] parsedDatesCache Sample:", parsedDatesCache.slice(0, 5));
                (() => {
          const api = $('#bookTable').DataTable();
          const rows = Array.from({length: 5}, (_, r) => {
            const o = { row: r };
            api.columns().header().toArray().forEach((h, i) => {
              if (columnTypesCache[i] === 'number')
                o[$(h).text().trim()] = numericCache[r]?.[i] ?? null;
            });
            return o;
          });
          console.table(rows);
        })();
        }
         function escapeRegExp(s){
                     return (s||'').toString().replace(/[.*+?^${}()|[\]\\]/g,'\\$&');
                 }
         function getOrderFromDom(table, r, c) {
          const node = table.cell(r, c).node();
          if (!node) return null;

          let v = node.getAttribute('data-order') || $(node).data('order');
          if (!v) {
            const inner = node.querySelector('[data-order]');
            if (inner) v = inner.getAttribute('data-order') || $(inner).data('order');
          }
          return v ?? null;
        }
                $('#bookTable').on('draw.dt', function () {
          buildTextAndCanonCaches('bookTable');
        });
          function canon(s){
          let t = cellToText(s ?? '');
          t = t.normalize('NFKD').replace(/[\u0300-\u036f]/g,'');
          t = normTR(t); // artık "İlkan" -> "ilkan", "Volkan" -> "volkan"
          t = t.replace(/[^a-z0-9]+/g,' ').replace(/\s+/g,' ').trim();
          return t;
        }
               function stripSpacesLike(s){ return (s||'').replace(/[\u00A0\u202F\u2007\u2009]/g,' '); } // NBSP ve benzerleri

        function parseLocaleNumber(raw){
          if (raw == null) return NaN;
          let t = cellToText(raw);
          t = stripSpacesLike(t).replace(/\s+/g,'');       // boşlukları at
          t = t.replace(/[%₺$€£]/g,'');                    // para/% sembolü
          t = t.replace(/\(([^)]+)\)/, '-$1');             // (1.500) -> -1.500

          // 1.234.567,89  -> 1234567.89
          if (/^-?\d{1,3}(\.\d{3})+(,\d+)?$/.test(t)) { t = t.replace(/\./g,'').replace(',', '.'); }
          // 1,234,567.89 -> 1234567.89
          else if (/^-?\d{1,3}(,\d{3})+(\.\d+)?$/.test(t)) { t = t.replace(/,/g,''); }
          // sadece virgül ondalık ise
          else if (t.indexOf(',') > -1 && t.indexOf('.') === -1) { t = t.replace(',', '.'); }

          const n = Number(t);
          return Number.isFinite(n) ? n : NaN;
        }

        function looksNumeric(raw){ return Number.isFinite(parseLocaleNumber(raw)); }

        // Hücredeki ortogonal (data-order / sort / value) değeri öncele
        function getNumericOrtho(api, r, c){
          const node = api.cell(r, c).node();
          let v = node?.getAttribute('data-order') || $(node).data('order') || null;
          if (!v) {
            const inner = node?.querySelector('[data-order]');
            if (inner) v = inner.getAttribute('data-order') || $(inner).data('order');
          }
          if (looksNumeric(v)) return parseLocaleNumber(v);

          const cell = api.rows().data().toArray()[r][c];
          if (cell && typeof cell === 'object') {
            const ortho = cell.sort ?? cell.order ?? cell.value;
            if (looksNumeric(ortho)) return parseLocaleNumber(ortho);
          }
          return NaN;
        }

        // Tüm tabloya yayılmış örneklem (ilk sayfa yanlılığını kırar)
        function stratifiedIndices(n, max=400){
          if (n <= 0) return [];
          const k = Math.min(max, n);
          const step = Math.max(1, Math.floor(n / k));
          const out = [];
          for (let i=0; i<n && out.length<k; i+=step) out.push(i);
          // sıralı bloklara karşı bir miktar rastgele örnek
          for (let j=0; j<Math.min(50, Math.floor(k/4)); j++) out.push(Math.floor(Math.random()*n));
          return [...new Set(out)];
        }





         // Popüler kitapları yükle
        function loadPopularBooks() {
            $('#searchResults').empty();
            $('#popularBooks').html('<div class="col-12 text-center"><i class="fas fa-spinner fa-spin"></i> Yükleniyor...</div>');

            $.get('@Url.Action("GetPopularBooks", "Book")', function(data) {
                if (data && data.length > 0) {
                    $('#popularBooks').empty();
                    data.forEach(book => {
                        $('#popularBooks').append(renderBookCard(book));
                    });
                } else {
                    $('#popularBooks').html('<div class="col-12 text-center">Popüler kitap bulunamadı.</div>');
                }
            }).fail(function() {
                $('#popularBooks').html('<div class="col-12 text-center text-danger">Popüler kitaplar yüklenirken hata oluştu.</div>');
            });
        }

        // Kitapları ara
               function searchBooks(query) {
            $('#popularBooks').empty();
            $('#searchResults').html('<div class="col-12 text-center"><i class="fas fa-spinner fa-spin"></i> Aranıyor...</div>');
            $('#errorMessage').addClass('d-none');

            $.get('@Url.Action("SearchInApi", "Book")', {
                query: query,
                returnJson: true
            }, function(data) {
                $('#searchResults').empty();
                if (data.error) {
                    $('#errorMessage').removeClass('d-none').text(data.error);
                } else if (data && data.length > 0) {
                    data.forEach(book => {
                        $('#searchResults').append(renderBookCard(book));
                    });
                } else {
                    $('#searchResults').html('<div class="col-12 text-center">Sonuç bulunamadı.</div>');
                }
            }).fail(function(jqXHR, textStatus, errorThrown) {
                console.error("Arama hatası:", textStatus, errorThrown);
                $('#errorMessage').removeClass('d-none')
                    .text('Arama yapılırken hata oluştu: ' + textStatus);
            });
        }
          // Kitap kartı oluştur
                        function renderBookCard(book) {
            return `
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="book-card card h-100" data-id="${book.id}">
                        <div class="book-cover-container">
                            <img src="${book.thumbnailUrl || '/images/book.png'}"
                                 class="book-cover"
                                 alt="${book.title || 'Kitap kapağı'}"
                                 style="width:150px; height:auto;">
                        </div>
                        <div class="book-details">
                            <h5 class="book-title">${book.title || 'Başlık yok'}</h5>
                            <p class="book-author"><strong>Yazar:</strong> ${book.author || 'Bilinmiyor'}</p>
                            <p class="book-meta"><strong>Yayınevi:</strong> ${book.publisher || 'Bilinmiyor'}</p>
                            <p class="book-meta"><strong>ISBN:</strong> ${book.isbn || 'Bilinmiyor'}</p>
                            <p class="book-meta"><small class="text-muted">Yayın Tarihi: ${book.publishedDate || 'Bilinmiyor'}</small></p>

                            <form class="add-book-form mt-auto" method="post" action="@Url.Action("AddFromApi", "Book")">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="bookId" value="${book.id}" />
                                <input type="hidden" name="isbn" value="${book.isbn}" />
                                <input type="hidden" name="title" value="${book.title}" />
                                <input type="hidden" name="author" value="${book.author}" />
                                <input type="hidden" name="publisher" value="${book.publisher}" />
                                <input type="hidden" name="thumbnailUrl" value="${book.thumbnailUrl}" />
                                <input type="hidden" name="category" value="${book.category}" />
                                <input type="hidden" name="description" value="${book.description}" />
                                <button type="submit" class="btn btn-success btn-block mt-3">
                                    <i class="fas fa-plus-circle"></i> Kütüphaneye Ekle
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            `;
        }

        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('customf-filter-modal');
            const closeBtn = document.querySelector('.customf-close');

            window.onclick = function (event) {
                if (event.target === modal) modal.style.display = 'none';
            };

            closeBtn.onclick = function () {
                modal.style.display = 'none';
            };
        });

                // Kart tıklama -> detay aç
        $(document).on('click', '.book-card', function (e) {
            // İçerideki form/btn tıklanırsa kart click çalışmasın
            if ($(e.target).closest('button, a, form, input').length) return;
            const id = $(this).data('id');
            showBookDetailsInModal(id);
        });

        // Detay görünümünü yükle
        function showBookDetailsInModal(googleId) {
            // Görünümleri değiştir
            $('#googleBooksSearchForm, #popularBooks, #searchResults').hide();
            $('#bookDetailView')
                .removeClass('d-none')
                .html('<div class="text-center py-5"><i class="fas fa-spinner fa-spin"></i> Yükleniyor...</div>');

            // Sunucudan tek kitap detayını JSON al (id ile)
            $.get('@Url.Action("GetBookByIdFromApi", "Book")', { id: googleId }, function (data) {
                // data: { id, title, author, publisher, isbn, publishedDate, language, pageCount, description, thumbnailUrl, category ... }
                $('#bookDetailView').html(renderBookDetail(data));
            }).fail(function () {
                $('#bookDetailView').html('<div class="alert alert-danger">Detaylar yüklenirken bir hata oluştu.</div>');
            });
        }

        // Detay görünümü şablonu
                function renderBookDetail(book) {
          const rawThumb = (book.thumbnailUrl || '/images/book.png').replace('http://','https://');
          // Google Books’tan daha büyük görsel denemesi (zoom=2’ye yükselt)
          const thumb = rawThumb.replace('zoom=1', 'zoom=2');

          const desc   = book.description || 'Açıklama bulunamadı.';
          const lang   = book.language || 'Bilinmiyor';
          const page   = book.pageCount || 'Bilinmiyor';
          const pub    = book.publisher || 'Bilinmiyor';
          const cat    = book.category || 'Bilinmiyor';
          const isbn   = book.isbn || 'Bilinmiyor';
          const title  = book.title || 'Başlık yok';
          const author = book.author || 'Bilinmiyor';

          return `
            <div class="container-fluid">
              <div class="row">
                <!-- SOL: Kapak -->
                <div class="col-md-4 d-flex justify-content-center align-items-start mb-3 mb-md-0">
                  <img src="${thumb}" class="detail-cover img-fluid rounded shadow" alt="${title}">
                </div>

                <!-- SAĞ: Bilgiler -->
                <div class="col-md-8">
                  <h3 class="mb-1">${title}</h3>
                  <h5 class="text-muted">${author}</h5>
                  <hr/>
                  <div class="mb-2"><strong>ISBN:</strong> ${isbn}</div>
                  <div class="mb-2"><strong>Yayınevi:</strong> ${pub}</div>
                  <div class="mb-2"><strong>Kategori:</strong> ${cat}</div>
                  <div class="mb-2"><strong>Yayın Tarihi:</strong> ${book.publishedDate || 'Bilinmiyor'}</div>
                  <div class="mb-2"><strong>Dil:</strong> ${lang}</div>
                  <div class="mb-2"><strong>Sayfa:</strong> ${page}</div>

                  <div class="mt-3 p-3 bg-light rounded" style="max-height: 260px; overflow:auto;">
                    <h6 class="mb-2">Açıklama</h6>
                    <div>${desc}</div>
                  </div>

                  <div class="d-flex flex-wrap gap-2 mt-4">
                    <form method="post" action="@Url.Action("AddFromApi", "Book")" class="mr-2">
                      @Html.AntiForgeryToken()
                      <input type="hidden" name="bookId" value="${book.id}">
                      <input type="hidden" name="isbn" value="${book.isbn}">
                      <input type="hidden" name="title" value="${title}">
                      <input type="hidden" name="author" value="${author}">
                      <input type="hidden" name="publisher" value="${pub}">
                      <input type="hidden" name="thumbnailUrl" value="${rawThumb}">
                      <input type="hidden" name="category" value="${cat}">
                      <input type="hidden" name="description" value="${desc}">
                      <button type="submit" class="btn btn-success">
                        <i class="fas fa-plus-circle"></i> Kütüphaneye Ekle
                      </button>
                    </form>

                    ${book.previewLink ? `
                      <a href="${book.previewLink}" target="_blank" class="btn btn-outline-primary">
                        <i class="fas fa-external-link-alt"></i> Google Books’ta Önizle
                      </a>` : ``}

                    <button type="button" class="btn btn-secondary" onclick="closeBookDetailInModal()">
                      <i class="fas fa-arrow-left"></i> Geri Dön
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
        }


        // Detaydan listeye geri dön
        function closeBookDetailInModal() {
            $('#bookDetailView').addClass('d-none').empty();
            $('#googleBooksSearchForm, #popularBooks, #searchResults').show();
        }
        function deleteBook(id) {
            Swal.fire({
                title: "Silmek istediğinize emin misiniz?",
                text: "Bu işlemi geri alamazsınız!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#0b1220",
                cancelButtonColor: "#d33",
                confirmButtonText: "Evet, Sil!",
                cancelButtonText: "İptal"
            }).then((result) => {
                if (result.isConfirmed) {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Book/DeleteConfirmed/' + id;

                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token;

                    form.appendChild(tokenInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }
                           function updateFilterBadge() {
          const count = Object.values(previousFilterValues || {})
            .filter(v => v && Object.values(v).some(x => x && String(x).trim() !== ''))
            .length;

          const $btn = $('.customf-filter-button');

          // Rozeti yeniden oluştur
          $btn.find('.filter-badge').remove();

          // Butonu konumlandır (CSS yazmadan inline)
          $btn.css({ position: 'relative', overflow: 'visible' });

          if (count > 0) {
            // Rozeti sağ ÜST iç köşeye yerleştir (taşmadan görünsün)
            $btn.append(
              `<span class="filter-badge" style="
                position:absolute;
                top:2px;            /* dilersen 4-6px yapabilirsin */
                right:2px;          /* dilersen 4-6px yapabilirsin */
                transform: translate(0,0);
                min-width:18px;
                height:18px;
                padding:0 6px;
                border-radius:9999px;
                display:flex;align-items:center;justify-content:center;
                font-size:11px;font-weight:800;
                background:#ef4444;color:#fff;
                line-height:1; z-index:3;
                box-shadow:0 6px 14px rgba(239,68,68,.35);
              ">${count}</span>`
            );
          }
        }


    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        (function(){
          const BRAND={c900:'#0b1220', c700:'#0b1220', c500:'#0b1220', c300:'#0b1220'};
          let chAvail=null, chCats=null;

          function withDT(cb){
            if ($.fn.dataTable && $.fn.dataTable.isDataTable('#bookTable'))
              return cb($('#bookTable').DataTable());
            const t=setInterval(function(){
              if ($.fn.dataTable && $.fn.dataTable.isDataTable('#bookTable')){
                clearInterval(t); cb($('#bookTable').DataTable());
              }
            },50);
          }

          function renderStats(dt){
            const nodes = dt.rows({ search:'applied' }).nodes().to$();
            const status = { 'Müsait':0, 'Tükenmek Üzere':0, 'Tükenmiş':0 };
            const catsMap = {};

            nodes.each(function(){
              const $tr=$(this);
              const st = $tr.find('td').eq(0).text();
              if (st.indexOf('Tükenmek Üzere')>-1) status['Tükenmek Üzere']++;
              else if (st.indexOf('Tükenmiş')>-1)   status['Tükenmiş']++;
              else if (st.indexOf('Müsait')>-1)     status['Müsait']++;

              const cat = $tr.find('td').eq(4).text().trim();
              if (cat) catsMap[cat]=(catsMap[cat]||0)+1;
            });

            // Donut
            const el1=document.getElementById('libStatAvailability');
            if (el1){
              const data1={
                labels:Object.keys(status),
                datasets:[{ data:Object.values(status), backgroundColor:['#16a34a','#f59e0b','#ef4444'], borderWidth:0 }]

              };
              if(chAvail){ chAvail.data=data1; chAvail.update(); }
              else{ chAvail=new Chart(el1,{type:'doughnut',data:data1,options:{plugins:{legend:{position:'bottom'}},cutout:'62%'}}); }
            }

            // Kategori (ilk 8)
            const top = Object.entries(catsMap).sort((a,b)=>b[1]-a[1]).slice(0,8);
            const labels = top.map(x=>x[0]), vals = top.map(x=>x[1]);
            const el2=document.getElementById('libStatCategories');
            if (el2){
              const data2={ labels, datasets:[{ label:'Adet', data:vals, backgroundColor:BRAND.c700, borderRadius:6, maxBarThickness:32 }] };
              const opts2={ plugins:{ legend:{ display:false } }, scales:{ x:{ grid:{ display:false } }, y:{ beginAtZero:true, grid:{ color:'rgba(0,0,0,.06)' } } } };
              if(chCats){ chCats.data=data2; chCats.update(); } else { chCats=new Chart(el2,{type:'bar',data:data2,options:opts2}); }
            }
          }

          // Filtre rozeti sayısını güncel tut (mevcut fonksiyona dokunmadan)
          $(document).on('click','#customf-apply-filter,#customf-clear-filter',function(){
            setTimeout(function(){ if (typeof updateFilterBadge==='function') updateFilterBadge(); },0);
          });

          // Çalıştır
          withDT(function(dt){
            renderStats(dt);
            $('#bookTable').on('draw.dt', function(){ renderStats(dt); });
          });
        })();
                function getDetailColIndex(){
          return $('#bookTable thead th').filter(function(){
            return $(this).text().trim() === 'Detay';
          }).index();
        }

      
    </script>
    <script>
               (function(){
          const PREFIX = 'lib_toggle_';


          function setIcon(el, isOn){
            const on  = el.dataset.on  || '';
            const off = el.dataset.off || '';
            el.className = isOn ? on : off;
          }

          // ➜ YENİ: ikon sağa/sola taşıyan yardımcı
          function applySwapFromState(el, isOn){
            const link = el.closest('.sidebar-link');
            if (link) link.classList.toggle('icon-right', isOn);
          }

          // Başlangıç: kayıtlı durumu yükle
          document.querySelectorAll('.js-toggle-icon').forEach(el=>{
            const key = el.dataset.key ? (PREFIX + el.dataset.key) : null;
            const saved = key ? localStorage.getItem(key) : null;
            const isOn = saved === 'on';
            setIcon(el, isOn);
            applySwapFromState(el, isOn); // ← YENİ: sayfa yüklenirken konumu uygula
          });

          // Tıklama
          document.addEventListener('click', function(e){
            const el = e.target.closest('.js-toggle-icon');
            if(!el) return;

            e.preventDefault(); // linke gitmesin (ikon tıklanınca)
            e.stopPropagation();

            const nowOn = !(el.className === (el.dataset.on || ''));
            setIcon(el, nowOn);
            applySwapFromState(el, nowOn); // ← YENİ: ikon konumunu güncelle

            const key = el.dataset.key ? (PREFIX + el.dataset.key) : null;
            if(key) localStorage.setItem(key, nowOn ? 'on' : 'off');

            const cbName = el.dataset.callback;
            const cb = cbName && window[cbName];
            if(typeof cb === 'function') cb(nowOn, el);

            const ev = new CustomEvent('toggle:changed', { detail: { on: nowOn, el }});
            el.dispatchEvent(ev);
          });
        })();

    </script>
    <script>
        (function moveBookIconRight(){
          var $bookLink = $('a.sidebar-link').filter(function(){
            var href = ($(this).attr('href')||'').toLowerCase();
            var txt  = ($(this).text()||'').toLowerCase();
            return href.indexOf('/book') >= 0 || txt.indexOf('kitap') >= 0;
          }).first();
          if(!$bookLink.length) return;

          // Ikonu sağa alacak sınıf
          $bookLink.addClass('icon-right');

          // İkon yoksa ekle, varsa kitap ikonuna çevir
          var $i = $bookLink.find('i').first();
          if(!$i.length){
            $bookLink.prepend('<i class="mdi mdi-book-open-page-variant" aria-hidden="true"></i>');
          } else {
            // sadece ikon tipini kitap yap (mdi kullanıyorsan)
            $i.attr('class','mdi mdi-book-open-page-variant');
            // (Font Awesome kullanıyorsan: $i.attr('class','fas fa-book-open'); )
          }
        })();
    </script>

    <script>
        // --- GENEL DURUM ---
        let _scanBusy = false;
        let html5Scanner = null;     // Html5QrcodeScanner örneği
        let quaggaRunning = false;   // Quagga çalışıyor mu?

        // --- YARDIMCILAR ---
        function normalizeIsbn13(s) {
          const digits = (s||'').replace(/\D/g,'');
          if (digits.length !== 13) return null;
          if (!/^97[89]/.test(digits)) return null;
          let sum = 0;
          for (let i=0;i<12;i++) sum += (i%2?3:1) * (digits.charCodeAt(i)-48);
          const check = (10 - (sum % 10)) % 10;
          return check === (digits.charCodeAt(12)-48) ? digits : null;
        }

        async function stopScanEngine() {
          // Html5Qrcode kapat
          if (html5Scanner) {
            try { await html5Scanner.clear(); } catch(e) { console.warn('html5 clear failed', e); }
            html5Scanner = null;
          }
          // Quagga kapat
          if (window.Quagga && quaggaRunning) {
            try {
              Quagga.offDetected(onQuaggaDetected);
              Quagga.stop();
            } catch(e) { console.warn('quagga stop failed', e); }
            quaggaRunning = false;
          }
        }

        async function handleDecodedIsbn(isbn) {
          if (!isbn || _scanBusy) return;
          _scanBusy = true;
          openFromScanner = true;

          await stopScanEngine();

          // ISBN modalı Bootstrap değil → kendi kapatma fonksiyonunuzu kullanın
          if ($('#isbnModal').is(':visible')) {
            await closeIsbnModal();
          }

          // Google Books modalını aç ve aramayı hemen TETİKLE
          let started = false;
          const doSearch = () => {
            if (started) return; // çifte çalışmayı engelle
            started = true;

            const $q = $('#googleBooksSearchForm input[name="query"]');
            $q.val(isbn);

            $('#popularBooks').empty();
            $('#searchResults')
              .empty()
              .html('<div class="col-12 text-center"><i class="fas fa-spinner fa-spin"></i> Sorgulanıyor...</div>');
            $('#errorMessage').addClass('d-none').text('');

            const scope = ($('#lookup-scope').val() || 'both');

            $.get('@Url.Action("LookupIsbn", "Book")', { isbn, scope })
              .done(function (data) {
                $('#searchResults').empty();

                // Yerel kayıt
                if (data && data.local) {
                  const b = data.local;
                  $('#searchResults').append(`
                    <div class="col-12">
                      <div class="card mb-3 border-success">
                        <div class="card-body d-flex">
                          <img src="${b.thumbnailUrl || '/images/book.png'}" style="width:90px;height:auto" class="mr-3"/>
                          <div class="flex-grow-1">
                            <div class="d-flex align-items-center mb-1">
                              <span class="badge badge-success mr-2">Kütüphane Kaydı</span>
                              <strong>${b.title}</strong>
                            </div>
                            <div><b>Yazar:</b> ${b.author} &nbsp; <b>ISBN:</b> ${b.isbn ?? ''}</div>
                            <div><b>Kategori:</b> ${b.category} &nbsp; <b>Yayınevi:</b> ${b.publisher ?? 'Bilinmiyor'}</div>
                            <div class="mt-1"><b>Stok:</b> ${b.available}/${b.total}</div>
                            <div class="mt-2">
                              <a href="/Book/Details/${b.id}" class="btn btn-sm btn-info">
                                <i class="fas fa-info-circle"></i> Detay
                              </a>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>`);
                }

                // Google sonucu
                if (data && data.google) {
                  $('#searchResults').append(renderBookCard({
                    id: data.google.id,
                    title: data.google.title,
                    author: data.google.author,
                    publisher: data.google.publisher,
                    isbn: data.google.isbn13 || data.google.isbn10 || '',
                    publishedDate: data.google.publishedDate || 'Bilinmiyor',
                    thumbnailUrl: data.google.thumbnailUrl || '/images/book.png',
                    category: data.google.category || 'Genel',
                    description: data.google.description || ''
                  }));
                }

                if (!data || (!data.local && !data.google)) {
                  $('#searchResults').html('<div class="col-12 text-center">Sonuç bulunamadı.</div>');
                }
              })
              .fail(function () {
                $('#searchResults').empty();
                $('#errorMessage').removeClass('d-none').text('Sorgu sırasında bir hata oluştu.');
              })
              .always(function () {
                _scanBusy = false;
                openFromScanner = false;
              });
          };

          // Bootstrap varsa shown.bs.modal yakala
          $('#googleBooksModal').one('shown.bs.modal', doSearch).modal('show');

          // Emniyet: etkinlik gelmezse kısa bir gecikmeyle yine tetikle
          setTimeout(function(){
            if ($('#googleBooksModal').hasClass('show')) doSearch();
          }, 400);
        }


          function startHtml5Qrcode() {
          $('#isbnReader').empty();

                html5Scanner = new Html5QrcodeScanner("isbnReader", {
          fps: 12,
          qrbox: (vw, vh) => ({ width: Math.floor(vw*0.92), height: Math.min(160, Math.floor(vh*0.22)) }),
          aspectRatio: 2.2, // 1D için geniş kutu
          rememberLastUsedCamera: true,
          formatsToSupport: [ Html5QrcodeSupportedFormats.EAN_13 ],
          experimentalFeatures: { useBarCodeDetectorIfSupported: true },
          showTorchButtonIfSupported: true,
          showZoomSliderIfSupported: true,
          videoConstraints: {
            facingMode: { ideal: "environment" },
            width: { ideal: 1280 }, // 1920 bazı cihazlarda düşüyor; 1280 daha stabil
            focusMode: "continuous"
          }
        }, /*verbose*/ false);

          html5Scanner.render(
            function onSuccess(text) {
              const isbn = normalizeIsbn13(text);
              if (isbn) handleDecodedIsbn(isbn);
            },
            function onFailure(_) { /* sessiz geç */ }
          );
          markAllCanvasWillReadFrequently('#isbnReader');
        }


               function startQuagga() {
          $('#isbnReader').empty();
          const targetEl = document.getElementById('isbnReader');

          Quagga.init({
            inputStream: {
              name: "Live",
              type: "LiveStream",
              target: targetEl,
              constraints: {
                facingMode: "environment",
                width:  { ideal: 1920 },
                height: { ideal: 1080 }
              }
            },
            locator: { patchSize: "x-large", halfSample: true },
            numOfWorkers: Math.max(1, Math.min(4, (navigator.hardwareConcurrency || 2) - 1)),
            frequency: 12,
            locate: true,
            decoder: { readers: ["ean_reader"] }
          }, function (err) {
            if (err) { console.error(err); return; }
            Quagga.start();
            quaggaRunning = true;

            // Canvas performans uyarısını azalt
            markAllCanvasWillReadFrequently(targetEl);

            // Görsel geri bildirim (kutular)
            Quagga.onProcessed(function (res) {
              const ctx = Quagga.canvas?.ctx?.overlay;
              const cvs = Quagga.canvas?.dom?.overlay;
              if (!ctx || !cvs) return;
              ctx.clearRect(0, 0, cvs.width, cvs.height);

              if (res?.boxes) {
                res.boxes.filter(b => b !== res.box).forEach(b => {
                  Quagga.ImageDebug.drawPath(b, { x: 0, y: 1 }, ctx, { color: "#9e9e9e", lineWidth: 1 });
                });
              }
              if (res?.box) {
                Quagga.ImageDebug.drawPath(res.box, { x: 0, y: 1 }, ctx, { color: "#00c853", lineWidth: 2 });
              }
            });
          });

          Quagga.onDetected(onQuaggaDetected);
        }



        function onQuaggaDetected(result) {
          const code = result?.codeResult?.code;
          const isbn = normalizeIsbn13(code);
          if (isbn) handleDecodedIsbn(isbn);
        }

              let _isbnOpenerEl = null;   // modalı açan buton
        async function openIsbnModal(){
          _isbnOpenerEl = document.activeElement;

          const $m = $('#isbnModal');
          $m.addClass('show').css('display','block').attr('aria-hidden','false');

          // Modal görünür olduktan hemen sonra taramayı başlat
          setTimeout(async () => {
            await stopScanEngine();

            // BarcodeDetector varsa ve GERÇEKTEN EAN-13 destekliyorsa html5-qrcode, yoksa Quagga
            let useBD = false;
            if ('BarcodeDetector' in window && typeof BarcodeDetector.getSupportedFormats === 'function') {
              try {
                const fmts = await BarcodeDetector.getSupportedFormats();
                const hasEAN13 = fmts.map(f => String(f).toLowerCase())
                                     .some(f => f === 'ean_13' || f === 'ean-13' || f === 'ean13');
                useBD = hasEAN13;
              } catch(_) { /* yoksay */ }
            }
            if (useBD) startHtml5Qrcode(); else startQuagga();

            // Odak kapat butonuna
            document.getElementById('btnIsbnClose')?.focus({preventScroll:true});
          }, 0);
        }

        async function closeIsbnModal(){
          // KAPATMADAN ÖNCE odağı modal dışına al → a11y uyarısı çözülür
          const fallback = document.getElementById('btnIsbnScan') || document.body;
          if ($('#isbnModal').find(':focus').length) {
            (_isbnOpenerEl || fallback).focus({preventScroll:true});
          }

          await stopScanEngine();

          $('#isbnModal')
            .removeClass('show')
            .css('display','none')
            .attr('aria-hidden','true');
        }

        $('#btnIsbnScan').on('click', openIsbnModal);
        $('#btnIsbnClose').on('click', closeIsbnModal);
        $('#isbnModal').on('click', e => { if (e.target === e.currentTarget) closeIsbnModal(); });
        $('#isbnModal').on('keydown', e => { if (e.key === 'Escape') closeIsbnModal(); });
                // Tüm canvaslar için willReadFrequently uygula (uyarıyı azaltır)
        function markAllCanvasWillReadFrequently(root){
          const rootEl = (typeof root==='string') ? document.querySelector(root) : root;
          try {
            (rootEl || document).querySelectorAll('canvas').forEach(cv=>{
              try { cv.getContext('2d', { willReadFrequently: true }); } catch(_) {}
            });
          } catch(_) {}
        }

             async function decodeIsbnFromFile(file){
          if(!file) return;

          // 1) BarcodeDetector (çoğu modern cihazda çok iyi)
          if ('BarcodeDetector' in window) {
            try {
              const bitmap = await createImageBitmap(file);
              const bd = new BarcodeDetector({ formats: ['ean_13'] });
              const hits = await bd.detect(bitmap);
              const raw = hits.find(h => h.format?.toLowerCase().includes('ean'))?.rawValue;
              const isbn = normalizeIsbn13(raw);
              if (isbn) { handleDecodedIsbn(isbn); return; }
            } catch(_) { /* devam */ }
          }

          // 2) Quagga - 0/90/180/270 derece dene
          const img = await new Promise(r => { const i=new Image(); i.onload=()=>r(i); i.src = URL.createObjectURL(file); });
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d', { willReadFrequently:true });

          for (const rot of [0,90,180,270]) {
            const rad = rot*Math.PI/180;
            const w = img.width, h = img.height;
            if (rot % 180 === 0) { canvas.width=w; canvas.height=h; }
            else { canvas.width=h; canvas.height=w; }

            // döndür ve çiz
            ctx.setTransform(1,0,0,1,0,0);
            ctx.translate(canvas.width/2, canvas.height/2);
            ctx.rotate(rad);
            ctx.drawImage(img, -w/2, -h/2);

            const dataUrl = canvas.toDataURL('image/jpeg', 0.95);

            const ok = await new Promise(res => {
              Quagga.decodeSingle({
                src: dataUrl,
                inputStream: { size: 1280, singleChannel: false },
                locator: { patchSize: 'medium', halfSample: false },
                locate: true,
                decoder: { readers: ['ean_reader'] }
              }, (r) => {
                const code = r?.codeResult?.code;
                const isbn = normalizeIsbn13(code);
                res(isbn || null);
              });
            });

            if (ok) { handleDecodedIsbn(ok); return; }
          }

          Swal.fire({ icon:'warning', title:'Okunamadı', text:'Barkodu biraz daha yakından, parlama olmadan ve kenarlarda beyaz boşluk bırakarak çekip tekrar deneyin.' , zIndex:50000 });
        }


        // Kalıcı butonun change olayı
        $(document).on('change', '#isbnFile', function(e){
          const f = e.target.files?.[0];
          decodeIsbnFromFile(f);
          e.target.value = ''; // aynı dosyayı tekrar seçebilmek için temizle
        });

    </script>
    <script>
        async function openPhoneScan(){
          // 1) oturum token'i
          const token = crypto.getRandomValues(new Uint32Array(2)).join('');

          // 2) telefonun açacağı URL (QR içine gömülecek)
          // Geliştirmede: telefon 'localhost'a erişemez. 5. adımı oku.
          const phoneUrl = `${location.origin}/Book/ScanPhone?token=${token}`;

          // 3) QR üret + modal aç
          $('#scanQr').empty();
          new QRCode(document.getElementById('scanQr'), { text: phoneUrl, width: 220, height: 220 });
          $('#phoneScanModal').modal('show');

          // 4) SignalR bağlan, bu token için gruba gir
          const conn = new signalR.HubConnectionBuilder()
              .withUrl('/hubs/scan')
              .withAutomaticReconnect()
              .build();

          await conn.start();
          await conn.invoke('Join', token);

          // 5) telefondan ISBN gelince mevcut akışını tetikle
          conn.on('isbn', async (isbn)=>{
            try {
              // zaten sende var: Google modalını açıp LookupIsbn çağırıyor, vs.
              await handleDecodedIsbn(isbn);
            } finally {
              $('#phoneScanModal').modal('hide');
              conn.stop();
            }
          });
        }
    </script>


}
