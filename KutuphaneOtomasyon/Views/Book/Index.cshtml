@model List<KutuphaneOtomasyon.Models.Book>
@{
    ViewData["Title"] = "Kitap Listesi";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>

    .customf-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        overflow: hidden;
    }


    .customf-modal-content {
        background: #fff;
        border-radius: 16px;
        width: 90%;
        max-width: 480px;
        margin: 5% auto;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', sans-serif;
        display: flex;
        flex-direction: column;
        max-height: 90vh;
        overflow: hidden;
        padding: 0;
    }

    .customf-modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .customf-modal-title i {
            font-size: 20px;
            color: #52616B;
            background-color: #fafafa;
            padding: 8px;
            border-radius: 50%;
            box-shadow: 0 0 4px rgba(0,0,0,0.1);
        }

    .customf-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 32px 12px 32px;
        border-bottom: 1px solid #eee;
        background-color: #fff;
        position: sticky;
        top: 0;
        z-index: 10;
    }

        .customf-modal-header h5 {
            font-size: 22px;
            margin: 0;
            font-weight: 600;
            color: #333;
        }

    /* Dropdown kutusunun bulunduğu alan */
    .customf-modal-dropdown {
        padding: 16px 32px 0 32px;
        background: #fafafa;
        border-bottom: 1px solid #eee;
        position: sticky;
        top: 58px; /* header yüksekliği kadar */
        z-index: 9;
        padding-bottom: 30px;
    }

    .customf-modal-body {
        padding: 24px 32px;
        overflow-y: auto;
        flex: 1;
    }

    .customf-modal-dropdown .customf-input-group {
        margin-bottom: 0;
    }

    .customf-modal-footer {
        padding: 16px 32px 24px 32px;
        border-top: 1px solid #eee;
        background: #fff;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .customf-close {
        float: right;
        font-size: 22px;
        font-weight: 600;
        color: #bbb;
        cursor: pointer;
        transition: color 0.2s ease-in-out;
        background-color: #f2f2f2;
        border-radius: 40%;
        padding: 1px 9px;
        transition: all 0.3s ease;
    }

        .customf-close:hover {
            background-color: #e0e0e0;
            color: #000;
        }
        /* Çarpı simgesi ikonla beraber düzgün görünsün */
        .customf-close i {
            pointer-events: none;
        }

    .customf-modal-content h5 {
        font-size: 22px;
        color: #333;
        font-weight: 600;
    }

    .customf-input-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

        .customf-input-group label {
            font-weight: 500;
            margin-bottom: 6px;
            font-size: 15px;
            color: #444;
        }

        .customf-input-group input,
        .customf-input-group select {
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 10px;
            font-size: 15px;
            background: #fff;
            transition: all 0.25s ease-in-out;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
        }

            .customf-input-group input:focus,
            .customf-input-group select:focus {
                border-color: #C9D6DF;
                background: #fefefe;
                box-shadow: 0 0 0 3px rgba(201, 214, 223, 1);
                outline: none;
            }

    .customf-button-group {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

        .customf-button-group .customf-btn {
            flex: unset;
            text-align: center;
        }

    .customf-btn {
        color: #fff;
        font-size: 16px;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.1s ease;
    }

    .customf-filter-btn {
        width: 75%;
        background: linear-gradient(135deg,#C9D6DF, #52616B);
    }

        .customf-filter-btn:hover {
            background: linear-gradient(135deg, #52616B,#C9D6DF);
        }

    .customf-clear-btn {
        color: #000;
        width: 25%;
        background: linear-gradient(135deg, #ffffff, #C9D6DF);
    }

        .customf-clear-btn:hover {
            background: linear-gradient(135deg, #C9D6DF,#ffffff );
        }

        .customf-clear-btn:focus,
        .customf-filter-btn:focus {
            outline: none !important;
            box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);
            border: none !important;
        }
    /* Select2 Seçim Görünümü */
    .select2-container--default .select2-selection--multiple .select2-selection__choice {
        background-color: #F0F5F9 !important;
        color: #333 ;
        border: none !important;
        font-weight: 600 ;
        padding: 10px 12px; /* Dikey ve yatay boşluğu artırarak etiketi büyüt */
        font-size: 1.05em; /* Yazı boyutunu biraz daha büyüt */
        margin-top: 4px; /* Üstten boşluğu biraz artır (birden fazla satırda daha iyi görünür) */
        margin-right: 6px; /* Sağdan boşluğu koru */
        /* Seçili öğe içindeki "x" butonunun dikey hizalanması için */
        display: flex;
        align-items: center;
        gap: 5px; /* Metin ile "x" arasında boşluk */
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
        color: #666 ;
        font-size: 1.1em;
    }

        .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {
            color: #000 ;
        }

    .select2-container--default .select2-selection--multiple {
        min-height: 42px !important;
        height: auto !important;
        overflow-y: auto;
        max-height: 120px;
        padding-bottom: 6px;
        scrollbar-width: none;
        -ms-overflow-style: none;
        background-color: #fff !important;
        border-radius: 10px;
        border: 1px solid #ccc;
        padding: 6px;
        line-height: normal;
    }

    .select2-container--default .select2-selection--multiple::-webkit-scrollbar {
        display: none;
    }

    /* Dropdown Açılır Liste Seçenekleri */
    .select2-container--default .select2-results__option {
        padding: 10px 14px;
        font-size: 15px;
        color: #333;
        background-color: #fff;
        transition: background 0.2s ease-in-out;
        border-bottom: 1px solid #f0f0f0;
    }

    /* Hover efekti: Mor tema */
    .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background: linear-gradient(135deg, #ffffff, #F0F5F9) !important;
        color: #fff !important;
        font-weight: 600;
        border-radius: 6px;
        outline: none !important;

    }

    /* Seçili olan öğe */
    .select2-container--default .select2-results__option[aria-selected="true"] {
        background-color: #F0F5F9 !important;
        color: #222 !important;
        font-weight: 500;
        outline: none !important;
    }

    /* Dropdown kutusu */
    .select2-container--default .select2-dropdown {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', sans-serif;
    }

    /* Dropdown arama kutusu */
    .select2-container--default .select2-search--dropdown .select2-search__field {
        padding: 8px 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 14px;
        margin-bottom: 8px;
    }

    /* Mavi odak çizgilerini kaldır */
    .select2-container--default .select2-selection--multiple:focus,
    .select2-container--default .select2-selection--single:focus,
    .select2-container--default .select2-dropdown:focus,
    .select2-container--default .select2-selection:focus-visible {
        outline: none !important;
        border-color: #F0F5F9 !important;
        box-shadow: none !important;
    }

    .empty-placeholder {
        text-align: center;
        padding: 30px 20px;
        color: #666;
        font-size: 16px;
        background: #fafafa;
        border-radius: 12px;
        box-shadow: inset 0 0 10px rgba(0,0,0,0.03);
    }

        .empty-placeholder i {
            font-size: 32px;
            color: #ccc;
        }

    .customf-inline-inputs {
        display: flex;
        justify-content: space-between;
        gap: 0%;
    }

        .customf-inline-inputs input[type="number"],
        .customf-inline-inputs input[type="datetime-local"] {
            flex: 1;
            width: 48%;
            display: inline-block;
            margin-right: 4%;
        }

    .customf-input-group input[type="datetime-local"]:last-child,
    .customf-input-group input[type="number"]:last-child {
        margin-right: 0;
    }
    /* Google Books Modal Stilleri */
    #googleBooksModal .modal-dialog {
        max-width: 95%;
        width: 1200px; /* Genişliği artırdık */
        margin: 1.75rem auto;
    }

    #googleBooksModal .modal-content {
        min-height: 80vh; /* Yüksekliği artırdık */
    }

    #googleBooksModal .modal-body {
        max-height: 70vh;
        overflow-y: auto;
        padding: 20px;
    }

    /* Kitap kartları için düzenlemeler */
    .book-card {
        margin-bottom: 25px;
        transition: all 0.3s ease;
        height: 100%;
    }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }

    .book-cover-container {
        height: 300px; /* Kapak yüksekliğini artırdık */
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        overflow: hidden;
        border-radius: 5px 5px 0 0;
    }

    .book-cover {
        max-height: 100%;
        width: auto;
        object-fit: contain; /* Resmin oranlarını koruyarak sığdırır */
    }

    .book-details {
        padding: 20px;
        background: white;
        border-radius: 0 0 5px 5px;
        height: calc(100% - 300px); /* Kapak yüksekliğine göre ayar */
        display: flex;
        flex-direction: column;
    }

    .book-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 10px;
        color: #333;
    }

    .book-author {
        color: #666;
        margin-bottom: 8px;
    }

    .book-meta {
        font-size: 0.9rem;
        color: #555;
        margin-bottom: 5px;
    }

    /* Responsive düzenlemeler */
    @@media (max-width: 1200px) {
        #googleBooksModal .modal-dialog

    {
        width: 95%;
    }

    .book-cover-container {
        height: 250px;
    }

    }

    @@media (max-width: 768px) {
        .book-cover-container

    {
        height: 200px;
    }

    .book-title {
        font-size: 1.1rem;
    }

    }

    .loading-spinner {
        font-size: 3rem;
        color: #007bff;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .btn {
        transition: transform .12s ease, box-shadow .12s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(0,0,0,0.15);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(0,0,0,0.12);
        }

    .btn-cta {
        background: linear-gradient(135deg, #4e73df, #224abe);
        border: none;
        color: #fff;
        border-radius: 10px;
        font-weight: 600;
        box-shadow: 0 8px 20px rgba(78,115,223,0.25);
        transition: transform .12s ease, box-shadow .12s ease;
    }

        .btn-cta:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(78,115,223,0.35);
        }

        .btn-cta:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(78,115,223,0.25);
        }

    #googleBooksModal .modal-header {
        background: linear-gradient(135deg, #4e73df, #224abe) !important;
        color: #fff !important;
        border-bottom: none !important;
    }

        #googleBooksModal .modal-header .modal-title {
            color: #fff !important;
        }

    #googleBooksModal .close {
        color: #fff !important;
        opacity: 1 !important;
    }

    #googleBooksModal .modal-footer {
        border-top: 2px solid rgba(0,0,0,0.1);
        background-color: #f9f9f9;
        font-size: 0.9rem;
    }

    /* Google Books modal close butonu */
    #googleBooksModal .close {
        outline: none !important;
        box-shadow: none !important;
        color: #fff; /* beyaz ikon */
        opacity: 0.9; /* hafif şeffaf */
        transition: opacity 0.2s ease, transform 0.15s ease;
    }

        #googleBooksModal .close:hover {
            opacity: 1; /* tam beyaz */
            transform: rotate(90deg); /* hover’da ufak animasyon */
        }

        #googleBooksModal .close:focus {
            outline: none !important;
            box-shadow: none !important;
        }

    .btn-cta:focus,
    .btn-cta:active,
    .btn-cta:focus:active {
        background: linear-gradient(135deg, #4e73df, #224abe) !important;
        color: #fff !important;
        outline: none !important;
        box-shadow: 0 0 0 0 transparent !important; /* beyaz glow'u kaldır */
    }

    .book-card {
        cursor: pointer;
    }

        .book-card .btn, .book-card form, .book-card a {
            cursor: default;
        }

    #bookDetailView .detail-cover {
        max-height: 520px; /* 420 → 520 (istersen 560-600 yap) */
        max-width: 100%;
        width: auto;
        height: auto;
        object-fit: contain;
        display: block;
        margin: 0 auto; /* ortalama */
    }

    .dt-elevated {
        border: 0;
        border-radius: 16px;
        background: rgba(255,255,255,.86);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        box-shadow: 0 1px 2px rgba(0,0,0,.06), 0 6px 16px rgba(27,31,35,.08), 0 18px 40px rgba(27,31,35,.10);
        position: relative;
        transition: transform .18s ease, box-shadow .18s ease;
    }

        .dt-elevated:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,.06), 0 12px 26px rgba(27,31,35,.10), 0 28px 60px rgba(27,31,35,.12);
        }

        /* Kartın altında yumuşak “hale” */
        .dt-elevated::after {
            content: "";
            position: absolute;
            inset: auto 8% -14px 8%;
            height: 28px;
            background: radial-gradient(ellipse at center, rgba(0,0,0,.16) 0%, rgba(0,0,0,0) 70%);
            filter: blur(8px);
            pointer-events: none;
        }

    /* Tablo görünümü */
    .dt-pretty {
        border-radius: 12px;
        overflow: hidden;
        background: rgba(255,255,255,.92);
    }

        .dt-pretty thead th {
            position: sticky;
            top: 0;
            z-index: 2;
            background: inherit !important; /* THEAD'in arkaplanını aynen al */
            background-color: inherit !important;
            color: inherit !important; /* text-white devralsın */
            box-shadow: 0 1px 0 rgba(0,0,0,.06);
            backdrop-filter: none;
            -webkit-backdrop-filter: none;
        }

        /* Güvenlik için: thead'e bg-info verilmişse yazılar beyaz kalsın */
        .dt-pretty thead.bg-info th {
            color: #fff !important;
        }

        .dt-pretty td, .dt-pretty th {
            border-color: #eef2f7 !important;
        }

        .dt-pretty tbody tr {
            transition: transform .12s ease, box-shadow .12s ease, background .12s ease;
        }

            .dt-pretty tbody tr:hover {
                background: #f8fbff !important;
                transform: translateY(-1px);
                box-shadow: 0 6px 14px rgba(30,41,59,.06);
            }

    /* Üst bar (arama, buttons) ufak yükselti */
    .dataTables_wrapper .dt-buttons .btn,
    .dataTables_wrapper .dataTables_filter input {
        border-radius: 10px !important;
        border: 1px solid #e6e9f0 !important;
        box-shadow: 0 2px 8px rgba(0,0,0,.06);
    }

    /* Perspectif hissi (opsiyonel ama hoş) */
    .dt-float {
        transform: translateZ(0);
        perspective: 1200px;
    }
    /* Datatables butonları: görünüm + animasyon */
    .dataTables_wrapper .dt-buttons .dt-button.btn-copy,
    .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
        position: relative;
        overflow: hidden; /* hover parıltısı için */
        background: linear-gradient(135deg, #4e73df, #224abe);
        color: #fff !important;
        border: none !important;
        border-radius: 10px !important;
        padding: 10px 14px !important;
        font-weight: 600 !important;
        line-height: 1 !important;
        box-shadow: 0 8px 20px rgba(78,115,223,0.25);
        transition: transform .12s ease, box-shadow .12s ease, filter .18s ease;
    }

        /* İkon ile metin arası boşluk */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy i,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button i {
            margin-right: 6px;
        }

        /* Hover/active durumları */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 12px 26px rgba(78,115,223,0.35);
        }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:active,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:active {
            transform: translateY(0);
            box-shadow: 0 6px 14px rgba(78,115,223,0.25);
        }

        /* Hover’da hafif “parıltı” geçişi */
        .dataTables_wrapper .dt-buttons .dt-button.btn-copy::after,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(120deg, transparent 0%, rgba(255,255,255,.20) 20%, transparent 40%);
            transform: translateX(-120%);
            transition: transform .55s ease;
            border-radius: inherit;
            pointer-events: none;
        }

        .dataTables_wrapper .dt-buttons .dt-button.btn-copy:hover::after,
        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button:hover::after {
            transform: translateX(120%);
        }

    /* Mavi odak halkasını/outline'ı KALDIR */
    .dataTables_wrapper .dt-buttons .dt-button:focus,
    .dataTables_wrapper .dt-buttons .dt-button:focus-visible,
    .dataTables_wrapper .dt-buttons .dt-button:active:focus {
        outline: none !important;
        box-shadow: none !important;
    }

    /* Bazı tarayıcılar için iç odak kenarlığı */
    .dataTables_wrapper .dt-buttons .dt-button::-moz-focus-inner {
        border: 0;
    }

    /* Datatables buton grubu taşmasın diye */
    .dataTables_wrapper .dt-buttons {
        display: flex;
        gap: 8px;
        overflow: visible; /* rozet ve parıltı taşarsa kesilmesin */
    }

        .dataTables_wrapper .dt-buttons .dt-button.customf-filter-button {
            padding-right: 28px !important; /* rozet için sağdan yer */
        }

    .enhanced-search-box button:hover,
    .enhanced-search-box button:focus {
        background-color: #007bff !important; /* normal rengi koru */
        color: #fff !important;
    }

    /* DataTables butonları (Filtre / Copy) */
    .dataTables_wrapper .dt-buttons .dt-button:hover,
    .dataTables_wrapper .dt-buttons .dt-button:focus {
        background: linear-gradient(135deg, #4e73df, #224abe) !important;
        color: #fff !important;
        filter: none !important;
    }
    /* Pagination: temel görünüm */
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        border: 1px solid transparent !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        margin: 0 2px !important;
        background: transparent !important;
        color: inherit !important;
    }

        /* Varsayılan hover’daki siyah kutuyu iptal et ve yumuşak bir hover ver */
        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: rgba(78,115,223,.12) !important; /* hafif mavi */
            border-color: rgba(78,115,223,.25) !important;
            color: #224abe !important;
            box-shadow: 0 2px 8px rgba(78,115,223,.15);
        }

        /* Aktif sayfa (current) */
        .dataTables_wrapper .dataTables_paginate .paginate_button.current,
        .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
            background: linear-gradient(135deg, #4e73df, #224abe) !important;
            color: #fff !important;
            border-color: transparent !important;
            box-shadow: 0 8px 18px rgba(78,115,223,.25) !important;
        }

        /* Disabled (önceki/sonraki pasif) */
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled,
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover {
            background: transparent !important;
            border-color: transparent !important;
            color: #999 !important;
            box-shadow: none !important;
        }

        /* Focus halka kaldır */
        .dataTables_wrapper .dataTables_paginate .paginate_button:focus {
            outline: none !important;
            box-shadow: none !important;
        }

</style>




<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12 d-flex justify-content-between align-items-center flex-wrap">
            <h4 class="card-title mb-0">📚 Kitap Listesi</h4>

            <div class="d-flex align-items-center">
                <button id="searchGoogleBooksBtn" class="btn btn-cta mr-2">
                    <i class="fas fa-search mr-1"></i> Google Books’ta Ara
                </button>

                <a class="btn btn-success btn-rounded waves-effect waves-light" asp-action="Create">
                    <i class="fa fa-plus mr-1"></i> Yeni Kitap Ekle
                </a>
            </div>
        </div>
    </div>



    <!-- Google Books Arama Modalı -->
    <div id="googleBooksModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header ">
                    <h5 class="modal-title">
                        <i class="fas fa-book-open mr-2"></i> Google Books'ta Arama
                    </h5>
                    <button type="button" class="close text-white" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="bookDetailView" class="d-none"></div>
                    <!-- Arama Formu -->
                    <form id="googleBooksSearchForm" class="mb-4">
                        <div class="input-group input-group-lg">
                            <input type="text" name="query" class="form-control"
                                   placeholder="Kitap adı, yazar veya ISBN..."
                                   autocomplete="off">
                            <div class="input-group-append">
                                <button type="submit" class="btn btn-cta">
                                    <i class="fas fa-search"></i> Ara
                                </button>
                            </div>
                        </div>
                    </form>

                    <!-- Popüler Kitaplar -->
                    <div id="popularBooks" class="row">
                        <!-- İçerik dinamik olarak yüklenecek -->
                    </div>

                    <!-- Arama Sonuçları -->
                    <div id="searchResults" class="row">
                        <!-- İçerik dinamik olarak yüklenecek -->
                    </div>

                    <!-- Hata Mesajı -->
                    <div id="errorMessage" class="alert alert-danger d-none"></div>
                </div>
                <div class="modal-footer justify-content-end">
                    <small class="text-muted">Veriler Google Books API üzerinden alınmaktadır.</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Kitap Tablosu -->
    <div class="card dt-elevated">
        <div class="card-body">
            <div class="table-responsive dt-float">
                <table id="bookTable" class="table table-bordered table-hover table-striped dt-pretty">
                    <thead class="bg-info text-white">
                        <tr>
                            <th>Durum</th>
                            <th>ID</th>
                            <th>Başlık</th>
                            <th>Yazar</th>
                            <th>Kategori</th>
                            <th>Toplam</th>
                            <th>Mevcut</th>
                            <th>Detay</th>
                            <th class="text-center">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in Model)
                        {
                            <tr>
                                <td>
                                    @if (book.AvailableCopies > 1)
                                    {
                                        <span class="badge bg-success text-white">Müsait</span>
                                    }
                                    else if (book.AvailableCopies == 1)
                                    {
                                        <span class="badge bg-warning text-white">Tükenmek Üzere</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger text-white">Tükenmiş</span>
                                    }
                                </td>
                                <td>@book.BookId</td>
                                <td>@book.Title</td>
                                <td>@book.Author</td>
                                <td>@book.Category</td>
                                <td>@book.TotalCopies</td>
                                <td>@book.AvailableCopies</td>
                                <td class="text-right">
                                    <a asp-action="Details" asp-route-id="@book.BookId"
                                       class="btn btn-sm btn-info">
                                        <i class="fas fa-info-circle"></i> Detay
                                    </a>
                                </td>
                                <td class="text-center">
                                    <a asp-action="Update" asp-route-id="@book.BookId" class="btn btn-warning btn-sm btn-rounded waves-effect waves-light mr-1">
                                        <i class="fa fa-edit"></i> Güncelle
                                    </a>
                                    <button onclick="deleteBook(@book.BookId)" class="btn btn-danger btn-sm btn-rounded waves-effect waves-light">
                                        <i class="fa fa-trash"></i> Sil
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
       
    </div>
</div>
<!-- 🔍 Filtreleme Modalı -->
<div id="customf-filter-modal" class="customf-modal">
    <div class="customf-modal-content">
        <div class="customf-modal-header">
            <div class="customf-modal-title">
                <i class="fas fa-filter"></i>
                <h5>Filtreleme Seçenekleri</h5>
            </div>
            <span class="customf-close" title="Kapat">
                <i class="fas fa-times"></i>
            </span>
        </div>

        <!-- Dropdown üstte ve sabit -->
        <div class="customf-modal-dropdown">
            <div class="customf-input-group">
                <label for="columnSelector">Filtrelenecek Sütunlar</label>
                <select id="columnSelector" class="select2-column-selector" style="width: 100%;" multiple></select>
            </div>
        </div>

        <!-- Scroll edilebilir içerik -->
        <div class="customf-modal-body">
            <form id="customf-dynamic-filter-form"></form>
        </div>

        <div class="customf-modal-footer">
            <div class="customf-button-group">
                <button id="customf-clear-filter" class="customf-btn customf-clear-btn">Temizle</button>
                <button id="customf-apply-filter" class="customf-btn customf-filter-btn">Filtrele</button>
            </div>
        </div>
    </div>
</div>





<form id="tokenForm">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>


    <script>
        let previousFilterValues = {};
        let selectedColumns = [];
        $(document).ready(function () {
            const table = $('#bookTable').DataTable({
                responsive: true,
                autoWidth: false,
                lengthChange: true,
                order: [],
                language: {
                    url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json"
                },
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tümü"]],
                pageLength: 10,
                paging: true,
                buttons: [
                    {
                        extend: "copy",
                        text: '<i class="fas fa-copy"></i>',
                        titleAttr: "Kopyala",
                        className: "btn-copy"
                    },
                    {
                        text: '<i class="fas fa-filter"></i> Filtrele',
                        titleAttr: "Filtreleme seçeneklerini aç",
                        className: "customf-filter-button",
                        action: function () {
                            populateColumnSelector("bookTable");
                            generateCustomfFilterForm("bookTable");
                            $('#customf-filter-modal').show();
                            activateSelect2();
                        }
                    }
                ],
                dom: 'Bfrtip'
            });
            $('#googleBooksModal').on('show.bs.modal', function() {
                loadPopularBooks();
            });
             $('#googleBooksSearchForm').submit(function(e) {
                e.preventDefault();
                const query = $(this).find('input[name="query"]').val();
                searchBooks(query);
            });

            // Modal aç butonu
            $('#searchGoogleBooksBtn').click(function() {
                $('#googleBooksModal').modal('show');
            });
        });

        function activateSelect2() {
            // Select2'yi başlatmadan önce, eğer zaten başlatıldıysa yok etmeliyiz.
            // Bu, modal her açıldığında Select2'nin tekrar tekrar başlatılmasını engeller.
            if ($('#columnSelector').data('select2')) {
                $('#columnSelector').select2('destroy');
            }

            // "Tümünü Seç" seçeneği, Select2 başlatılmadan önce DOM'a eklenmeli.
            // Bu kontrol, seçeneğin zaten var olup olmadığını kontrol eder.
            if ($('#columnSelector option[value="select-all-option"]').length === 0) {
                // En başa "Tümünü Seç" seçeneğini ekle
                $('#columnSelector').prepend('<option value="select-all-option">Tümünü Seç</option>');
            }

            $('#columnSelector').select2({
                placeholder: "Filtrelenecek sütunları seçin...",
                width: '100%',
                multiple: true, // Birden fazla seçim yapılmasına izin ver
                dropdownParent: $('#customf-filter-modal .customf-modal-content'),

                // Dropdown listesindeki her öğenin nasıl render edileceğini özelleştirir
                templateResult: function (data) {
                    // Eğer bu öğe bizim özel "Tümünü Seç" öğemizse
                    if (data.id === 'select-all-option') {
                        return $('<span><i class="fas fa-check-double"></i> Tümünü Seç</span>');
                    }
                    // Diğer seçenekleri varsayılan olarak render et
                    return data.text;
                },

                // Seçilen öğelerin Select2 kutusunda nasıl görüneceğini özelleştirir
                templateSelection: function (data) {
                    // Eğer "Tümünü Seç" seçeneği seçilirse, kutucukta gösterilecek metni değiştir
                    if (data.id === 'select-all-option') {
                        // "Tümünü Seç" hariç diğer tüm seçenekleri al
                        const totalSelectableOptions = $('#columnSelector option').not('[value="select-all-option"]').length;
                        // Şu anda seçili olan seçeneklerin sayısını al (null kontrolü ile)
                        const currentSelectedCount = $('#columnSelector').val() ? $('#columnSelector').val().length : 0;

                        // Eğer tüm seçenekler seçiliyse, özel bir mesaj göster
                        if (currentSelectedCount === totalSelectableOptions) {
                             return `Tümü Seçili (${totalSelectableOptions})`;
                        }
                        // Aksi takdirde, seçilenlerin sayısını göster
                        return `(${currentSelectedCount}/${totalSelectableOptions}) Sütun Seçili`;
                    }
                    // Diğer seçenekleri varsayılan olarak render et
                    return data.text;
                }
            });

            // Select2 dropdown içindeki "Tümünü Seç" seçeneği tıklandığında
            $('#columnSelector').on('select2:select', function (e) {
                const selectedId = e.params.data.id;
                if (selectedId === 'select-all-option') {
                    const $selector = $(this);
                    // "Tümünü Seç" hariç tüm seçeneklerin değerlerini al
                    const allOptions = $selector.find('option').not('[value="select-all-option"]').map(function () {
                        return $(this).val();
                    }).get();

                    // Tüm sütunları seçili hale getir
                    $selector.val(allOptions).trigger('change');
                    // Select2 dropdown'ını kapat
                    $selector.select2('close');
                }
            });

            // Select2 dropdown içindeki bir seçeneğin seçimi kaldırıldığında (unselect)
            $('#columnSelector').on('select2:unselect', function (e) {
                const unselectedId = e.params.data.id;
                if (unselectedId === 'select-all-option') {
                    // Eğer "Tümünü Seç" seçimi kaldırılırsa, tüm seçimleri kaldır
                    // Bu durumda, sadece "Tümünü Seç" seçeneğini değil, tüm sütunların seçimini de kaldırmak isteyebiliriz.
                    // Eğer sadece "Tümünü Seç"in kaldırılmasını istiyorsanız, bu kısmı değiştirebilirsiniz.
                    $(this).val(null).trigger('change'); // Tüm seçimleri kaldırır
                }
            });
        }

        function populateColumnSelector(tableId) {
            const table = $(`#${tableId}`).DataTable();
            const columns = table.columns().header().toArray();
            const selector = $('#columnSelector');
            selector.empty();

            columns.forEach((col, index) => {
                const colName = $(col).text().trim();
                if (colName && colName !== "İşlemler") {
                    const selectedAttr = selectedColumns.includes(index) ? 'selected' : '';
                    selector.append(`<option value="${index}" ${selectedAttr}>${colName}</option>`);
                }
            });

            selector.trigger('change.select2');
        }

        function generateCustomfFilterForm(tableId) {
            const table = $(`#${tableId}`).DataTable();
            const columns = table.columns().header().toArray();
            const allData = table.rows().data().toArray();

            const previousValues = previousFilterValues;
            const selectedIndexes = $('#columnSelector').val()?.map(Number) || [];
            let formHtml = "";

            selectedIndexes.forEach(index => {
                const col = columns[index];
                const colName = $(col).text().trim();
                if (!colName || colName === "İşlemler") return;

                const values = allData.map(row => row[index]);
                const isDate = values.every(v => isValidDate(v));
                const isNumber = values.every(v => !isNaN(parseFloat(v.toString().replace(',', '.'))));
                const prev = previousValues[index] || {};

                formHtml += `<div class="customf-input-group"><label>${colName}</label>`;

                const cleanedTexts = values
                    .filter(v => v && v.toString().trim() !== "")
                    .map(v => {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = v;
                        return tempDiv.textContent || tempDiv.innerText || "";
                    });

                const uniqueValues = [...new Set(cleanedTexts)];

                if (uniqueValues.length > 0 && uniqueValues.length <= 10) {
                    formHtml += `<select class="filter-input" data-type="select" data-index="${index}">`;
                    formHtml += `<option value="">Tümü</option>`;
                    uniqueValues.forEach(val => {
                        const selected = prev['select'] === val ? 'selected' : '';
                        formHtml += `<option value="${val}" ${selected}>${val}</option>`;
                    });
                    formHtml += `</select>`;
                }
                else if (isDate) {
                    const startVal = (prev['date-start'] && prev['date-start'][0]) || '';
                    const endVal = (prev['date-end'] && prev['date-end'][0]) || '';
                    formHtml += `<div class="customf-inline-inputs">`;
                    formHtml += `<input type="datetime-local" class="filter-input" data-type="date-start" data-index="${index}" value="${startVal}">`;
                    formHtml += `<input type="datetime-local" class="filter-input" data-type="date-end" data-index="${index}" value="${endVal}">`;
                    formHtml += `</div>`;
                }
                else if (isNumber) {
                    const min = (prev['range'] && prev['range'][0]) || '';
                    const max = (prev['range'] && prev['range'][1]) || '';
                    formHtml += `<div class="customf-inline-inputs">`;
                    formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Min" value="${min}">`;
                    formHtml += `<input type="number" class="filter-input" data-type="range" data-index="${index}" placeholder="Max" value="${max}">`;
                    formHtml += `</div>`;
                }
                else {
                    const val = prev['text'] || '';
                    formHtml += `<input type="text" class="filter-input" data-type="text" data-index="${index}" placeholder="Metin giriniz" value="${val}">`;
                }

                formHtml += `</div>`;
            });

            if (selectedIndexes.length === 0) {
                formHtml = `
                    <div class="empty-placeholder">
                        <i class="fas fa-sliders-h"></i><br>
                        <b>Filtrelemek istediğiniz sütunları seçin.</b>
                        <div style="font-size:13px; margin-top: 6px;">Yukarıdaki listeden bir veya daha fazla sütun seçin.</div>
                    </div>
                `;
            }

            $('#customf-dynamic-filter-form').html(formHtml);
        }

        $('#customf-clear-filter').on('click', function () {
            $('#columnSelector').val(null).trigger('change');
            previousFilterValues = {};
            generateCustomfFilterForm("bookTable");
            $.fn.dataTable.ext.search = [];
            updateFilterBadge();
            $('#bookTable').DataTable().draw();
        });

        $(document).on('change', '#columnSelector', function () {
            selectedColumns = $(this).val()?.map(Number) || [];
            generateCustomfFilterForm("bookTable");
        });

        $('#customf-apply-filter').on('click', function () {
            const table = $('#bookTable').DataTable();
            selectedColumns = $('#columnSelector').val()?.map(Number) || [];
            previousFilterValues = {};

            $('.filter-input').each(function () {
                const type = $(this).data('type');
                const index = $(this).data('index');
                if (!previousFilterValues[index]) previousFilterValues[index] = {};
                if (type === 'range' || type === 'date-start' || type === 'date-end') {
                    if (!previousFilterValues[index][type]) previousFilterValues[index][type] = [];
                    previousFilterValues[index][type].push($(this).val());
                } else {
                    previousFilterValues[index][type] = $(this).val();
                }
            });

            $.fn.dataTable.ext.search = [];

            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                let pass = true;

                $('.filter-input').each(function () {
                    const type = $(this).data('type');
                    const index = parseInt($(this).data('index'));
                    const value = $(this).val().trim();
                    const cell = data[index];

                    if (!value) return;

                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = cell;
                    const cellText = tempDiv.textContent || tempDiv.innerText || "";

                    if (type === 'select') {
                        if (cellText.trim() !== value) pass = false;
                    }
                    else if (type === 'text') {
                        if (!cellText.toLowerCase().includes(value.toLowerCase())) pass = false;
                    }
                    else if (type === 'range') {
                        const inputs = $(`input[data-type="range"][data-index="${index}"]`);
                        const min = parseFloat(inputs.eq(0).val().replace(',', '.')) || -Infinity;
                        const max = parseFloat(inputs.eq(1).val().replace(',', '.')) || Infinity;
                        const num = parseFloat(cellText.replace(',', '.')) || 0;
                        if (num < min || num > max) pass = false;
                    }
                    else if (type === 'date-start' || type === 'date-end') {
                        const startVal = $(`input[data-type="date-start"][data-index="${index}"]`).val();
                        const endVal = $(`input[data-type="date-end"][data-index="${index}"]`).val();
                        const date = parseDate(cellText);
                        const startDate = startVal ? new Date(startVal) : null;
                        const endDate = endVal ? new Date(endVal) : null;

                        if (!date || (startDate && date < startDate) || (endDate && date > endDate)) {
                            pass = false;
                        }
                    }
                });

                return pass;
            });
           updateFilterBadge();
            table.draw();
            $('#customf-filter-modal').hide();

        });

        function isValidDate(dateStr) {
            const parsed = parseDate(dateStr);
            return parsed instanceof Date && !isNaN(parsed.getTime());
        }

        function parseDate(dateStr) {
            if (!dateStr || typeof dateStr !== 'string') return null;

            const turkishDateRegex = /^\d{1,2}\.\d{1,2}\.\d{4}$/;
            const turkishDateTimeRegex = /^\d{1,2}\.\d{1,2}\.\d{4}\s+\d{1,2}:\d{2}(:\d{2})?$/;

            if (turkishDateRegex.test(dateStr)) {
                const [day, month, year] = dateStr.split('.').map(Number);
                return new Date(year, month - 1, day);
            }

            if (turkishDateTimeRegex.test(dateStr)) {
                const [datePart, timePart] = dateStr.split(' ');
                const [day, month, year] = datePart.split('.').map(Number);
                const [hour, minute, second = 0] = timePart.split(':').map(Number);
                return new Date(year, month - 1, day, hour, minute, second);
            }

            const iso = new Date(dateStr);
            return isNaN(iso.getTime()) ? null : iso;
        }

         // Popüler kitapları yükle
        function loadPopularBooks() {
            $('#searchResults').empty();
            $('#popularBooks').html('<div class="col-12 text-center"><i class="fas fa-spinner fa-spin"></i> Yükleniyor...</div>');

            $.get('@Url.Action("GetPopularBooks", "Book")', function(data) {
                if (data && data.length > 0) {
                    $('#popularBooks').empty();
                    data.forEach(book => {
                        $('#popularBooks').append(renderBookCard(book));
                    });
                } else {
                    $('#popularBooks').html('<div class="col-12 text-center">Popüler kitap bulunamadı.</div>');
                }
            }).fail(function() {
                $('#popularBooks').html('<div class="col-12 text-center text-danger">Popüler kitaplar yüklenirken hata oluştu.</div>');
            });
        }

        // Kitapları ara
               function searchBooks(query) {
            $('#popularBooks').empty();
            $('#searchResults').html('<div class="col-12 text-center"><i class="fas fa-spinner fa-spin"></i> Aranıyor...</div>');
            $('#errorMessage').addClass('d-none');

            $.get('@Url.Action("SearchInApi", "Book")', {
                query: query,
                returnJson: true
            }, function(data) {
                $('#searchResults').empty();
                if (data.error) {
                    $('#errorMessage').removeClass('d-none').text(data.error);
                } else if (data && data.length > 0) {
                    data.forEach(book => {
                        $('#searchResults').append(renderBookCard(book));
                    });
                } else {
                    $('#searchResults').html('<div class="col-12 text-center">Sonuç bulunamadı.</div>');
                }
            }).fail(function(jqXHR, textStatus, errorThrown) {
                console.error("Arama hatası:", textStatus, errorThrown);
                $('#errorMessage').removeClass('d-none')
                    .text('Arama yapılırken hata oluştu: ' + textStatus);
            });
        }
          // Kitap kartı oluştur
                        function renderBookCard(book) {
            return `
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="book-card card h-100" data-id="${book.id}">
                        <div class="book-cover-container">
                            <img src="${book.thumbnailUrl || '/images/book.png'}"
                                 class="book-cover"
                                 alt="${book.title || 'Kitap kapağı'}"
                                 style="width:150px; height:auto;">
                        </div>
                        <div class="book-details">
                            <h5 class="book-title">${book.title || 'Başlık yok'}</h5>
                            <p class="book-author"><strong>Yazar:</strong> ${book.author || 'Bilinmiyor'}</p>
                            <p class="book-meta"><strong>Yayınevi:</strong> ${book.publisher || 'Bilinmiyor'}</p>
                            <p class="book-meta"><strong>ISBN:</strong> ${book.isbn || 'Bilinmiyor'}</p>
                            <p class="book-meta"><small class="text-muted">Yayın Tarihi: ${book.publishedDate || 'Bilinmiyor'}</small></p>

                            <form class="add-book-form mt-auto" method="post" action="@Url.Action("AddFromApi", "Book")">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="bookId" value="${book.id}" />
                                <input type="hidden" name="isbn" value="${book.isbn}" />
                                <input type="hidden" name="title" value="${book.title}" />
                                <input type="hidden" name="author" value="${book.author}" />
                                <input type="hidden" name="publisher" value="${book.publisher}" />
                                <input type="hidden" name="thumbnailUrl" value="${book.thumbnailUrl}" />
                                <input type="hidden" name="category" value="${book.category}" />
                                <input type="hidden" name="description" value="${book.description}" />
                                <button type="submit" class="btn btn-success btn-block mt-3">
                                    <i class="fas fa-plus-circle"></i> Kütüphaneye Ekle
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            `;
        }

        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('customf-filter-modal');
            const closeBtn = document.querySelector('.customf-close');

            window.onclick = function (event) {
                if (event.target === modal) modal.style.display = 'none';
            };

            closeBtn.onclick = function () {
                modal.style.display = 'none';
            };
        });

                // Kart tıklama -> detay aç
        $(document).on('click', '.book-card', function (e) {
            // İçerideki form/btn tıklanırsa kart click çalışmasın
            if ($(e.target).closest('button, a, form, input').length) return;
            const id = $(this).data('id');
            showBookDetailsInModal(id);
        });

        // Detay görünümünü yükle
        function showBookDetailsInModal(googleId) {
            // Görünümleri değiştir
            $('#googleBooksSearchForm, #popularBooks, #searchResults').hide();
            $('#bookDetailView')
                .removeClass('d-none')
                .html('<div class="text-center py-5"><i class="fas fa-spinner fa-spin"></i> Yükleniyor...</div>');

            // Sunucudan tek kitap detayını JSON al (id ile)
            $.get('@Url.Action("GetBookByIdFromApi", "Book")', { id: googleId }, function (data) {
                // data: { id, title, author, publisher, isbn, publishedDate, language, pageCount, description, thumbnailUrl, category ... }
                $('#bookDetailView').html(renderBookDetail(data));
            }).fail(function () {
                $('#bookDetailView').html('<div class="alert alert-danger">Detaylar yüklenirken bir hata oluştu.</div>');
            });
        }

        // Detay görünümü şablonu
                function renderBookDetail(book) {
          const rawThumb = (book.thumbnailUrl || '/images/book.png').replace('http://','https://');
          // Google Books’tan daha büyük görsel denemesi (zoom=2’ye yükselt)
          const thumb = rawThumb.replace('zoom=1', 'zoom=2');

          const desc   = book.description || 'Açıklama bulunamadı.';
          const lang   = book.language || 'Bilinmiyor';
          const page   = book.pageCount || 'Bilinmiyor';
          const pub    = book.publisher || 'Bilinmiyor';
          const cat    = book.category || 'Bilinmiyor';
          const isbn   = book.isbn || 'Bilinmiyor';
          const title  = book.title || 'Başlık yok';
          const author = book.author || 'Bilinmiyor';

          return `
            <div class="container-fluid">
              <div class="row">
                <!-- SOL: Kapak -->
                <div class="col-md-4 d-flex justify-content-center align-items-start mb-3 mb-md-0">
                  <img src="${thumb}" class="detail-cover img-fluid rounded shadow" alt="${title}">
                </div>

                <!-- SAĞ: Bilgiler -->
                <div class="col-md-8">
                  <h3 class="mb-1">${title}</h3>
                  <h5 class="text-muted">${author}</h5>
                  <hr/>
                  <div class="mb-2"><strong>ISBN:</strong> ${isbn}</div>
                  <div class="mb-2"><strong>Yayınevi:</strong> ${pub}</div>
                  <div class="mb-2"><strong>Kategori:</strong> ${cat}</div>
                  <div class="mb-2"><strong>Yayın Tarihi:</strong> ${book.publishedDate || 'Bilinmiyor'}</div>
                  <div class="mb-2"><strong>Dil:</strong> ${lang}</div>
                  <div class="mb-2"><strong>Sayfa:</strong> ${page}</div>

                  <div class="mt-3 p-3 bg-light rounded" style="max-height: 260px; overflow:auto;">
                    <h6 class="mb-2">Açıklama</h6>
                    <div>${desc}</div>
                  </div>

                  <div class="d-flex flex-wrap gap-2 mt-4">
                    <form method="post" action="@Url.Action("AddFromApi", "Book")" class="mr-2">
                      @Html.AntiForgeryToken()
                      <input type="hidden" name="bookId" value="${book.id}">
                      <input type="hidden" name="isbn" value="${book.isbn}">
                      <input type="hidden" name="title" value="${title}">
                      <input type="hidden" name="author" value="${author}">
                      <input type="hidden" name="publisher" value="${pub}">
                      <input type="hidden" name="thumbnailUrl" value="${rawThumb}">
                      <input type="hidden" name="category" value="${cat}">
                      <input type="hidden" name="description" value="${desc}">
                      <button type="submit" class="btn btn-success">
                        <i class="fas fa-plus-circle"></i> Kütüphaneye Ekle
                      </button>
                    </form>

                    ${book.previewLink ? `
                      <a href="${book.previewLink}" target="_blank" class="btn btn-outline-primary">
                        <i class="fas fa-external-link-alt"></i> Google Books’ta Önizle
                      </a>` : ``}

                    <button type="button" class="btn btn-secondary" onclick="closeBookDetailInModal()">
                      <i class="fas fa-arrow-left"></i> Geri Dön
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
        }


        // Detaydan listeye geri dön
        function closeBookDetailInModal() {
            $('#bookDetailView').addClass('d-none').empty();
            $('#googleBooksSearchForm, #popularBooks, #searchResults').show();
        }
        function deleteBook(id) {
            Swal.fire({
                title: "Silmek istediğinize emin misiniz?",
                text: "Bu işlemi geri alamazsınız!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Evet, Sil!",
                cancelButtonText: "İptal"
            }).then((result) => {
                if (result.isConfirmed) {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Book/DeleteConfirmed/' + id;

                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token;

                    form.appendChild(tokenInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }
                           function updateFilterBadge() {
          const count = Object.values(previousFilterValues || {})
            .filter(v => v && Object.values(v).some(x => x && String(x).trim() !== ''))
            .length;

          const $btn = $('.customf-filter-button');

          // Rozeti yeniden oluştur
          $btn.find('.filter-badge').remove();

          // Butonu konumlandır (CSS yazmadan inline)
          $btn.css({ position: 'relative', overflow: 'visible' });

          if (count > 0) {
            // Rozeti sağ ÜST iç köşeye yerleştir (taşmadan görünsün)
            $btn.append(
              `<span class="filter-badge" style="
                position:absolute;
                top:2px;            /* dilersen 4-6px yapabilirsin */
                right:2px;          /* dilersen 4-6px yapabilirsin */
                transform: translate(0,0);
                min-width:18px;
                height:18px;
                padding:0 6px;
                border-radius:9999px;
                display:flex;align-items:center;justify-content:center;
                font-size:11px;font-weight:800;
                background:#ef4444;color:#fff;
                line-height:1; z-index:3;
                box-shadow:0 6px 14px rgba(239,68,68,.35);
              ">${count}</span>`
            );
          }
        }
    </script>
}
